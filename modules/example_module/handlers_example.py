# modules/example_module/handlers_example.py
from aiogram import Router, types, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.markdown import hbold, hcode, hitalic
from aiogram.exceptions import TelegramBadRequest 
from loguru import logger
from sqlalchemy import select, delete as sql_delete, func 

from .keyboards_example import (
    get_example_module_main_menu_keyboard,
    get_my_notes_keyboard,
    get_note_details_keyboard
)
from .callback_data_factories_example import ExampleModuleAction
from core.ui.callback_data_factories import ModuleMenuEntry, CoreMenuNavigate 
from .permissions import ( 
    MODULE_NAME, 
    PERM_ACCESS_USER_FEATURES,
    PERM_VIEW_MODULE_SETTINGS,
    PERM_VIEW_SECRET_INFO,
    PERM_PERFORM_BASIC_ACTION,
    PERM_PERFORM_ADVANCED_ACTION,
    PERM_MANAGE_OWN_NOTES,
    PERM_ADMIN_VIEW_ALL_NOTES,
    PERM_ADMIN_MANAGE_MODULE 
)
from .models import UserNote 

from typing import TYPE_CHECKING, Any, List, Optional
if TYPE_CHECKING:
    from core.services_provider import BotServicesProvider
    from sqlalchemy.ext.asyncio import AsyncSession

example_module_router = Router(name="sdb_example_module_handlers")

class FSMExampleDialog(StatesGroup):
    waiting_for_name = State()
    waiting_for_age = State()

class FSMAddNote(StatesGroup):
    waiting_for_note_text = State()

async def check_permission(
    user_id: int, 
    permission_name: str, 
    services: 'BotServicesProvider', 
    session: 'AsyncSession'
) -> bool:
    has_perm = await services.rbac.user_has_permission(session, user_id, permission_name)
    if not has_perm:
        logger.warning(f"[{MODULE_NAME}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–∏, —Ç—Ä–µ–±—É—é—â–µ–π –ø—Ä–∞–≤–∞ '{permission_name}', –Ω–æ –Ω–µ –∏–º–µ–µ—Ç –µ–≥–æ.")
    return has_perm

@example_module_router.message(Command("example"))
async def handle_example_command(
    message: types.Message, 
    services_provider: 'BotServicesProvider'
):
    user_id = message.from_user.id
    logger.info(f"[{MODULE_NAME}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /example.")
    
    async with services_provider.db.get_session() as session:
        if not await check_permission(user_id, PERM_ACCESS_USER_FEATURES, services_provider, session):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–æ–¥—É–ª—é.")
            return

    module_info = services_provider.modules.get_module_info(MODULE_NAME)
    display_name = module_info.manifest.display_name if module_info and module_info.manifest else MODULE_NAME
    
    text = (f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {hbold(display_name)}!\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    async with services_provider.db.get_session() as session: 
        keyboard = await get_example_module_main_menu_keyboard(services_provider, user_id, session)
    await message.answer(text, reply_markup=keyboard)

@example_module_router.callback_query(ModuleMenuEntry.filter(F.module_name == MODULE_NAME))
async def cq_show_example_module_main_menu(
    query: types.CallbackQuery, 
    callback_data: ModuleMenuEntry, 
    services_provider: 'BotServicesProvider'
):
    user_id = query.from_user.id
    logger.info(f"[{MODULE_NAME}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ—à–µ–ª –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–¥—É–ª—è.")

    async with services_provider.db.get_session() as session: 
        if not await check_permission(user_id, PERM_ACCESS_USER_FEATURES, services_provider, session):
            await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é.", show_alert=True)
            return

        module_info = services_provider.modules.get_module_info(MODULE_NAME)
        display_name = module_info.manifest.display_name if module_info and module_info.manifest else MODULE_NAME

        text = (f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {hbold(display_name)}!\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        keyboard = await get_example_module_main_menu_keyboard(services_provider, user_id, session)
    
        if query.message:
            try:
                if query.message.text != text or query.message.reply_markup != keyboard:
                    await query.message.edit_text(text, reply_markup=keyboard)
                await query.answer()
            except TelegramBadRequest as e: # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π TelegramBadRequest
                if "message is not modified" in str(e).lower(): await query.answer()
                else: logger.warning(f"[{MODULE_NAME}] –û—à–∏–±–∫–∞ edit_text –≤ –º–µ–Ω—é –º–æ–¥—É–ª—è: {e}")
            except Exception as e: 
                logger.error(f"[{MODULE_NAME}] –û—à–∏–±–∫–∞ –≤ cq_show_example_module_main_menu: {e}", exc_info=True)
                await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)
        else:
            await query.answer()

@example_module_router.callback_query(ExampleModuleAction.filter(F.action == "show_module_settings"))
async def cq_action_show_module_settings(
    query: types.CallbackQuery, 
    services_provider: 'BotServicesProvider'
):
    user_id = query.from_user.id
    logger.info(f"[{MODULE_NAME}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è.")
    
    async with services_provider.db.get_session() as session:
        if not await check_permission(user_id, PERM_VIEW_MODULE_SETTINGS, services_provider, session):
            await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.", show_alert=True)
            return

        actual_module_settings = services_provider.modules.get_module_settings(MODULE_NAME)
        settings_text_parts = [f"‚öôÔ∏è {hbold('–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è')} {hcode(MODULE_NAME)}:"]
        if actual_module_settings:
            for key, value in actual_module_settings.items():
                settings_text_parts.append(f"  ‚ñ´Ô∏è {hcode(key)}: {hcode(str(value))}")
        else:
            settings_text_parts.append("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        
        text = "\n".join(settings_text_parts)
        keyboard = await get_example_module_main_menu_keyboard(services_provider, user_id, session)
    
        if query.message:
            try:
                if query.message.text != text: await query.message.edit_text(text, reply_markup=keyboard)
                await query.answer()
            except TelegramBadRequest as e: # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π TelegramBadRequest
                if "message is not modified" not in str(e).lower(): logger.warning(f"[{MODULE_NAME}] –û—à–∏–±–∫–∞ edit_text (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏): {e}")
                await query.answer()
            except Exception as e:
                logger.error(f"[{MODULE_NAME}] –û—à–∏–±–∫–∞ –≤ cq_action_show_module_settings: {e}", exc_info=True)
                await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@example_module_router.callback_query(ExampleModuleAction.filter(F.action == "show_secret_info"))
async def cq_action_show_secret_info(query: types.CallbackQuery, services_provider: 'BotServicesProvider'):
    user_id = query.from_user.id
    async with services_provider.db.get_session() as session:
        if not await check_permission(user_id, PERM_VIEW_SECRET_INFO, services_provider, session):
            await query.answer("ü§´ –≠—Ç–æ —Å–µ–∫—Ä–µ—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!", show_alert=True)
            return
    await query.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Å—É–ø–µ—Ä-—Å–µ–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏! üéâ", show_alert=True)

@example_module_router.callback_query(ExampleModuleAction.filter(F.action == "do_basic_action"))
async def cq_action_do_basic_action(query: types.CallbackQuery, services_provider: 'BotServicesProvider'):
    user_id = query.from_user.id
    async with services_provider.db.get_session() as session:
        if not await check_permission(user_id, PERM_PERFORM_BASIC_ACTION, services_provider, session):
            await query.answer("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", show_alert=True)
            return
    await query.answer("‚úÖ –ë–∞–∑–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!", show_alert=True)

@example_module_router.callback_query(ExampleModuleAction.filter(F.action == "do_advanced_action"))
async def cq_action_do_advanced_action(query: types.CallbackQuery, services_provider: 'BotServicesProvider'):
    user_id = query.from_user.id
    async with services_provider.db.get_session() as session:
        if not await check_permission(user_id, PERM_PERFORM_ADVANCED_ACTION, services_provider, session):
            await query.answer("üöÄ –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Å–æ–±—ã—Ö –ø—Ä–∞–≤!", show_alert=True)
            return
    await query.answer("üí• –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! üí•", show_alert=True)

@example_module_router.message(Command("fsm_example"))
async def cmd_fsm_start(message: types.Message, state: FSMContext, services_provider: 'BotServicesProvider'):
    user_id = message.from_user.id
    logger.info(f"[{MODULE_NAME}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª FSM-–¥–∏–∞–ª–æ–≥ (/fsm_example).")
    async with services_provider.db.get_session() as session:
        if not await check_permission(user_id, PERM_ACCESS_USER_FEATURES, services_provider, session): 
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return
    await state.set_state(FSMExampleDialog.waiting_for_name)
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç –≤ —ç—Ç–æ–º FSM-–¥–∏–∞–ª–æ–≥–µ?")

@example_module_router.message(StateFilter(FSMExampleDialog.waiting_for_name))
async def process_fsm_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º.")
        return
    await state.update_data(name=message.text)
    await state.set_state(FSMExampleDialog.waiting_for_age)
    logger.info(f"[{MODULE_NAME}] FSM: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –∏–º—è: {message.text}")
    await message.answer(f"–ü—Ä–∏—è—Ç–Ω–æ, {hitalic(message.text)}! –ê —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç (FSM)?")

@example_module_router.message(StateFilter(FSMExampleDialog.waiting_for_age))
async def process_fsm_age(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not message.text or not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.")
        return
    age = int(message.text)
    if not (0 < age < 120):
        await message.answer("–ù–µ–æ–±—ã—á–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return
    user_data = await state.get_data()
    name = user_data.get("name", "–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü")
    logger.info(f"[{MODULE_NAME}] FSM: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (–∏–º—è: {name}) –≤–≤–µ–ª –≤–æ–∑—Ä–∞—Å—Ç: {age}")
    await message.answer(
        f"–ó–∞–ø–æ–º–Ω–∏–ª, {hitalic(name)} ({age} –ª–µ—Ç)!\n"
        f"FSM –¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ."
    )
    await state.clear() 

@example_module_router.message(Command("cancel_fsm"), StateFilter(FSMExampleDialog)) 
async def cancel_fsm_dialog(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logger.info(f"[{MODULE_NAME}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª FSM –¥–∏–∞–ª–æ–≥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è {current_state}")
    await state.clear()
    await message.answer("FSM –¥–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω.")

@example_module_router.message(Command("my_notes"))
async def cmd_my_notes(message: types.Message, services_provider: 'BotServicesProvider'):
    user_id = message.from_user.id
    logger.info(f"[{MODULE_NAME}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏ (/my_notes).")
    
    async with services_provider.db.get_session() as session:
        if not await check_permission(user_id, PERM_MANAGE_OWN_NOTES, services_provider, session):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏.")
            return

        stmt = select(UserNote).where(UserNote.user_telegram_id == user_id).order_by(UserNote.created_at.desc())
        result = await session.execute(stmt)
        notes: List[UserNote] = list(result.scalars().all())
        
        text = f"üìù {hbold('–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏')}:"
        if not notes:
            text += "\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫. –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é."
            
        keyboard = await get_my_notes_keyboard(notes, services_provider, user_id, session)
        await message.answer(text, reply_markup=keyboard)

@example_module_router.callback_query(ExampleModuleAction.filter(F.action == "my_notes_list"))
async def cq_my_notes_list(query: types.CallbackQuery, services_provider: 'BotServicesProvider'):
    user_id = query.from_user.id
    logger.info(f"[{MODULE_NAME}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –∑–∞–º–µ—Ç–æ–∫ (callback).")
    
    async with services_provider.db.get_session() as session:
        if not await check_permission(user_id, PERM_MANAGE_OWN_NOTES, services_provider, session):
            await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏.", show_alert=True)
            return

        stmt = select(UserNote).where(UserNote.user_telegram_id == user_id).order_by(UserNote.created_at.desc())
        result = await session.execute(stmt)
        notes: List[UserNote] = list(result.scalars().all())
        
        text = f"üìù {hbold('–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏')}:"
        if not notes:
            text += "\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫. –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é."
            
        keyboard = await get_my_notes_keyboard(notes, services_provider, user_id, session)
        if query.message:
            try:
                if query.message.text != text or query.message.reply_markup != keyboard:
                    await query.message.edit_text(text, reply_markup=keyboard)
                await query.answer()
            except TelegramBadRequest as e: # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π TelegramBadRequest
                if "message is not modified" not in str(e).lower(): logger.warning(f"–û—à–∏–±–∫–∞ edit_text –≤ cq_my_notes_list: {e}")
                await query.answer()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ cq_my_notes_list: {e}", exc_info=True)
                await query.answer("–û—à–∏–±–∫–∞.", show_alert=True)

@example_module_router.callback_query(ExampleModuleAction.filter(F.action == "add_note_start"))
async def cq_add_note_start(query: types.CallbackQuery, state: FSMContext, services_provider: 'BotServicesProvider'):
    user_id = query.from_user.id
    async with services_provider.db.get_session() as session:
        if not await check_permission(user_id, PERM_MANAGE_OWN_NOTES, services_provider, session):
            await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫.", show_alert=True)
            return
    
    module_settings = services_provider.modules.get_module_settings(MODULE_NAME)
    max_notes = module_settings.get("max_notes_per_user", 5) if module_settings else 5
    
    async with services_provider.db.get_session() as session: 
        count_stmt = select(func.count(UserNote.id)).where(UserNote.user_telegram_id == user_id)
        notes_count_res = await session.execute(count_stmt)
        notes_count = notes_count_res.scalar_one_or_none() or 0

    if notes_count >= max_notes:
        await query.answer(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–º–µ—Ç–æ–∫ ({max_notes} —à—Ç.). –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ.", show_alert=True)
        return

    await state.set_state(FSMAddNote.waiting_for_note_text)
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–π –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏:") # type: ignore
    await query.answer()

@example_module_router.message(StateFilter(FSMAddNote.waiting_for_note_text))
async def process_add_note_text(message: types.Message, state: FSMContext, services_provider: 'BotServicesProvider'):
    user_id = message.from_user.id
    if not message.text:
        await message.answer("–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel_note.")
        return

    async with services_provider.db.get_session() as session:
        if not await check_permission(user_id, PERM_MANAGE_OWN_NOTES, services_provider, session):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫.")
            await state.clear()
            return
        
        new_note = UserNote(user_telegram_id=user_id, note_text=message.text)
        session.add(new_note)
        try:
            await session.commit()
            logger.info(f"[{MODULE_NAME}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É: '{message.text[:30]}...'")
            await message.answer(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_notes –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
        except Exception as e:
            await session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è {user_id}: {e}", exc_info=True)
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            await state.clear()

@example_module_router.message(Command("cancel_note"), StateFilter(FSMAddNote))
async def cancel_add_note_fsm(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@example_module_router.callback_query(ExampleModuleAction.filter(F.action == "view_note_details"))
async def cq_view_note_details(query: types.CallbackQuery, callback_data: ExampleModuleAction, services_provider: 'BotServicesProvider'):
    user_id = query.from_user.id
    note_id = callback_data.item_id
    if note_id is None:
        await query.answer("–û—à–∏–±–∫–∞: ID –∑–∞–º–µ—Ç–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω.", show_alert=True); return

    async with services_provider.db.get_session() as session:
        if not await check_permission(user_id, PERM_MANAGE_OWN_NOTES, services_provider, session):
            await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π –∑–∞–º–µ—Ç–∫–∏.", show_alert=True); return
        
        note = await session.get(UserNote, note_id)
        if not note or note.user_telegram_id != user_id:
            await query.answer("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–π –¥–æ—Å—Ç—É–ø–∞.", show_alert=True); return
            
        text = f"üìù {hbold('–î–µ—Ç–∞–ª–∏ –∑–∞–º–µ—Ç–∫–∏:')}\n\n{hitalic(note.note_text)}\n\n–°—Ç–∞—Ç—É—Å: {'‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ' if note.is_done else 'üîò –í –ø—Ä–æ—Ü–µ—Å—Å–µ'}"
        keyboard = await get_note_details_keyboard(note, services_provider, user_id, session)
        if query.message:
            try:
                await query.message.edit_text(text, reply_markup=keyboard)
                await query.answer()
            except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –≤ cq_view_note_details: {e}")

@example_module_router.callback_query(ExampleModuleAction.filter(F.action == "toggle_note_done"))
async def cq_toggle_note_done(query: types.CallbackQuery, callback_data: ExampleModuleAction, services_provider: 'BotServicesProvider'):
    user_id = query.from_user.id
    note_id = callback_data.item_id
    if note_id is None: await query.answer("–û—à–∏–±–∫–∞ ID.", show_alert=True); return

    async with services_provider.db.get_session() as session:
        if not await check_permission(user_id, PERM_MANAGE_OWN_NOTES, services_provider, session):
            await query.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True); return
        
        note = await session.get(UserNote, note_id)
        if not note or note.user_telegram_id != user_id:
            await query.answer("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞/–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True); return
            
        note.is_done = not note.is_done
        session.add(note)
        alert_text = ""
        try:
            await session.commit()
            alert_text = "–°—Ç–∞—Ç—É—Å –∑–∞–º–µ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω."
            logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–º–µ—Ç–∫–∏ ID {note.id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {note.is_done} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}.")
            text = f"üìù {hbold('–î–µ—Ç–∞–ª–∏ –∑–∞–º–µ—Ç–∫–∏:')}\n\n{hitalic(note.note_text)}\n\n–°—Ç–∞—Ç—É—Å: {'‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ' if note.is_done else 'üîò –í –ø—Ä–æ—Ü–µ—Å—Å–µ'}"
            keyboard = await get_note_details_keyboard(note, services_provider, user_id, session)
            if query.message: await query.message.edit_text(text, reply_markup=keyboard)
        except Exception as e:
            await session.rollback()
            alert_text = "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è."
            logger.error(f"–û—à–∏–±–∫–∞ toggle_note_done: {e}")
        await query.answer(alert_text)

@example_module_router.callback_query(ExampleModuleAction.filter(F.action == "delete_note_confirm"))
async def cq_delete_note_confirm(query: types.CallbackQuery, callback_data: ExampleModuleAction, services_provider: 'BotServicesProvider'):
    user_id = query.from_user.id
    note_id = callback_data.item_id
    if note_id is None: await query.answer("–û—à–∏–±–∫–∞ ID.", show_alert=True); return

    async with services_provider.db.get_session() as session:
        if not await check_permission(user_id, PERM_MANAGE_OWN_NOTES, services_provider, session):
            await query.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True); return
        
        stmt = sql_delete(UserNote).where(UserNote.id == note_id, UserNote.user_telegram_id == user_id)
        result = await session.execute(stmt)
        alert_text = ""
        if result.rowcount > 0:
            try:
                await session.commit()
                alert_text = "–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞."
                logger.info(f"–ó–∞–º–µ—Ç–∫–∞ ID {note_id} —É–¥–∞–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}.")
                notes_stmt = select(UserNote).where(UserNote.user_telegram_id == user_id).order_by(UserNote.created_at.desc())
                notes_res = await session.execute(notes_stmt)
                notes: List[UserNote] = list(notes_res.scalars().all())
                list_text = f"üìù {hbold('–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏')}:" + ("\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫." if not notes else "")
                list_kb = await get_my_notes_keyboard(notes, services_provider, user_id, session)
                if query.message: await query.message.edit_text(list_text, reply_markup=list_kb)
            except Exception as e:
                await session.rollback()
                alert_text = "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è."
                logger.error(f"–û—à–∏–±–∫–∞ commit –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e}")
        else:
            alert_text = "–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞."
        await query.answer(alert_text)

@example_module_router.message(Command("example_admin"))
async def cmd_example_admin(message: types.Message, services_provider: 'BotServicesProvider'):
    user_id = message.from_user.id
    async with services_provider.db.get_session() as session:
        if not await check_permission(user_id, PERM_ADMIN_MANAGE_MODULE, services_provider, session):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
    await message.answer("–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–¥—É–ª—è Example!")