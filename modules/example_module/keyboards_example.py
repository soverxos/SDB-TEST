# modules/example_module/keyboards_example.py

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —è–¥—Ä–∞, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
from core.ui.callback_data_factories import CoreMenuNavigate, ModuleMenuEntry # <--- –î–û–ë–ê–í–õ–ï–ù –ò–ú–ü–û–†–¢ ModuleMenuEntry
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–≤–æ—é —Ñ–∞–±—Ä–∏–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
from .callback_data_factories_example import ExampleModuleAction 
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
from .permissions import (
    PERM_VIEW_MODULE_SETTINGS,
    PERM_VIEW_SECRET_INFO,
    PERM_PERFORM_BASIC_ACTION,
    PERM_PERFORM_ADVANCED_ACTION,
    PERM_MANAGE_OWN_NOTES
)
from .models import UserNote # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫

from typing import TYPE_CHECKING, List
if TYPE_CHECKING:
    from core.services_provider import BotServicesProvider
    from sqlalchemy.ext.asyncio import AsyncSession


async def get_example_module_main_menu_keyboard(
    services: 'BotServicesProvider', 
    user_id: int, 
    session: 'AsyncSession' 
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è"
    if await services.rbac.user_has_permission(session, user_id, PERM_VIEW_MODULE_SETTINGS):
        builder.button(
            text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è (–≥–ª–æ–±.)",
            callback_data=ExampleModuleAction(action="show_module_settings").pack()
        )
    
    # –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
    if await services.rbac.user_has_permission(session, user_id, PERM_VIEW_SECRET_INFO):
        builder.button(
            text="ü§´ –°–µ–∫—Ä–µ—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            callback_data=ExampleModuleAction(action="show_secret_info").pack()
        )

    # –ö–Ω–æ–ø–∫–∞ "–ë–∞–∑–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    if await services.rbac.user_has_permission(session, user_id, PERM_PERFORM_BASIC_ACTION):
        builder.button(
            text="‚ñ∂Ô∏è –ë–∞–∑–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            callback_data=ExampleModuleAction(action="do_basic_action").pack()
        )

    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    if await services.rbac.user_has_permission(session, user_id, PERM_PERFORM_ADVANCED_ACTION):
        builder.button(
            text="üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            callback_data=ExampleModuleAction(action="do_advanced_action").pack()
        )
    
    # –ö–Ω–æ–ø–∫–∞ "–ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏"
    if await services.rbac.user_has_permission(session, user_id, PERM_MANAGE_OWN_NOTES):
        builder.button(
            text="üìù –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏",
            callback_data=ExampleModuleAction(action="my_notes_list").pack()
        )

    if not builder.export(): 
        builder.button(
            text="ü§∑‚Äç‚ôÇÔ∏è –î–ª—è –≤–∞—Å –∑–¥–µ—Å—å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π",
            callback_data="example_module:no_actions" 
        )

    builder.button(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –º–æ–¥—É–ª–µ–π",
        callback_data=CoreMenuNavigate(target_menu="modules_list", page=1).pack() 
    )
    
    builder.adjust(1) 
    return builder.as_markup()

async def get_my_notes_keyboard(
    notes: List[UserNote], 
    services: 'BotServicesProvider', 
    user_id: int, 
    session: 'AsyncSession'
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    if notes:
        for note in notes:
            status_icon = "‚úÖ" if note.is_done else "üìù"
            note_text_short = note.note_text[:30] + "..." if len(note.note_text) > 30 else note.note_text
            builder.button(
                text=f"{status_icon} {note_text_short}",
                callback_data=ExampleModuleAction(action="view_note_details", item_id=note.id).pack()
            )
        builder.adjust(1)
    else:
        builder.button(text="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.", callback_data="example_module:no_notes_dummy")

    builder.row(
        InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É",
            callback_data=ExampleModuleAction(action="add_note_start").pack()
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –í –º–µ–Ω—é –º–æ–¥—É–ª—è",
            # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ModuleMenuEntry, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º
            callback_data=ModuleMenuEntry(module_name="example_module").pack() 
        )
    )
    return builder.as_markup()

async def get_note_details_keyboard(
    note: UserNote,
    services: 'BotServicesProvider', 
    user_id: int, 
    session: 'AsyncSession'
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    toggle_done_text = "üìù –°–Ω—è—Ç—å –æ—Ç–º–µ—Ç–∫—É" if note.is_done else "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Å–¥–µ–ª–∞–Ω–æ"
    builder.button(
        text=toggle_done_text,
        callback_data=ExampleModuleAction(action="toggle_note_done", item_id=note.id).pack()
    )
    builder.button(
        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É",
        callback_data=ExampleModuleAction(action="delete_note_confirm", item_id=note.id).pack()
    )
    builder.adjust(1)
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ö –º–æ–∏–º –∑–∞–º–µ—Ç–∫–∞–º",
            callback_data=ExampleModuleAction(action="my_notes_list").pack()
        )
    )
    return builder.as_markup()