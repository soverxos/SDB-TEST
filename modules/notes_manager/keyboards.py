# modules/notes_manager/keyboards.py

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import TYPE_CHECKING, List

from .callback_data_factories import NotesAction
from .permissions import PERM_CREATE_NOTES, PERM_EDIT_NOTES, PERM_DELETE_NOTES
from core.ui.callback_data_factories import CoreMenuNavigate

if TYPE_CHECKING:
    from core.services_provider import BotServicesProvider
    from sqlalchemy.ext.asyncio import AsyncSession
    from .models import UserNote

async def get_notes_main_menu_keyboard(
    services_provider: 'BotServicesProvider', 
    user_id: int, 
    session: 'AsyncSession'
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –º–æ–¥—É–ª—è –∑–∞–º–µ—Ç–æ–∫"""
    builder = InlineKeyboardBuilder()
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—Ç–æ–∫ (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—é)
    builder.button(
        text="üìã –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏",
        callback_data=NotesAction(action="list").pack()
    )
    
    # –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É
    if await services_provider.rbac.user_has_permission(session, user_id, PERM_CREATE_NOTES):
        builder.button(
            text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É",
            callback_data=NotesAction(action="create").pack()
        )
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—è–º"
    builder.button(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—è–º",
        callback_data=CoreMenuNavigate(target_menu="modules_list").pack()
    )
    
    builder.adjust(1)
    return builder.as_markup()

async def get_notes_list_keyboard(notes: List['UserNote']) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–º–µ—Ç–æ–∫"""
    builder = InlineKeyboardBuilder()
    
    for note in notes:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
        title = note.title if len(note.title) <= 30 else note.title[:27] + "..."
        builder.button(
            text=f"üìù {title}",
            callback_data=NotesAction(action="view", note_id=note.id).pack()
        )
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    builder.button(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data=NotesAction(action="back_to_main").pack()
    )
    
    builder.adjust(1)
    return builder.as_markup()

async def get_note_actions_keyboard(
    note_id: int, 
    services_provider: 'BotServicesProvider', 
    user_id: int, 
    session: 'AsyncSession'
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–º–µ—Ç–∫–æ–π"""
    builder = InlineKeyboardBuilder()
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞)
    if await services_provider.rbac.user_has_permission(session, user_id, PERM_EDIT_NOTES):
        builder.button(
            text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
            callback_data=NotesAction(action="edit", note_id=note_id).pack()
        )
    
    # –£–¥–∞–ª–∏—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞)
    if await services_provider.rbac.user_has_permission(session, user_id, PERM_DELETE_NOTES):
        builder.button(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
            callback_data=NotesAction(action="delete", note_id=note_id).pack()
        )
    
    # –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É
    builder.button(
        text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–º–µ—Ç–æ–∫",
        callback_data=NotesAction(action="back_to_list").pack()
    )
    
    builder.adjust(2, 1)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, 1 –≤–æ –≤—Ç–æ—Ä–æ–º
    return builder.as_markup()
