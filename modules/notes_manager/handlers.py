# modules/notes_manager/handlers.py
from aiogram import Router, types, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.markdown import hbold, hcode, hitalic
from aiogram.exceptions import TelegramBadRequest 
from loguru import logger
from sqlalchemy import select, delete as sql_delete, func 
from datetime import datetime

from .keyboards import (
    get_notes_main_menu_keyboard,
    get_notes_list_keyboard,
    get_note_actions_keyboard
)
from .callback_data_factories import NotesAction
from core.ui.callback_data_factories import ModuleMenuEntry, CoreMenuNavigate 
from .permissions import ( 
    MODULE_NAME, 
    PERM_ACCESS_USER_FEATURES,
    PERM_VIEW_NOTES,
    PERM_CREATE_NOTES,
    PERM_EDIT_NOTES,
    PERM_DELETE_NOTES,
)
from .models import UserNote 

from typing import TYPE_CHECKING, Any, List, Optional
if TYPE_CHECKING:
    from core.services_provider import BotServicesProvider
    from sqlalchemy.ext.asyncio import AsyncSession

notes_router = Router(name="sdb_notes_manager_handlers")

class FSMCreateNote(StatesGroup):
    waiting_for_title = State()
    waiting_for_content = State()

class FSMEditNote(StatesGroup):
    edit_title = State()
    edit_content = State()

async def check_permission(
    user_id: int, 
    permission_name: str, 
    services_provider: 'BotServicesProvider', 
    session: 'AsyncSession'
) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    has_perm = await services_provider.rbac.user_has_permission(session, user_id, permission_name)
    if not has_perm:
        logger.warning(f"[{MODULE_NAME}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, —Ç—Ä–µ–±—É—é—â–µ–µ –ø—Ä–∞–≤–∞ '{permission_name}', –Ω–æ –Ω–µ –∏–º–µ–µ—Ç –µ–≥–æ.")
    return has_perm

# === –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

@notes_router.message(Command("notes"))
async def cmd_notes_entry(message: types.Message, services_provider: 'BotServicesProvider'):
    """–ö–æ–º–∞–Ω–¥–∞ –≤—Ö–æ–¥–∞ –≤ –º–æ–¥—É–ª—å –∑–∞–º–µ—Ç–æ–∫"""
    user_id = message.from_user.id
    logger.info(f"[{MODULE_NAME}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /notes.")
    
    async with services_provider.db.get_session() as session:
        if not await check_permission(user_id, PERM_ACCESS_USER_FEATURES, services_provider, session):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥—É–ª—é –∑–∞–º–µ—Ç–æ–∫.")
            return
    
    text = f"üìù {hbold('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–µ–Ω–µ–¥–∂–µ—Ä –ó–∞–º–µ—Ç–æ–∫!')}\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∑–∞–º–µ—Ç–∫–∞–º–∏."
    
    async with services_provider.db.get_session() as session:
        keyboard = await get_notes_main_menu_keyboard(services_provider, user_id, session)
    
    await message.answer(text, reply_markup=keyboard)

@notes_router.callback_query(ModuleMenuEntry.filter(F.module_name == MODULE_NAME))
async def cq_notes_main_menu(query: types.CallbackQuery, services_provider: 'BotServicesProvider'):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ –º–æ–¥—É–ª—å –∑–∞–º–µ—Ç–æ–∫ —á–µ—Ä–µ–∑ UI"""
    user_id = query.from_user.id
    logger.info(f"[{MODULE_NAME}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ—à–µ–ª –≤ –º–æ–¥—É–ª—å –∑–∞–º–µ—Ç–æ–∫ —á–µ—Ä–µ–∑ UI.")
    
    async with services_provider.db.get_session() as session:
        if not await check_permission(user_id, PERM_ACCESS_USER_FEATURES, services_provider, session):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥—É–ª—é –∑–∞–º–µ—Ç–æ–∫.", show_alert=True)
            return
        
        text = f"üìù {hbold('–ú–µ–Ω–µ–¥–∂–µ—Ä –ó–∞–º–µ—Ç–æ–∫')}\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
        keyboard = await get_notes_main_menu_keyboard(services_provider, user_id, session)
        
        if query.message:
            try:
                await query.message.edit_text(text, reply_markup=keyboard)
            except TelegramBadRequest as e:
                if "message is not modified" not in str(e).lower():
                    logger.warning(f"[{MODULE_NAME}] –û—à–∏–±–∫–∞ edit_text –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é: {e}")
            await query.answer()

# === –î–ï–ô–°–¢–í–ò–Ø –° –ó–ê–ú–ï–¢–ö–ê–ú–ò ===

@notes_router.callback_query(NotesAction.filter(F.action == "list"))
async def cq_notes_list(query: types.CallbackQuery, services_provider: 'BotServicesProvider'):
    """–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = query.from_user.id
    
    async with services_provider.db.get_session() as session:
        if not await check_permission(user_id, PERM_VIEW_NOTES, services_provider, session):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—Ç–æ–∫.", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stmt = select(UserNote).where(UserNote.user_telegram_id == user_id).order_by(UserNote.created_at.desc())
        result = await session.execute(stmt)
        notes = result.scalars().all()
        
        if not notes:
            text = f"üìù {hbold('–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏')}\n\n‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫."
            keyboard = await get_notes_main_menu_keyboard(services_provider, user_id, session)
        else:
            text = f"üìù {hbold('–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏')} ({len(notes)})\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
            keyboard = await get_notes_list_keyboard(notes)
        
        if query.message:
            try:
                await query.message.edit_text(text, reply_markup=keyboard)
            except TelegramBadRequest as e:
                if "message is not modified" not in str(e).lower():
                    logger.warning(f"[{MODULE_NAME}] –û—à–∏–±–∫–∞ edit_text –≤ —Å–ø–∏—Å–∫–µ –∑–∞–º–µ—Ç–æ–∫: {e}")
        await query.answer()

@notes_router.callback_query(NotesAction.filter(F.action == "create"))
async def cq_create_note_start(query: types.CallbackQuery, state: FSMContext, services_provider: 'BotServicesProvider'):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"""
    user_id = query.from_user.id
    
    async with services_provider.db.get_session() as session:
        if not await check_permission(user_id, PERM_CREATE_NOTES, services_provider, session):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫.", show_alert=True)
            return
    
    await state.set_state(FSMCreateNote.waiting_for_title)
    text = f"‚úçÔ∏è {hbold('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏')}\n\nüìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏:"
    
    if query.message:
        try:
            await query.message.edit_text(text)
        except TelegramBadRequest as e:
            logger.warning(f"[{MODULE_NAME}] –û—à–∏–±–∫–∞ edit_text –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e}")
            await query.message.answer(text)
    await query.answer()

@notes_router.message(StateFilter(FSMCreateNote.waiting_for_title))
async def process_note_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∑–∞–º–µ—Ç–∫–∏"""
    title = message.text.strip()
    
    if len(title) > 100:
        await message.answer("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    if len(title) < 1:
        await message.answer("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    await state.update_data(title=title)
    await state.set_state(FSMCreateNote.waiting_for_content)
    
    text = f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {hbold(title)}\n\nüìÑ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:"
    await message.answer(text)

@notes_router.message(StateFilter(FSMCreateNote.waiting_for_content))
async def process_note_content(message: types.Message, state: FSMContext, services_provider: 'BotServicesProvider'):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
    content = message.text.strip()
    user_id = message.from_user.id
    
    if len(content) < 1:
        await message.answer("‚ùå –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    if len(content) > 4000:
        await message.answer("‚ùå –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    title = data.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –ë–î
    async with services_provider.db.get_session() as session:
        new_note = UserNote(
            user_telegram_id=user_id,
            title=title,
            content=content
        )
        session.add(new_note)
        await session.commit()
        await session.refresh(new_note)
        
        logger.info(f"[{MODULE_NAME}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞–ª –∑–∞–º–µ—Ç–∫—É ID {new_note.id}: '{title}'")
    
    await state.clear()
    
    text = f"‚úÖ {hbold('–ó–∞–º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!')}\n\nüìù {hbold(title)}\nüìÑ {content[:200]}{'...' if len(content) > 200 else ''}"
    
    async with services_provider.db.get_session() as session:
        keyboard = await get_notes_main_menu_keyboard(services_provider, user_id, session)
    
    await message.answer(text, reply_markup=keyboard)

@notes_router.callback_query(NotesAction.filter(F.action == "view"))
async def cq_view_note(query: types.CallbackQuery, callback_data: NotesAction, services_provider: 'BotServicesProvider'):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏"""
    user_id = query.from_user.id
    note_id = callback_data.note_id
    
    async with services_provider.db.get_session() as session:
        if not await check_permission(user_id, PERM_VIEW_NOTES, services_provider, session):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—Ç–æ–∫.", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–º–µ—Ç–∫—É
        stmt = select(UserNote).where(
            UserNote.id == note_id,
            UserNote.user_telegram_id == user_id
        )
        result = await session.execute(stmt)
        note = result.scalar_one_or_none()
        
        if not note:
            await query.answer("‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–π –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        created_date = note.created_at.strftime("%d.%m.%Y %H:%M")
        text = f"üìù {hbold(note.title)}\n\nüìÑ {note.content}\n\nüïí –°–æ–∑–¥–∞–Ω–∞: {created_date}"
        
        keyboard = await get_note_actions_keyboard(note_id, services_provider, user_id, session)
        
        if query.message:
            try:
                await query.message.edit_text(text, reply_markup=keyboard)
            except TelegramBadRequest as e:
                if "message is not modified" not in str(e).lower():
                    logger.warning(f"[{MODULE_NAME}] –û—à–∏–±–∫–∞ edit_text –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–º–µ—Ç–∫–∏: {e}")
        await query.answer()

@notes_router.callback_query(NotesAction.filter(F.action == "edit"))
async def cq_edit_note(query: types.CallbackQuery, callback_data: NotesAction, state: FSMContext, services_provider: 'BotServicesProvider'):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"""
    user_id = query.from_user.id
    note_id = callback_data.note_id
    
    async with services_provider.db.get_session() as session:
        if not await check_permission(user_id, PERM_EDIT_NOTES, services_provider, session):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫.", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–º–µ—Ç–∫—É
        stmt = select(UserNote).where(
            UserNote.id == note_id,
            UserNote.user_telegram_id == user_id
        )
        result = await session.execute(stmt)
        note = result.scalar_one_or_none()
        
        if not note:
            await query.answer("‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–π –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.set_state(FSMEditNote.edit_title)
        await state.update_data(note_id=note_id, old_title=note.title, old_content=note.content)
        
        text = f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏\n\n" \
               f"–¢–µ–∫—É—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {hbold(note.title)}\n\n" \
               f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
        
        if query.message:
            try:
                await query.message.edit_text(text)
            except TelegramBadRequest as e:
                if "message is not modified" not in str(e).lower():
                    logger.warning(f"[{MODULE_NAME}] –û—à–∏–±–∫–∞ edit_text –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e}")
        await query.answer()

@notes_router.callback_query(NotesAction.filter(F.action == "delete"))
async def cq_delete_note(query: types.CallbackQuery, callback_data: NotesAction, services_provider: 'BotServicesProvider'):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏"""
    user_id = query.from_user.id
    note_id = callback_data.note_id
    
    async with services_provider.db.get_session() as session:
        if not await check_permission(user_id, PERM_DELETE_NOTES, services_provider, session):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫.", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É
        stmt = select(UserNote).where(
            UserNote.id == note_id,
            UserNote.user_telegram_id == user_id
        )
        result = await session.execute(stmt)
        note = result.scalar_one_or_none()
        
        if not note:
            await query.answer("‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–π –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
            return
        
        note_title = note.title
        await session.delete(note)
        await session.commit()
        
        logger.info(f"[{MODULE_NAME}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª –∑–∞–º–µ—Ç–∫—É ID {note_id}: '{note_title}'")
        
        text = f"‚úÖ {hbold('–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞')}\n\nüóëÔ∏è –ó–∞–º–µ—Ç–∫–∞ \"{note_title}\" –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞."
        keyboard = await get_notes_main_menu_keyboard(services_provider, user_id, session)
        
        if query.message:
            try:
                await query.message.edit_text(text, reply_markup=keyboard)
            except TelegramBadRequest as e:
                if "message is not modified" not in str(e).lower():
                    logger.warning(f"[{MODULE_NAME}] –û—à–∏–±–∫–∞ edit_text –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e}")
        await query.answer("–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞")

# === –ù–ê–í–ò–ì–ê–¶–ò–Ø ===

@notes_router.callback_query(NotesAction.filter(F.action == "back_to_main"))
async def cq_back_to_main(query: types.CallbackQuery, services_provider: 'BotServicesProvider'):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–¥—É–ª—è"""
    await cq_notes_main_menu(query, services_provider)

@notes_router.callback_query(NotesAction.filter(F.action == "back_to_list"))
async def cq_back_to_list(query: types.CallbackQuery, services_provider: 'BotServicesProvider'):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞–º–µ—Ç–æ–∫"""
    await cq_notes_list(query, services_provider)

# === FSM –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ó–ê–ú–ï–¢–û–ö ===

@notes_router.message(Command("cancel"), StateFilter(FSMEditNote))
async def cmd_cancel_edit(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"""
    await state.clear()
    await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@notes_router.message(FSMEditNote.edit_title)
async def fsm_edit_note_title(message: types.Message, state: FSMContext, services_provider: 'BotServicesProvider'):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    user_id = message.from_user.id
    title = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
    if len(title) > 100:
        await message.answer("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    if not title:
        await message.answer("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
    data = await state.get_data()
    await state.update_data(new_title=title)
    await state.set_state(FSMEditNote.edit_content)
    
    old_content = data.get("old_content", "")
    text = f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏\n\n" \
           f"–ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {hbold(title)}\n\n" \
           f"–¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{old_content}\n\n" \
           f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
    
    await message.answer(text)

@notes_router.message(FSMEditNote.edit_content)
async def fsm_edit_note_content(message: types.Message, state: FSMContext, services_provider: 'BotServicesProvider'):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    user_id = message.from_user.id
    content = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
    if len(content) > 4000:
        await message.answer("‚ùå –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    if not content:
        await message.answer("‚ùå –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    note_id = data.get("note_id")
    new_title = data.get("new_title")
    
    if not note_id or not new_title:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –ë–î
    async with services_provider.db.get_session() as session:
        stmt = select(UserNote).where(
            UserNote.id == note_id,
            UserNote.user_telegram_id == user_id
        )
        result = await session.execute(stmt)
        note = result.scalar_one_or_none()
        
        if not note:
            await message.answer("‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–π –¥–æ—Å—Ç—É–ø–∞.")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        note.title = new_title
        note.content = content
        note.updated_at = datetime.utcnow()
        
        await session.commit()
        await session.refresh(note)
        
        logger.info(f"[{MODULE_NAME}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª –∑–∞–º–µ—Ç–∫—É ID {note.id}: '{new_title}'")
    
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É
    created_date = note.created_at.strftime("%d.%m.%Y %H:%M")
    updated_date = note.updated_at.strftime("%d.%m.%Y %H:%M")
    text = f"‚úÖ {hbold('–ó–∞–º–µ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞')}\n\n" \
           f"üìù {hbold(note.title)}\n\n" \
           f"üìÑ {note.content}\n\n" \
           f"üïí –°–æ–∑–¥–∞–Ω–∞: {created_date}\n" \
           f"üìù –ò–∑–º–µ–Ω–µ–Ω–∞: {updated_date}"
    
    async with services_provider.db.get_session() as session:
        keyboard = await get_note_actions_keyboard(note.id, services_provider, user_id, session)
    
    await message.answer(text, reply_markup=keyboard)
