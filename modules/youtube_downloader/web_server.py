# modules/youtube_downloader/web_server.py
"""
–ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä
"""

import os
import asyncio
from pathlib import Path
from aiohttp import web, hdrs
from aiohttp.web_response import StreamResponse
import mimetypes
from loguru import logger
import time
import hashlib


class FileDownloadServer:
    """–ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self, host="0.0.0.0", port=8080, external_host=None, external_port=None, use_https=True):
        self.host = host
        self.port = port
        self.external_host = external_host or "sdb.soverx.top"  # –í–Ω–µ—à–Ω–∏–π –¥–æ–º–µ–Ω
        self.external_port = external_port or (443 if use_https else 80)  # HTTPS/HTTP –ø–æ—Ä—Ç
        self.use_https = use_https
        self.app = None
        self.runner = None
        self.site = None
        self.download_tokens = {}  # token -> {file_path, expires_at, filename}
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä"""
        try:
            self.app = web.Application()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
            self.app.router.add_get('/download/{token}', self.handle_download)
            self.app.router.add_get('/info', self.handle_info)
            self.app.router.add_get('/', self.handle_root)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            self.runner = web.AppRunner(self.app)
            await self.runner.setup()
            
            self.site = web.TCPSite(self.runner, self.host, self.port)
            await self.site.start()
            
            logger.info(f"üì° –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω: http://{self.host}:{self.port}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä"""
        try:
            if self.site:
                await self.site.stop()
            if self.runner:
                await self.runner.cleanup()
            logger.info("üî¥ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    def get_external_url(self, token: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–Ω–µ—à–Ω–∏–π URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        protocol = "https" if self.use_https else "http"
        
        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã (80/443), –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ä—Ç –≤ URL
        if (self.use_https and self.external_port == 443) or (not self.use_https and self.external_port == 80):
            return f"{protocol}://{self.external_host}/download/{token}"
        else:
            return f"{protocol}://{self.external_host}:{self.external_port}/download/{token}"
    
    def generate_download_token(self, file_path: str, filename: str = None, expire_hours: int = 24) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
            token_data = f"{file_path}_{int(time.time())}_{os.urandom(8).hex()}"
            token = hashlib.sha256(token_data.encode()).hexdigest()[:16]
            
            # –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
            expires_at = time.time() + (expire_hours * 3600)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            if not filename:
                filename = os.path.basename(file_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
            self.download_tokens[token] = {
                'file_path': file_path,
                'expires_at': expires_at,
                'filename': filename
            }
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã
            self._cleanup_expired_tokens()
            
            logger.info(f"üîó –°–æ–∑–¥–∞–Ω —Ç–æ–∫–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {filename} (–¥–µ–π—Å—Ç–≤—É–µ—Ç {expire_hours}—á)")
            
            return token
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            return None
    
    def _cleanup_expired_tokens(self):
        """–£–¥–∞–ª—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ —Ç–æ–∫–µ–Ω—ã"""
        current_time = time.time()
        expired_tokens = [
            token for token, data in self.download_tokens.items()
            if data['expires_at'] < current_time
        ]
        
        for token in expired_tokens:
            del self.download_tokens[token]
        
        if expired_tokens:
            logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {len(expired_tokens)} –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤")
    
    async def handle_root(self, request):
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        html = """
        <!DOCTYPE html>
        <html>
        <head>
            <title>SwiftDevBot - –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
                body { font-family: Arial, sans-serif; max-width: 600px; margin: 50px auto; padding: 20px; }
                .header { text-align: center; color: #333; }
                .info { background: #f5f5f5; padding: 15px; border-radius: 8px; margin: 20px 0; }
                .code { background: #000; color: #0f0; padding: 10px; border-radius: 4px; font-family: monospace; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>ü§ñ SwiftDevBot</h1>
                <h2>üì• –°–µ—Ä–≤–µ—Ä —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤</h2>
            </div>
            
            <div class="info">
                <h3>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                <p>–≠—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±–æ–ª—å—à–∏—Ö –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –∏–∑ YouTube —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞.</p>
                <p>–î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –¥–æ—Å—Ç—É–ø–∞.</p>
            </div>
            
            <div class="info">
                <h3>üîó –§–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏</h3>
                <div class="code">http://sdb.soverx.top:8080/download/TOKEN</div>
                <p><small>–¢–æ–∫–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã 24 —á–∞—Å–∞</small></p>
                <p><small>‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ Tailscale —Å–µ—Ç–∏</small></p>
            </div>
        </body>
        </html>
        """
        return web.Response(text=html, content_type='text/html', charset='utf-8')
    
    async def handle_info(self, request):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ"""
        info = {
            'status': 'running',
            'active_tokens': len(self.download_tokens),
            'server': 'SwiftDevBot Download Server',
            'version': '1.0'
        }
        return web.json_response(info)
    
    async def handle_download(self, request):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
        try:
            token = request.match_info['token']
            
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Ç–æ–∫–µ–Ω—ã
            self._cleanup_expired_tokens()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
            if token not in self.download_tokens:
                return web.Response(
                    text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞",
                    status=404,
                    content_type='text/plain', charset='utf-8'
                )
            
            token_data = self.download_tokens[token]
            file_path = token_data['file_path']
            filename = token_data['filename']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(file_path):
                return web.Response(
                    text="‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
                    status=404,
                    content_type='text/plain', charset='utf-8'
                )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_size = os.path.getsize(file_path)
            file_size_mb = file_size / (1024*1024)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø
            mime_type, _ = mimetypes.guess_type(filename)
            if not mime_type:
                mime_type = 'application/octet-stream'
            
            logger.info(f"üì• –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: {filename} ({file_size_mb:.1f} –ú–ë)")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ Range –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            range_header = request.headers.get('Range')
            start = 0
            end = file_size - 1
            
            if range_header:
                # –ü–∞—Ä—Å–∏–º Range: bytes=start-end
                range_match = range_header.replace('bytes=', '').split('-')
                if len(range_match) == 2:
                    if range_match[0]:
                        start = int(range_match[0])
                    if range_match[1]:
                        end = int(range_match[1])
                    
                    logger.info(f"üìä Range –∑–∞–ø—Ä–æ—Å: –±–∞–π—Ç—ã {start}-{end} –∏–∑ {file_size}")
            
            content_length = end - start + 1
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            status = 206 if range_header else 200
            headers = {
                hdrs.CONTENT_TYPE: mime_type,
                hdrs.CONTENT_DISPOSITION: f'attachment; filename="{filename}"',
                hdrs.CONTENT_LENGTH: str(content_length),
                hdrs.ACCEPT_RANGES: 'bytes'
            }
            
            if range_header:
                headers[hdrs.CONTENT_RANGE] = f'bytes {start}-{end}/{file_size}'
            
            response = StreamResponse(status=status, headers=headers)
            
            await response.prepare(request)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ —á–∞—Å—Ç—è–º (—É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤)
            chunk_size = 1024 * 1024  # 1MB chunks –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            bytes_sent = 0
            
            with open(file_path, 'rb') as f:
                f.seek(start)
                bytes_to_read = content_length
                bytes_sent = 0
                
                while bytes_to_read > 0:
                    try:
                        # –ß–∏—Ç–∞–µ–º –ª–∏–±–æ —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞, –ª–∏–±–æ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –±–∞–π—Ç—ã
                        current_chunk_size = min(chunk_size, bytes_to_read)
                        chunk = f.read(current_chunk_size)
                        
                        if not chunk:
                            break
                            
                        await response.write(chunk)
                        bytes_sent += len(chunk)
                        bytes_to_read -= len(chunk)
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (>10MB)
                        if file_size_mb > 10 and bytes_sent % (5 * 1024 * 1024) == 0:
                            progress = (bytes_sent / content_length) * 100
                            logger.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä–µ–¥–∞—á–∏: {progress:.1f}% ({bytes_sent / (1024*1024):.1f} –ú–ë –∏–∑ {content_length / (1024*1024):.1f} –ú–ë)")
                            
                    except ConnectionResetError:
                        logger.warning(f"‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–º –Ω–∞ {bytes_sent / (1024*1024):.1f} –ú–ë –∏–∑ {content_length / (1024*1024):.1f} –ú–ë")
                        return response
                    except Exception as chunk_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞–Ω–∫–∞: {chunk_error}")
                        return response
            
            await response.write_eof()
            
            logger.info(f"‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {filename}")
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
            return web.Response(
                text=f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}",
                status=500,
                content_type='text/plain', charset='utf-8'
            )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞
_download_server = None


async def get_download_server():
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    global _download_server
    if _download_server is None:
        _download_server = FileDownloadServer(
            host="0.0.0.0", 
            port=8080,
            external_host="sdb.soverx.top",
            external_port=8080,    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–æ—Ä—Ç 8080
            use_https=False        # HTTP –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        )
    return _download_server


async def start_download_server_if_needed():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω"""
    try:
        server = await get_download_server()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —Å–µ—Ä–≤–µ—Ä
        if server.runner is None:
            success = await server.start()
            if success:
                logger.info("‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                return server
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä")
                return None
        else:
            logger.info("‚ÑπÔ∏è –í–µ–±-—Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return server
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return None


async def stop_download_server():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    global _download_server
    if _download_server:
        await _download_server.stop()
        _download_server = None
