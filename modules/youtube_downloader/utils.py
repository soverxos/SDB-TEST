# modules/youtube_downloader/utils.py
"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å YouTube
"""

import re
import os
import asyncio
import subprocess
from typing import Optional, Dict, Any, List
from pathlib import Path
import yt_dlp
from loguru import logger

class YouTubeDownloader:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å YouTube —á–µ—Ä–µ–∑ yt-dlp"""
    
    # –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å–∂–∞—Ç–∏—è
    _compression_semaphore = asyncio.Semaphore(1)  # –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–∂–∞—Ç–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    
    def __init__(self, download_dir: str = "project_data/downloads/youtube_downloader", user_id: Optional[int] = None):
        self.base_download_dir = Path(download_dir)
        self.user_id = user_id
        
        # –û–±—â–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ —Ç–∏–ø–∞–º
        self.shared_video_cache_dir = self.base_download_dir / "shared_cache" / "video"
        self.shared_audio_cache_dir = self.base_download_dir / "shared_cache" / "audio"
        self.shared_video_cache_dir.mkdir(parents=True, exist_ok=True)
        self.shared_audio_cache_dir.mkdir(parents=True, exist_ok=True)
        
        if user_id:
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.video_download_dir = self.base_download_dir / f"user_{user_id}" / "video"
            self.audio_download_dir = self.base_download_dir / f"user_{user_id}" / "audio"
        else:
            # –û–±—â–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.video_download_dir = self.base_download_dir / "general" / "video"
            self.audio_download_dir = self.base_download_dir / "general" / "audio"
            
        self.video_download_dir.mkdir(parents=True, exist_ok=True)
        self.audio_download_dir.mkdir(parents=True, exist_ok=True)
    
    def _create_user_symlink(self, shared_file_path: Path, video_id: str, file_type: str = "video") -> Path:
        """–°–æ–∑–¥–∞–µ—Ç —Å–∏–º–ª–∏–Ω–∫ –≤ –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ñ–∞–π–ª –≤ –æ–±—â–µ–º –∫—ç—à–µ"""
        try:
            # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–∞–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
            if file_type == "video":
                user_file_path = self.video_download_dir / shared_file_path.name
            else:  # audio
                user_file_path = self.audio_download_dir / shared_file_path.name
            
            # –ï—Å–ª–∏ —Å–∏–º–ª–∏–Ω–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if user_file_path.exists() or user_file_path.is_symlink():
                user_file_path.unlink()
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏–º–ª–∏–Ω–∫
            user_file_path.symlink_to(shared_file_path.resolve())
            logger.info(f"üìé –°–æ–∑–¥–∞–Ω —Å–∏–º–ª–∏–Ω–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user_id}: {user_file_path.name} -> {shared_file_path}")
            
            return user_file_path
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–º–ª–∏–Ω–∫–∞: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
            import shutil
            if file_type == "video":
                user_file_path = self.video_download_dir / shared_file_path.name
            else:  # audio
                user_file_path = self.audio_download_dir / shared_file_path.name
            shutil.copy2(shared_file_path, user_file_path)
            logger.info(f"üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user_id}: {user_file_path.name}")
            return user_file_path
    
    def _check_shared_cache(self, video_id: str, quality: str, file_type: str = "video") -> Optional[Path]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –≤ –æ–±—â–µ–º –∫—ç—à–µ —Å —É—á–µ—Ç–æ–º –∫–∞—á–µ—Å—Ç–≤–∞"""
        try:
            # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–∞–ø–∫—É –∫—ç—à–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
            if file_type == "video":
                cache_dir = self.shared_video_cache_dir
                extensions = ['mp4', 'mkv', 'webm']
            else:  # audio
                cache_dir = self.shared_audio_cache_dir
                extensions = ['mp3', 'm4a', 'ogg']
            
            # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å —ç—Ç–∏–º video_id - —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å —É—á–µ—Ç–æ–º –∫–∞—á–µ—Å—Ç–≤–∞
            for ext in extensions:
                # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                if quality != "best" and quality != "worst":
                    quality_patterns = [
                        f"*[{video_id}]*{quality}*.{ext}",  # –∫–∞—á–µ—Å—Ç–≤–æ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ
                        f"*{quality}*[{video_id}].{ext}",   # –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–¥ ID
                    ]
                    
                    for pattern in quality_patterns:
                        cached_files = list(cache_dir.glob(pattern))
                        if cached_files:
                            logger.info(f"üíæ –ù–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ —Å –Ω—É–∂–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º {quality}: {cached_files[0].name}")
                            return cached_files[0]
                
                # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ª—é–±—ã–µ —Ñ–∞–π–ª—ã —Å —ç—Ç–∏–º ID
                general_patterns = [
                    f"*[{video_id}].{ext}",     # –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω
                    f"*[{video_id}]*.{ext}",   # —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
                    f"*{video_id}*.{ext}"      # ID –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ
                ]
                
                for pattern in general_patterns:
                    cached_files = list(cache_dir.glob(pattern))
                    if cached_files:
                        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –∞ –≤ –∫—ç—à–µ –¥—Ä—É–≥–æ–µ - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à
                        cached_file = cached_files[0]
                        if quality not in ["best", "worst"] and quality not in cached_file.name.lower():
                            logger.info(f"üíæ –í –∫—ç—à–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª {cached_file.name}, –Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–º {quality}")
                            continue
                        
                        logger.info(f"üíæ –ù–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ: {cached_file.name}")
                        return cached_file
                        
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞: {e}")
            return None
    
    def _find_files_in_cache(self, title: str, video_id: str, extensions: List[str], file_type: str = "video") -> List[Path]:
        """–ò—â–µ—Ç —Ñ–∞–π–ª—ã –≤ –æ–±—â–µ–º –∫—ç—à–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ ID –≤–∏–¥–µ–æ"""
        files = []
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–∞–ø–∫—É –∫—ç—à–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        if file_type == "video":
            cache_dir = self.shared_video_cache_dir
        else:  # audio
            cache_dir = self.shared_audio_cache_dir
        
        logger.info(f"üîç –ò—â–µ–º —Ñ–∞–π–ª—ã –≤ –∫—ç—à–µ: video_id={video_id}, type={file_type}")
        
        if not cache_dir.exists():
            logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ –∫—ç—à–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {cache_dir}")
            return files
        
        # –ò—â–µ–º –ø–æ ID –≤–∏–¥–µ–æ (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ) - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
        if video_id:
            for ext in extensions:
                # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å ID –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö
                pattern = f"*[{video_id}].{ext}"
                found_files = list(cache_dir.glob(pattern))
                files.extend(found_files)
                
                # –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –∏—Å–∫–∞—Ç—å –±–µ–∑ —Ç–æ—á–∫–∏ –ø–µ—Ä–µ–¥ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º (–¥–ª—è —Å–ª—É—á–∞–µ–≤ —Å–ª–∏—è–Ω–∏—è)
                pattern_alt = f"*[{video_id}]{ext}"
                found_files_alt = list(cache_dir.glob(pattern_alt))
                files.extend(found_files_alt)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞
                pattern_wide = f"*{video_id}*.{ext}"
                found_files_wide = list(cache_dir.glob(pattern_wide))
                files.extend(found_files_wide)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ ID, –∏—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        if not files and title:
            clean_title = self._clean_filename(title)
            logger.info(f"üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: {clean_title}")
            for ext in extensions:
                pattern = f"*{clean_title}*.{ext}"
                found_files = list(cache_dir.glob(pattern))
                files.extend(found_files)
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        files = list(set(files))
        files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
        
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ –∫—ç—à–µ: {len(files)}")
        
        return files
    
    def _clean_filename(self, title: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        import string
        import unicodedata
        
        # –£–±–∏—Ä–∞–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º Unicode
        title = unicodedata.normalize('NFKD', title)
        
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        invalid_chars = '<>:"/\\|?*'
        for char in invalid_chars:
            title = title.replace(char, '_')
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ
        title = title.strip(' .')
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É (–æ—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è ID –≤–∏–¥–µ–æ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
        if len(title) > 100:
            title = title[:100]
        
        return title
    
    def clean_cache_for_video(self, video_id: str, file_type: str = "video") -> bool:
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ –∏–∑ –∫—ç—à–∞"""
        try:
            # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–∞–ø–∫—É –∫—ç—à–∞
            if file_type == "video":
                cache_dir = self.shared_video_cache_dir
                extensions = ['mp4', 'mkv', 'webm']
            else:  # audio
                cache_dir = self.shared_audio_cache_dir
                extensions = ['mp3', 'm4a', 'ogg']
            
            files_deleted = 0
            
            # –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å —ç—Ç–∏–º video_id
            for ext in extensions:
                patterns = [
                    f"*[{video_id}].{ext}",     # –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω
                    f"*[{video_id}]*.{ext}",   # —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
                    f"*{video_id}*.{ext}"      # ID –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ
                ]
                
                for pattern in patterns:
                    cached_files = list(cache_dir.glob(pattern))
                    for file_path in cached_files:
                        try:
                            file_path.unlink()
                            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –∏–∑ –∫—ç—à–∞: {file_path.name}")
                            files_deleted += 1
                        except Exception as e:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏–∑ –∫—ç—à–∞ {file_path}: {e}")
            
            logger.info(f"üßπ –û—á–∏—â–µ–Ω –∫—ç—à –¥–ª—è video_id {video_id}: —É–¥–∞–ª–µ–Ω–æ {files_deleted} —Ñ–∞–π–ª–æ–≤")
            return files_deleted > 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ –¥–ª—è {video_id}: {e}")
            return False
    
    def clean_low_quality_cache(self) -> int:
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã –∏–∑ –∫—ç—à–∞"""
        try:
            files_deleted = 0
            cache_dir = self.shared_video_cache_dir
            
            if not cache_dir.exists():
                return 0
            
            for file_path in cache_dir.glob("*.mp4"):
                try:
                    file_size_mb = file_path.stat().st_size / (1024*1024)
                    
                    # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –≤–∏–¥–µ–æ (–º–µ–Ω—å—à–µ 1 –ú–ë –Ω–∞ –º–∏–Ω—É—Ç—É)
                    if file_size_mb < 10:  # –î–ª—è –≤–∏–¥–µ–æ –º–µ–Ω—å—à–µ 10 –ú–ë
                        logger.info(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª: {file_path.name} ({file_size_mb:.1f} –ú–ë)")
                        file_path.unlink()
                        files_deleted += 1
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            
            logger.info(f"üßπ –û—á–∏—â–µ–Ω –∫—ç—à –æ—Ç –Ω–∏–∑–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: —É–¥–∞–ª–µ–Ω–æ {files_deleted} —Ñ–∞–π–ª–æ–≤")
            return files_deleted
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –Ω–∏–∑–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∞: {e}")
            return 0
    
    @staticmethod
    def extract_video_id(url: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –≤–∏–¥–µ–æ –∏–∑ YouTube URL"""
        patterns = [
            r'(?:v=|\/)([0-9A-Za-z_-]{11}).*',
            r'youtu\.be\/([0-9A-Za-z_-]{11})',
            r'youtube\.com\/embed\/([0-9A-Za-z_-]{11})',
            r'youtube\.com\/watch\?v=([0-9A-Za-z_-]{11})'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, url)
            if match:
                return match.group(1)
        return None
    
    @staticmethod
    def validate_youtube_url(url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –≤–∞–ª–∏–¥–Ω—ã–º YouTube URL"""
        youtube_domains = [
            'youtube.com', 'www.youtube.com', 'm.youtube.com',
            'youtu.be', 'www.youtu.be'
        ]
        
        try:
            from urllib.parse import urlparse
            parsed = urlparse(url)
            return parsed.netloc.lower() in youtube_domains
        except:
            return False
    
    async def get_video_info(self, url: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏"""
        try:
            def _extract_info():
                with yt_dlp.YoutubeDL({'quiet': True}) as ydl:
                    return ydl.extract_info(url, download=False)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ executor —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
            loop = asyncio.get_event_loop()
            info = await loop.run_in_executor(None, _extract_info)
            
            if info:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                upload_date = info.get('upload_date')
                formatted_date = None
                if upload_date:
                    try:
                        from datetime import datetime
                        date_obj = datetime.strptime(upload_date, '%Y%m%d')
                        formatted_date = date_obj.strftime('%d.%m.%Y')
                    except:
                        formatted_date = upload_date
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                categories = info.get('categories', [])
                category = categories[0] if categories else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏
                tags = info.get('tags', [])
                limited_tags = tags[:5] if tags else []  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Ç–µ–≥–æ–≤
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                channel_url = info.get('channel_url', '')
                channel_subscriber_count = info.get('channel_follower_count', 0)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
                like_count = info.get('like_count', 0)
                dislike_count = info.get('dislike_count', 0)
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ)
                description = info.get('description', '')
                if description and len(description) > 200:
                    description = description[:200] + '...'
                
                return {
                    'id': info.get('id'),
                    'title': info.get('title'),
                    'duration': info.get('duration'),
                    'thumbnail': info.get('thumbnail'),
                    'uploader': info.get('uploader'),
                    'view_count': info.get('view_count'),
                    'upload_date': formatted_date,
                    'category': category,
                    'tags': limited_tags,
                    'channel_url': channel_url,
                    'channel_subscriber_count': channel_subscriber_count,
                    'like_count': like_count,
                    'dislike_count': dislike_count,
                    'description': description,
                    'formats': self._extract_formats(info.get('formats', []))
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ {url}: {e}")
        
        return None
    
    def _extract_formats(self, formats: List[Dict]) -> Dict[str, List[Dict]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ"""
        video_formats = []
        audio_formats = []
        
        for fmt in formats:
            if fmt.get('vcodec') != 'none' and fmt.get('acodec') != 'none':
                # –í–∏–¥–µ–æ —Å –∞—É–¥–∏–æ
                video_formats.append({
                    'format_id': fmt.get('format_id'),
                    'ext': fmt.get('ext'),
                    'quality': fmt.get('height', 'unknown'),
                    'filesize': fmt.get('filesize'),
                    'format_note': fmt.get('format_note', '')
                })
            elif fmt.get('acodec') != 'none' and fmt.get('vcodec') == 'none':
                # –¢–æ–ª—å–∫–æ –∞—É–¥–∏–æ
                audio_formats.append({
                    'format_id': fmt.get('format_id'),
                    'ext': fmt.get('ext'),
                    'quality': fmt.get('abr', 'unknown'),
                    'filesize': fmt.get('filesize'),
                    'format_note': fmt.get('format_note', '')
                })
        
        return {
            'video': video_formats[:10],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            'audio': audio_formats[:5]
        }
    
    async def download_video(self, url: str, quality: str = "best", 
                           progress_callback: Optional[callable] = None, force_download: bool = False) -> Dict[str, Any]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ —Å YouTube —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–±—â–µ–≥–æ –∫—ç—à–∞"""
        try:
            video_id = self.extract_video_id(url)
            if not video_id:
                return {"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π URL YouTube"}
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
            def _get_info():
                with yt_dlp.YoutubeDL({'quiet': True}) as ydl:
                    return ydl.extract_info(url, download=False)
            
            loop = asyncio.get_event_loop()
            info = await loop.run_in_executor(None, _get_info)
            
            title = info.get('title', 'Unknown Title')
            duration = info.get('duration', 0)
            uploader = info.get('uploader', 'Unknown')
            view_count = info.get('view_count', 0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)
            if not force_download:
                cached_file = self._check_shared_cache(video_id, quality, "video")
                if cached_file and cached_file.exists():
                    file_size_mb = cached_file.stat().st_size / (1024*1024)
                    logger.info(f"üíæ –ù–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ: {cached_file.name} ({file_size_mb:.1f} –ú–ë)")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –º–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                    if duration > 0:
                        expected_min_size = duration * 0.3  # –ú–∏–Ω–∏–º—É–º ~2.4 –ú–±–∏—Ç/—Å –¥–ª—è 720p
                        if quality == '720p' and file_size_mb < expected_min_size:
                            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –≤ –∫—ç—à–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–π –¥–ª—è {quality}: {file_size_mb:.1f} –ú–ë")
                            logger.info(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞...")
                            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∏–∑ –∫—ç—à–∞
                            self.clean_cache_for_video(video_id, "video")
                        else:
                            # –°–æ–∑–¥–∞–µ–º —Å–∏–º–ª–∏–Ω–∫ –≤ –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            user_file = self._create_user_symlink(cached_file, video_id, "video")
                            
                            return {
                                'success': True,
                                'file_path': str(user_file),
                                'file_size': cached_file.stat().st_size,
                                'title': title,
                                'duration': duration,
                                'uploader': uploader,
                                'view_count': view_count,
                                'quality': quality,
                                'from_cache': True
                            }
            
            # –ï—Å–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω/–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –≤ –∫—ç—à–µ - –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
            # –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ –æ–±—â–∏–π –∫—ç—à
            format_selector = self._get_format_selector(quality, 'video')
            logger.info(f"üì± –°–µ–ª–µ–∫—Ç–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è {quality}: {format_selector}")
            
            ydl_opts = {
                'format': format_selector,
                'outtmpl': str(self.shared_video_cache_dir / f"%(title)s [{quality}] [%(id)s].%(ext)s"),
                'quiet': False,
                'no_warnings': False,
                'user_agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'merge_output_format': 'mp4',
                # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
                'writesubtitles': False,
                'writeautomaticsub': False,
                'prefer_free_formats': False,  # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
                'extract_flat': False,
                'force_generic_extractor': False,
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è FFmpeg - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                'postprocessor_args': {
                    'ffmpeg': ['-c', 'copy']  # –ü—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫–∏ –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                },
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏–π
                'socket_timeout': 30,
                'fragment_retries': 3,
                'retries': 3
            }
            
            if progress_callback:
                ydl_opts['progress_hooks'] = [progress_callback]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            logger.info(f"üéØ –°–µ–ª–µ–∫—Ç–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è {quality}: {format_selector}")
            
            def _download():
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–∞—Ç–∞—Ö –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
                    try:
                        info = ydl.extract_info(url, download=False)
                        formats = info.get('formats', [])
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        video_formats = [f for f in formats if f.get('vcodec') != 'none' and f.get('height')]
                        if video_formats:
                            logger.info(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã: {len(video_formats)} —à—Ç.")
                            for fmt in video_formats[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                                logger.info(f"   - ID: {fmt.get('format_id')}, "
                                          f"{fmt.get('height')}p, "
                                          f"TBR: {fmt.get('tbr', 'unknown')} kbps, "
                                          f"EXT: {fmt.get('ext')}")
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–∞—Ç–∞—Ö: {e}")
                    
                    return ydl.download([url])
            
            # –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–º–∞–∫—Å–∏–º—É–º 10 –º–∏–Ω—É—Ç)
            try:
                await asyncio.wait_for(
                    loop.run_in_executor(None, _download), 
                    timeout=600  # 10 –º–∏–Ω—É—Ç
                )
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ Timeout –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ {url} (–±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç)")
                return {"success": False, "error": "–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (10 –º–∏–Ω—É—Ç)"}
            
            # –ü–æ–∏—Å–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –∫—ç—à–µ
            cached_files = self._find_files_in_cache(title, video_id, ['mp4', 'mkv', 'webm'], "video")
            
            if not cached_files:
                return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –∫—ç—à–µ"}
            
            cached_file = cached_files[0]
            file_size_mb = cached_file.stat().st_size / (1024*1024)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∫–∞—á–µ—Å—Ç–≤–∞
            logger.info(f"üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à: {cached_file.name}")
            logger.info(f"üì¶ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.1f} –ú–ë")
            logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞: {duration} —Å–µ–∫ ‚Üí {file_size_mb:.1f} –ú–ë = {file_size_mb*8/duration:.1f} –ú–±–∏—Ç/—Å –±–∏—Ç—Ä–µ–π—Ç" if duration > 0 else f"üìä –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} –ú–ë")
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–µ–Ω—å–∫–æ–º —Ä–∞–∑–º–µ—Ä–µ
            if duration > 0:
                expected_min_size = duration * 0.3  # –ú–∏–Ω–∏–º—É–º ~2.4 –ú–±–∏—Ç/—Å –¥–ª—è 720p
                if quality == '720p' and file_size_mb < expected_min_size:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è {quality}: {file_size_mb:.1f} –ú–ë (–æ–∂–∏–¥–∞–ª–æ—Å—å >{expected_min_size:.1f} –ú–ë)")
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏–º–ª–∏–Ω–∫ –≤ –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_file = self._create_user_symlink(cached_file, video_id, "video")
            
            return {
                "success": True,
                "file_path": str(user_file),
                "file_size": cached_file.stat().st_size,
                'title': title,
                'duration': duration,
                'uploader': uploader,
                'view_count': view_count,
                'quality': quality,
                'from_cache': False
            }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ {url}: {e}")
            return {"success": False, "error": str(e)}
    
    async def download_audio(self, url: str, quality: str = "best",
                           progress_callback: Optional[callable] = None, force_download: bool = False) -> Dict[str, Any]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ —Å YouTube —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–±—â–µ–≥–æ –∫—ç—à–∞"""
        try:
            video_id = self.extract_video_id(url)
            if not video_id:
                return {"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π URL YouTube"}
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
            def _get_info():
                with yt_dlp.YoutubeDL({'quiet': True}) as ydl:
                    return ydl.extract_info(url, download=False)
            
            loop = asyncio.get_event_loop()
            info = await loop.run_in_executor(None, _get_info)
            
            title = info.get('title', 'Unknown Title')
            duration = info.get('duration', 0)
            uploader = info.get('uploader', 'Unknown')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cached_file = self._check_shared_cache(video_id, quality, "audio")
            if cached_file and cached_file.exists():
                logger.info(f"üéµ –ù–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ –≤ –∫—ç—à–µ: {cached_file.name}")
                # –°–æ–∑–¥–∞–µ–º —Å–∏–º–ª–∏–Ω–∫ –≤ –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_file = self._create_user_symlink(cached_file, video_id, "audio")
                
                return {
                    'success': True,
                    'file_path': str(user_file),
                    'file_size': cached_file.stat().st_size,
                    'title': title,
                    'duration': duration,
                    'uploader': uploader,
                    'quality': quality,
                    'from_cache': True
                }
            
            # –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ –æ–±—â–∏–π –∫—ç—à
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ
            audio_quality = '320' if quality in ['best', '720p', '1080p'] else '192'
            if quality.isdigit():
                audio_quality = quality
            
            ydl_opts = {
                'format': 'bestaudio[ext=m4a]/bestaudio[ext=webm]/bestaudio/best',  # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
                'outtmpl': str(self.shared_audio_cache_dir / f"%(title)s [{quality}] [%(id)s].%(ext)s"),
                'quiet': True,
                'no_warnings': True,
                'prefer_free_formats': False,  # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
                'postprocessors': [{
                    'key': 'FFmpegExtractAudio',
                    'preferredcodec': 'mp3',
                    'preferredquality': audio_quality,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                }],
            }
            
            if progress_callback:
                ydl_opts['progress_hooks'] = [progress_callback]
            
            def _download():
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    return ydl.download([url])
            
            await loop.run_in_executor(None, _download)
            
            # –ü–æ–∏—Å–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –∫—ç—à–µ
            cached_files = self._find_files_in_cache(title, video_id, ['mp3', 'm4a', 'ogg'], "audio")
            
            if not cached_files:
                return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª –≤ –∫—ç—à–µ"}
            
            cached_file = cached_files[0]
            logger.info(f"üéµ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∞—É–¥–∏–æ –≤ –∫—ç—à: {cached_file.name}")
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏–º–ª–∏–Ω–∫ –≤ –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_file = self._create_user_symlink(cached_file, video_id, "audio")
            
            return {
                "success": True,
                "file_path": str(user_file),
                "file_size": cached_file.stat().st_size,
                'title': title,
                'duration': duration,
                'uploader': uploader,
                'quality': quality,
                'from_cache': False
            }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ {url}: {e}")
            return {"success": False, "error": str(e)}
    
    def _get_format_selector(self, quality: str, download_type: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è yt-dlp"""
        if download_type == 'video':
            if quality == 'best':
                return 'best[acodec!=none][vcodec!=none]/18'  # –¢–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å –∞—É–¥–∏–æ+–≤–∏–¥–µ–æ
            elif quality == 'worst':
                return 'worst[acodec!=none][vcodec!=none]/18'  # –¢–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å –∞—É–¥–∏–æ+–≤–∏–¥–µ–æ
            elif quality.endswith('p'):
                height = quality[:-1]
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≥–æ—Ç–æ–≤—ã–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∞–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏–π –ø—Ä–∏ —Å–ª–∏—è–Ω–∏–∏
                if height == '720':
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–∞–∑–¥–µ–ª—å–Ω—ã–º –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∞–º
                    return (f'232+251/'                                              # –õ—É—á—à–∏–π H.264 720p + Opus –∞—É–¥–∏–æ (–ø–æ –∞–Ω–∞–ª–∏–∑—É)
                           f'232+140/'                                              # –õ—É—á—à–∏–π H.264 720p + AAC –∞—É–¥–∏–æ  
                           f'136+251/'                                              # H.264 720p (–∑–∞–ø–∞—Å–Ω–æ–π) + Opus –∞—É–¥–∏–æ
                           f'136+140/'                                              # H.264 720p (–∑–∞–ø–∞—Å–Ω–æ–π) + AAC –∞—É–¥–∏–æ
                           f'bestvideo[height=720][vbr>=2500]+bestaudio[abr>=128]/' # –í—ã—Å–æ–∫–∏–π –±–∏—Ç—Ä–µ–π—Ç –≤–∏–¥–µ–æ + –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ
                           f'bestvideo[height=720]+bestaudio[ext=m4a]/'             # –õ—é–±–æ–π 720p –≤–∏–¥–µ–æ + m4a –∞—É–¥–∏–æ
                           f'best[height=720]')                                     # –ì–æ—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (last resort)
                elif height == '1080':
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–∞–∑–¥–µ–ª—å–Ω—ã–º –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∞–º –¥–ª—è 1080p
                    return (f'270+251/'                                              # –õ—É—á—à–∏–π H.264 1080p + Opus –∞—É–¥–∏–æ
                           f'270+140/'                                              # –õ—É—á—à–∏–π H.264 1080p + AAC –∞—É–¥–∏–æ
                           f'137+251/'                                              # H.264 1080p (–∑–∞–ø–∞—Å–Ω–æ–π) + Opus –∞—É–¥–∏–æ
                           f'137+140/'                                              # H.264 1080p (–∑–∞–ø–∞—Å–Ω–æ–π) + AAC –∞—É–¥–∏–æ
                           f'bestvideo[height=1080][vbr>=3500]+bestaudio[abr>=128]/'# –í—ã—Å–æ–∫–∏–π –±–∏—Ç—Ä–µ–π—Ç –≤–∏–¥–µ–æ + –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ
                           f'bestvideo[height=1080]+bestaudio[ext=m4a]/'            # –õ—é–±–æ–π 1080p –≤–∏–¥–µ–æ + m4a –∞—É–¥–∏–æ
                           f'best[height=1080]')                                    # –ì–æ—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (last resort)
                elif height == '480':
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–∞–∑–¥–µ–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∞–º –¥–ª—è 480p  
                    return (f'231+251/'                                              # –õ—É—á—à–∏–π H.264 480p + Opus –∞—É–¥–∏–æ
                           f'231+140/'                                              # –õ—É—á—à–∏–π H.264 480p + AAC –∞—É–¥–∏–æ
                           f'135+251/'                                              # H.264 480p (–∑–∞–ø–∞—Å–Ω–æ–π) + Opus –∞—É–¥–∏–æ
                           f'135+140/'                                              # H.264 480p (–∑–∞–ø–∞—Å–Ω–æ–π) + AAC –∞—É–¥–∏–æ
                           f'bestvideo[height=480][vbr>=1200]+bestaudio[abr>=128]/' # –í—ã—Å–æ–∫–∏–π –±–∏—Ç—Ä–µ–π—Ç –≤–∏–¥–µ–æ + –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ
                           f'bestvideo[height=480]+bestaudio[ext=m4a]/'             # –õ—é–±–æ–π 480p –≤–∏–¥–µ–æ + m4a –∞—É–¥–∏–æ
                           f'best[height=480]')                                     # –ì–æ—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (last resort)
                elif height == '360':
                    return (f'best[height=360][tbr>=800]/'                           # –ì–æ—Ç–æ–≤—ã–π 360p —Å –≤—ã—Å–æ–∫–∏–º –±–∏—Ç—Ä–µ–π—Ç–æ–º
                           f'best[height=360]/'                                     # –õ—é–±–æ–π –≥–æ—Ç–æ–≤—ã–π 360p
                           f'bestvideo[height=360]+bestaudio[ext=m4a]')              # 360p + –∞—É–¥–∏–æ (fallback)
                else:
                    # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
                    return (f'bestvideo[height={height}]+bestaudio[ext=m4a]/'
                           f'best[height={height}]')
            else:
                return 'best[acodec!=none][vcodec!=none]/18'  # –¢–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å –∞—É–¥–∏–æ+–≤–∏–¥–µ–æ
        else:  # audio
            return 'bestaudio[ext=m4a]/bestaudio/best'

    async def compress_video_for_telegram(self, input_path: str, max_size_mb: int = 45) -> Dict[str, Any]:
        """–°–∂–∏–º–∞–µ—Ç –≤–∏–¥–µ–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram —Å —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ max_size_mb –ú–ë"""
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–∂–∞—Ç–∏—è
        async with self._compression_semaphore:
            try:
                input_file = Path(input_path)
                if not input_file.exists():
                    return {"success": False, "error": "–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                
                # –°–æ–∑–¥–∞–µ–º –∏–º—è –¥–ª—è —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
                compressed_name = f"{input_file.stem}_tg_compressed{input_file.suffix}"
                compressed_path = input_file.parent / compressed_name
                
                # –ï—Å–ª–∏ —Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                if compressed_path.exists():
                    compressed_size_mb = compressed_path.stat().st_size / (1024*1024)
                    if compressed_size_mb <= max_size_mb + 5:  # –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –≥–æ—Ç–æ–≤—ã–π —Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª: {compressed_path.name} ({compressed_size_mb:.1f} –ú–ë)")
                        return {
                            "success": True,
                            "file_path": str(compressed_path),
                            "file_size": compressed_path.stat().st_size,
                            "original_size": input_file.stat().st_size,
                            "compression_ratio": (1 - compressed_size_mb / (input_file.stat().st_size / (1024*1024))) * 100
                        }
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                file_size_mb = input_file.stat().st_size / (1024*1024)
                
                logger.info(f"üîß –ù–∞—á–∏–Ω–∞–µ–º —Å–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ: {input_file.name}")
                logger.info(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {file_size_mb:.1f} –ú–ë ‚Üí –¶–µ–ª–µ–≤–æ–π: {max_size_mb} –ú–ë")
                logger.info(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 10-15 –º–∏–Ω—É—Ç...")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
                def get_video_info():
                    cmd = [
                        'ffprobe', '-v', 'quiet', '-print_format', 'json', '-show_format', str(input_file)
                    ]
                    result = subprocess.run(cmd, capture_output=True, text=True)
                    if result.returncode == 0:
                        import json
                        info = json.loads(result.stdout)
                        duration = float(info.get('format', {}).get('duration', 0))
                        return duration
                    return 600  # fallback 10 –º–∏–Ω—É—Ç
                
                duration = await asyncio.get_event_loop().run_in_executor(None, get_video_info)
                
                if duration <= 0:
                    duration = 600  # fallback
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
                target_size_bits = max_size_mb * 1024 * 1024 * 8
                audio_bitrate_kbps = 96  # —É–º–µ–Ω—å—à–∞–µ–º –∞—É–¥–∏–æ –±–∏—Ç—Ä–µ–π—Ç
                video_bitrate_kbps = int((target_size_bits / duration) / 1000) - audio_bitrate_kbps
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –±–∏—Ç—Ä–µ–π—Ç —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
                video_bitrate_kbps = max(150, min(video_bitrate_kbps, 1500))
                
                logger.info(f"üéØ –†–∞—Å—á–µ—Ç–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç –≤–∏–¥–µ–æ: {video_bitrate_kbps} kbps (–∞—É–¥–∏–æ: {audio_bitrate_kbps} kbps)")
                
                # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ FFmpeg –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∂–∞—Ç–∏—è
                cmd = [
                    'ffmpeg', '-i', str(input_file),
                    '-c:v', 'libx264',                   # –í–∏–¥–µ–æ –∫–æ–¥–µ–∫
                    '-preset', 'ultrafast',              # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ–µ —Å–∂–∞—Ç–∏–µ
                    '-crf', '32',                        # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
                    '-b:v', f'{video_bitrate_kbps}k',    # –ë–∏—Ç—Ä–µ–π—Ç –≤–∏–¥–µ–æ
                    '-maxrate', f'{video_bitrate_kbps}k', # –°—Ç—Ä–æ–≥–∏–π –ª–∏–º–∏—Ç –±–∏—Ç—Ä–µ–π—Ç–∞
                    '-bufsize', f'{video_bitrate_kbps//2}k', # –ú–µ–Ω—å—à–∏–π –±—É—Ñ–µ—Ä
                    '-c:a', 'aac',                       # –ê—É–¥–∏–æ –∫–æ–¥–µ–∫
                    '-b:a', f'{audio_bitrate_kbps}k',    # –ë–∏—Ç—Ä–µ–π—Ç –∞—É–¥–∏–æ
                    '-ac', '2',                          # –°—Ç–µ—Ä–µ–æ –∞—É–¥–∏–æ
                    '-ar', '44100',                      # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
                    '-movflags', '+faststart',           # –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
                    '-threads', '4',                     # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
                    '-y',                                # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª
                    str(compressed_path)
                ]
                
                def run_compression():
                    return subprocess.run(cmd, capture_output=True, text=True)
                
                logger.info(f"‚öôÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∂–∞—Ç–∏–µ (–º–∞–∫—Å. 10 –º–∏–Ω—É—Ç)...")
                result = await asyncio.wait_for(
                    asyncio.get_event_loop().run_in_executor(None, run_compression),
                    timeout=600  # 10 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º (—É–º–µ–Ω—å—à–∏–ª–∏ —Å 15)
                )
                
                if result.returncode != 0:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è: {result.stderr}")
                    return {"success": False, "error": f"–û—à–∏–±–∫–∞ FFmpeg: {result.stderr[:200]}..."}
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if not compressed_path.exists():
                    return {"success": False, "error": "–°–∂–∞—Ç—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω"}
                
                compressed_size_mb = compressed_path.stat().st_size / (1024*1024)
                compression_ratio = (file_size_mb - compressed_size_mb) / file_size_mb * 100
                
                logger.info(f"‚úÖ –°–∂–∞—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                logger.info(f"üì¶ –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {compressed_size_mb:.1f} –ú–ë")
                logger.info(f"üìâ –°–∂–∞—Ç–æ –Ω–∞: {compression_ratio:.1f}%")
                
                return {
                    "success": True,
                    "file_path": str(compressed_path),
                    "file_size": compressed_path.stat().st_size,
                    "original_size": input_file.stat().st_size,
                    "compression_ratio": compression_ratio
                }
                
            except asyncio.TimeoutError:
                logger.error("‚è∞ Timeout –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ –≤–∏–¥–µ–æ (–±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç)")
                return {"success": False, "error": "–°–∂–∞—Ç–∏–µ –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (10 –º–∏–Ω—É—Ç)"}
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ –≤–∏–¥–µ–æ: {e}")
                return {"success": False, "error": str(e)}

def format_duration(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if not seconds:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    secs = seconds % 60
    
    if hours > 0:
        return f"{hours}:{minutes:02d}:{secs:02d}"
    else:
        return f"{minutes}:{secs:02d}"

def format_file_size(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if not size_bytes:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    for unit in ['–ë', '–ö–ë', '–ú–ë', '–ì–ë']:
        if size_bytes < 1024:
            return f"{size_bytes:.1f} {unit}"
        size_bytes /= 1024
    return f"{size_bytes:.1f} –¢–ë"

def format_count(count: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if not count:
        return "0"
    
    if count >= 1_000_000_000:
        return f"{count / 1_000_000_000:.1f}–º–ª—Ä–¥"
    elif count >= 1_000_000:
        return f"{count / 1_000_000:.1f}–º–ª–Ω"
    elif count >= 1_000:
        return f"{count / 1_000:.1f}—Ç—ã—Å"
    else:
        return f"{count:,}"

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
from .file_sender import send_file_to_user
