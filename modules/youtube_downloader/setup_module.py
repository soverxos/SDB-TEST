# modules/youtube_downloader/setup_module.py
"""
–§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥—É–ª—è –¥–ª—è YouTube Downloader
"""

import logging
from typing import TYPE_CHECKING, Optional

if TYPE_CHECKING:
    from aiogram import Dispatcher, Bot
    from core.services_provider import BotServicesProvider
    from core.module_loader import ModuleInfo

logger = logging.getLogger(__name__)

async def setup_module(
    dp: "Dispatcher", 
    bot: "Bot",
    services: "BotServicesProvider"
) -> None:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è YouTube Downloader –º–æ–¥—É–ª—è
    
    Args:
        dp: Dispatcher Aiogram –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ—É—Ç–µ—Ä–æ–≤
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        services: –ü—Ä–æ–≤–∞–π–¥–µ—Ä —Å–µ—Ä–≤–∏—Å–æ–≤ –±–æ—Ç–∞
    """
    MODULE_NAME = "youtube_downloader"
    
    module_info: Optional["ModuleInfo"] = services.modules.get_module_info(MODULE_NAME)
    
    if not module_info or not module_info.manifest:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç –¥–ª—è –º–æ–¥—É–ª—è '{MODULE_NAME}'. "
                     "–ú–æ–¥—É–ª—å –Ω–µ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return

    display_name = module_info.manifest.display_name
    version = module_info.manifest.version
    logger.info(f"[{MODULE_NAME}] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª—è: {display_name} v{version}...")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    from .handlers import youtube_router
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
    dp.include_router(youtube_router)
    logger.info(f"[{MODULE_NAME}] –†–æ—É—Ç–µ—Ä '{youtube_router.name}' —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    try:
        from .web_server import start_download_server_if_needed
        server = await start_download_server_if_needed()
        if server:
            logger.info(f"[{MODULE_NAME}] –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")
        else:
            logger.warning(f"[{MODULE_NAME}] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
    except Exception as e:
        logger.error(f"[{MODULE_NAME}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –≤ UI-—Ä–µ–µ—Å—Ç—Ä–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–µ–Ω—é –º–æ–¥—É–ª–µ–π
    ui_registry = services.ui_registry
    
    # –°–æ–∑–¥–∞–µ–º callback data –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –º–æ–¥—É–ª—å
    from core.ui.callback_data_factories import ModuleMenuEntry
    entry_cb_data = ModuleMenuEntry(module_name=MODULE_NAME).pack()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    icon = "üì∫"
    if module_info.manifest.commands:
        primary_command = next((cmd for cmd in module_info.manifest.commands if cmd.command == "youtube"), None)
        if primary_command and primary_command.icon:
            icon = primary_command.icon
    
    description = module_info.manifest.description or f"–ú–æ–¥—É–ª—å {display_name}"
    
    ui_registry.register_module_entry(
        module_name=MODULE_NAME,
        display_name=display_name,
        entry_callback_data=entry_cb_data,
        icon=icon,
        description=description,
        order=100,
        required_permission_to_view="youtube_downloader.access_user_features"
    )
    
    logger.info(f"[{MODULE_NAME}] UI-—Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –º–æ–¥—É–ª—è '{display_name}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ UIRegistry.")
    logger.info(f"‚úÖ –ú–æ–¥—É–ª—å '{MODULE_NAME}' ({display_name}) —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
