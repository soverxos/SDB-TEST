# modules/youtube_downloader/keyboards.py
"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–æ–¥—É–ª—è YouTube Downloader
"""

from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import TYPE_CHECKING, Optional, Dict, Any

from .callback_data import YouTubeAction
from core.ui.callback_data_factories import CoreMenuNavigate
from .permissions import (
    PERM_DOWNLOAD_VIDEO,
    PERM_DOWNLOAD_AUDIO,
    PERM_VIEW_HISTORY
)

if TYPE_CHECKING:
    from core.services_provider import BotServicesProvider
    from sqlalchemy.ext.asyncio import AsyncSession

async def get_youtube_main_menu_keyboard(
    services_provider: 'BotServicesProvider',
    user_id: int,
    session: 'AsyncSession'
) -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–¥—É–ª—è YouTube Downloader"""
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
    if await services_provider.rbac.user_has_permission(session, user_id, PERM_DOWNLOAD_VIDEO):
        builder.button(
            text="üì∫ –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ",
            callback_data=YouTubeAction(action="start_video_download").pack()
        )
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ
    if await services_provider.rbac.user_has_permission(session, user_id, PERM_DOWNLOAD_AUDIO):
        builder.button(
            text="üéµ –°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ",
            callback_data=YouTubeAction(action="start_audio_download").pack()
        )
    
    # –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫
    if await services_provider.rbac.user_has_permission(session, user_id, PERM_VIEW_HISTORY):
        builder.button(
            text="üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫",
            callback_data=YouTubeAction(action="view_history", page=1).pack()
        )
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    if not builder.export():
        builder.button(
            text="ü§∑‚Äç‚ôÇÔ∏è –î–ª—è –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π",
            callback_data=YouTubeAction(action="no_actions").pack()
        )
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—è–º"
    builder.button(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—è–º",
        callback_data=CoreMenuNavigate(target_menu="modules_list").pack()
    )
    
    builder.adjust(1)
    return builder.as_markup()

def get_url_input_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —ç—Ç–∞–ø–∞ –≤–≤–æ–¥–∞ URL"""
    builder = InlineKeyboardBuilder()
    
    builder.button(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
        callback_data=YouTubeAction(action="main_menu").pack()
    )
    
    builder.adjust(1)
    return builder.as_markup()

def get_video_quality_keyboard(video_info: Dict[str, Any]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ"""
    builder = InlineKeyboardBuilder()
    
    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞
    qualities = ["720p", "480p", "360p", "best", "worst"]
    
    for quality in qualities:
        builder.button(
            text=f"üìπ {quality}",
            callback_data=YouTubeAction(
                action="download_video_quality",
                quality=quality
            ).pack()
        )
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    builder.button(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data=YouTubeAction(action="main_menu").pack()
    )
    
    builder.adjust(2, 1)
    return builder.as_markup()

def get_audio_quality_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏–æ"""
    builder = InlineKeyboardBuilder()
    
    # –ö–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏–æ
    qualities = [
        ("üéµ –í—ã—Å–æ–∫–æ–µ (320kbps)", "320"),
        ("üéµ –°—Ä–µ–¥–Ω–µ–µ (192kbps)", "192"),
        ("üéµ –ù–∏–∑–∫–æ–µ (128kbps)", "128"),
        ("üéµ –õ—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ", "best")
    ]
    
    for text, quality in qualities:
        builder.button(
            text=text,
            callback_data=YouTubeAction(
                action="download_audio_quality",
                quality=quality
            ).pack()
        )
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    builder.button(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data=YouTubeAction(action="main_menu").pack()
    )
    
    builder.adjust(1)
    return builder.as_markup()

def get_download_confirmation_keyboard(download_type: str, quality: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏"""
    builder = InlineKeyboardBuilder()
    
    builder.button(
        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É",
        callback_data=YouTubeAction(
            action="confirm_download",
            format_type=download_type,
            quality=quality
        ).pack()
    )
    
    builder.button(
        text="üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ",
        callback_data=YouTubeAction(
            action=f"start_{download_type}_download"
        ).pack()
    )
    
    builder.button(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
        callback_data=YouTubeAction(action="main_menu").pack()
    )
    
    builder.adjust(1)
    return builder.as_markup()

def get_download_complete_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏"""
    builder = InlineKeyboardBuilder()
    
    builder.button(
        text="üìã –ü–µ—Ä–µ–π—Ç–∏ –∫ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫",
        callback_data=YouTubeAction(action="view_history", page=1).pack()
    )
    
    builder.button(
        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–¥—É–ª—è",
        callback_data=YouTubeAction(action="main_menu").pack()
    )
    
    builder.adjust(1)
    return builder.as_markup()

def get_history_keyboard(page: int = 1, has_next: bool = False, has_prev: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫"""
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if has_prev:
        nav_buttons.append(("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", YouTubeAction(action="view_history", page=page-1).pack()))
    
    if has_next:
        nav_buttons.append(("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", YouTubeAction(action="view_history", page=page+1).pack()))
    
    for text, callback_data in nav_buttons:
        builder.button(text=text, callback_data=callback_data)
    
    # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    builder.button(
        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
        callback_data=YouTubeAction(action="view_history", page=page).pack()
    )
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"
    builder.button(
        text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data=YouTubeAction(action="main_menu").pack()
    )
    
    if nav_buttons:
        builder.adjust(len(nav_buttons), 1, 1)
    else:
        builder.adjust(1)
    
    return builder.as_markup()

def get_history_with_download_keyboard(download_id: int, page: int = 1, has_next: bool = False, has_prev: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞"""
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
    builder.button(
        text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª",
        callback_data=YouTubeAction(action="send_file", item_id=download_id).pack()
    )
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if has_prev:
        nav_buttons.append(("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", YouTubeAction(action="view_history", page=page-1).pack()))
    
    if has_next:
        nav_buttons.append(("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", YouTubeAction(action="view_history", page=page+1).pack()))
    
    for text, callback_data in nav_buttons:
        builder.button(text=text, callback_data=callback_data)
    
    # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    builder.button(
        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
        callback_data=YouTubeAction(action="view_history", page=page).pack()
    )
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"
    builder.button(
        text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data=YouTubeAction(action="main_menu").pack()
    )
    
    if nav_buttons:
        builder.adjust(1, len(nav_buttons), 1, 1)
    else:
        builder.adjust(1, 1, 1)
    
    return builder.as_markup()

def get_download_item_keyboard(download_id: int, status: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
    builder = InlineKeyboardBuilder()
    
    if status == "completed":
        builder.button(
            text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª",
            callback_data=YouTubeAction(action="send_file", item_id=download_id).pack()
        )
    
    if status in ["failed", "completed"]:
        builder.button(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
            callback_data=YouTubeAction(action="delete_download", item_id=download_id).pack()
        )
    
    builder.button(
        text="‚¨ÖÔ∏è –ö –∏—Å—Ç–æ—Ä–∏–∏",
        callback_data=YouTubeAction(action="view_history", page=1).pack()
    )
    
    builder.adjust(1)
    return builder.as_markup()
