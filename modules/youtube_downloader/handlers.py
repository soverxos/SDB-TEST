# modules/youtube_downloader/handlers.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥—É–ª—è YouTube Downloader
"""

import asyncio
import os
from datetime import datetime, timezone
from pathlib import Path
from typing import Dict, Any, Optional

from aiogram import Router, F, types, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import hbold, hitalic, hcode, hlink
from loguru import logger
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, desc

from core.database.core_models import User as DBUser
from core.ui.callback_data_factories import ModuleMenuEntry
from .callback_data import YouTubeAction
from .keyboards import (
    get_youtube_main_menu_keyboard,
    get_video_quality_keyboard,
    get_audio_quality_keyboard,
    get_download_confirmation_keyboard,
    get_history_keyboard,
    get_download_item_keyboard,
    get_url_input_keyboard,
    get_download_complete_keyboard
)
from .models import YouTubeDownload
from .utils import YouTubeDownloader, format_duration, format_file_size, format_count
from .file_sender import send_file_to_user
from .permissions import PERM_ACCESS_USER_FEATURES

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from core.services_provider import BotServicesProvider

youtube_router = Router(name="youtube_downloader_handlers")

async def safe_edit_message(message, text: str, reply_markup=None, fallback_answer=None):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏ 'message is not modified'
    """
    try:
        await message.edit_text(text, reply_markup=reply_markup)
        return True
    except Exception as e:
        if "message is not modified" in str(e):
            # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: {e}")
            return False
        else:
            # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø–æ–¥–Ω–∏–º–∞–µ–º –¥–∞–ª—å—à–µ
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            raise

class YouTubeStates(StatesGroup):
    waiting_for_url = State()
    selecting_quality = State()
    confirming_download = State()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
user_sessions: Dict[int, Dict[str, Any]] = {}

def get_go_to_history_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üìã –ü–µ—Ä–µ–π—Ç–∏ –∫ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫",
            callback_data=YouTubeAction(action="view_history", page=1).pack()
        )]
    ])
    return keyboard

def get_error_history_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏",
            callback_data=YouTubeAction(action="view_history", page=1).pack()
        )]
    ])
    return keyboard

def get_history_with_download_keyboard(downloads, page: int, has_next: bool, has_prev: bool) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
    for i, download in enumerate(downloads, 1):
        if download.status == "COMPLETED" and download.file_path and os.path.exists(download.file_path):
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
            title = download.title[:25] + "..." if len(download.title) > 25 else download.title
            button_text = f"üì• {i}. {title}"
            
            # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            builder.button(
                text=button_text,
                callback_data=YouTubeAction(action="download_file", item_id=download.id).pack()
            )
            
            # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            builder.button(
                text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {i}",
                callback_data=YouTubeAction(action="delete_file", item_id=download.id).pack()
            )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if has_prev:
        nav_buttons.append(("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", YouTubeAction(action="view_history", page=page-1).pack()))
    
    if has_next:
        nav_buttons.append(("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", YouTubeAction(action="view_history", page=page+1).pack()))
    
    for text, callback_data in nav_buttons:
        builder.button(text=text, callback_data=callback_data)
    
    # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    builder.button(
        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
        callback_data=YouTubeAction(action="view_history", page=page).pack()
    )
    
    # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏)
    if downloads:
        builder.button(
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
            callback_data=YouTubeAction(action="clear_history").pack()
        )
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"
    builder.button(
        text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data=YouTubeAction(action="main_menu").pack()
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    completed_files = [d for d in downloads if d.status == "COMPLETED" and d.file_path and os.path.exists(d.file_path)]
    if completed_files:
        # –ö–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–¥—É—Ç –ø–∞—Ä–∞–º–∏
        adjust_list = [2] * len(completed_files)  # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥ (—Å–∫–∞—á–∞—Ç—å + —É–¥–∞–ª–∏—Ç—å)
        if nav_buttons:
            adjust_list.append(len(nav_buttons))
        if downloads:  # –ï—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ - –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏
            adjust_list.extend([1, 1, 1])  # –û–±–Ω–æ–≤–∏—Ç—å, –û—á–∏—Å—Ç–∏—Ç—å, –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        else:
            adjust_list.extend([1, 1])  # –û–±–Ω–æ–≤–∏—Ç—å, –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        builder.adjust(*adjust_list)
    else:
        if nav_buttons:
            if downloads:  # –ï—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                builder.adjust(len(nav_buttons), 1, 1, 1)  # –ù–∞–≤–∏–≥–∞—Ü–∏—è, –û–±–Ω–æ–≤–∏—Ç—å, –û—á–∏—Å—Ç–∏—Ç—å, –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            else:
                builder.adjust(len(nav_buttons), 1, 1)  # –ù–∞–≤–∏–≥–∞—Ü–∏—è, –û–±–Ω–æ–≤–∏—Ç—å, –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        else:
            if downloads:  # –ï—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ –Ω–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                builder.adjust(1, 1, 1)  # –û–±–Ω–æ–≤–∏—Ç—å, –û—á–∏—Å—Ç–∏—Ç—å, –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            else:
                builder.adjust(1, 1)  # –û–±–Ω–æ–≤–∏—Ç—å, –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    
    return builder.as_markup()

@youtube_router.callback_query(ModuleMenuEntry.filter(F.module_name == "youtube_downloader"))
async def youtube_main_menu(
    query: types.CallbackQuery,
    services_provider: 'BotServicesProvider',
    sdb_user: DBUser
):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–¥—É–ª—è YouTube Downloader"""
    user_id = sdb_user.telegram_id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –º–æ–¥—É–ª—å YouTube Downloader")
    
    async with services_provider.db.get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—é
        if not await services_provider.rbac.user_has_permission(session, user_id, PERM_ACCESS_USER_FEATURES):
            await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–æ–¥—É–ª—é", show_alert=True)
            return
        
        keyboard = await get_youtube_main_menu_keyboard(services_provider, user_id, session)
    
    text = (
        f"üì∫ {hbold('YouTube –ó–∞–≥—Ä—É–∑—á–∏–∫')}\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å YouTube!\n\n"
        f"üéØ {hbold('–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:')}\n"
        f"‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤–∞—Ö\n"
        f"‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –≤ MP3\n"
        f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∑–æ–∫\n"
        f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –±–æ—Ç–∞\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    if query.message:
        await safe_edit_message(query.message, text, reply_markup=keyboard)
    
    await query.answer()

@youtube_router.callback_query(YouTubeAction.filter(F.action == "start_video_download"))
async def start_video_download(
    query: types.CallbackQuery,
    state: FSMContext,
    sdb_user: DBUser
):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ"""
    user_id = sdb_user.telegram_id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ")
    
    text = (
        f"üì∫ {hbold('–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ —Å YouTube')}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å.\n\n"
        f"üîó {hbold('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫:')}\n"
        f"‚Ä¢ https://www.youtube.com/watch?v=...\n"
        f"‚Ä¢ https://youtu.be/...\n"
        f"‚Ä¢ https://m.youtube.com/watch?v=...\n\n"
        f"{hitalic('–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel')}"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Å–µ—Å—Å–∏–∏
    user_sessions[user_id] = {"download_type": "video"}
    await state.set_state(YouTubeStates.waiting_for_url)
    
    if query.message:
        await query.message.edit_text(text, reply_markup=get_url_input_keyboard())
    await query.answer()

@youtube_router.callback_query(YouTubeAction.filter(F.action == "start_audio_download"))
async def start_audio_download(
    query: types.CallbackQuery,
    state: FSMContext,
    sdb_user: DBUser
):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ"""
    user_id = sdb_user.telegram_id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –∑–∞–≥—Ä—É–∑–∫—É –∞—É–¥–∏–æ")
    
    text = (
        f"üéµ {hbold('–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ —Å YouTube')}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ.\n\n"
        f"üîó {hbold('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫:')}\n"
        f"‚Ä¢ https://www.youtube.com/watch?v=...\n"
        f"‚Ä¢ https://youtu.be/...\n"
        f"‚Ä¢ https://m.youtube.com/watch?v=...\n\n"
        f"üéß –ê—É–¥–∏–æ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP3\n\n"
        f"{hitalic('–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel')}"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Å–µ—Å—Å–∏–∏
    user_sessions[user_id] = {"download_type": "audio"}
    await state.set_state(YouTubeStates.waiting_for_url)
    
    if query.message:
        await query.message.edit_text(text, reply_markup=get_url_input_keyboard())
    await query.answer()

@youtube_router.message(StateFilter(YouTubeStates.waiting_for_url), F.text)
async def process_youtube_url(
    message: types.Message,
    state: FSMContext,
    services_provider: 'BotServicesProvider',
    sdb_user: DBUser
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ URL YouTube"""
    user_id = sdb_user.telegram_id
    url = message.text.strip()
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª URL: {url}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
    downloader = YouTubeDownloader(user_id=user_id)
    if not downloader.validate_youtube_url(url):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ YouTube!\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube."
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("üîÑ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        video_info = await downloader.get_video_info(url)
        
        if not video_info:
            await processing_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
        session_data = user_sessions.get(user_id, {})
        session_data.update({
            "url": url,
            "video_info": video_info
        })
        user_sessions[user_id] = session_data
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        duration_str = format_duration(video_info.get('duration', 0))
        view_count = format_count(video_info.get('view_count', 0))
        like_count = format_count(video_info.get('like_count', 0))
        upload_date = video_info.get('upload_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        category = video_info.get('category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        # –°—Ç—Ä–æ–∏–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        text = (
            f"üì∫ {hbold('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ')}\n\n"
            f"üé¨ {hbold('–ù–∞–∑–≤–∞–Ω–∏–µ:')}\n{video_info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
            f"üë§ {hbold('–ê–≤—Ç–æ—Ä:')} {video_info.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"‚è±Ô∏è {hbold('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:')} {duration_str}\n"
            f"üëÅÔ∏è {hbold('–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:')} {view_count}\n"
            f"üëç {hbold('–õ–∞–π–∫–∏:')} {like_count}\n"
            f"üìÖ {hbold('–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:')} {upload_date}\n"
            f"üìÇ {hbold('–ö–∞—Ç–µ–≥–æ—Ä–∏—è:')} {category}\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        tags = video_info.get('tags', [])
        if tags:
            tags_str = ', '.join(tags[:3])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–µ–≥–∞
            text += f"üè∑Ô∏è {hbold('–¢–µ–≥–∏:')} {tags_str}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        description = video_info.get('description', '')
        if description:
            text += f"\nüìù {hbold('–û–ø–∏—Å–∞–Ω–∏–µ:')}\n{description}\n"
        
        text += "\n"
        
        download_type = session_data.get("download_type", "video")
        
        if download_type == "video":
            text += "üìπ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:"
            keyboard = get_video_quality_keyboard(video_info)
        else:
            text += "üéµ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ:"
            keyboard = get_audio_quality_keyboard()
        
        await processing_msg.edit_text(text, reply_markup=keyboard)
        await state.set_state(YouTubeStates.selecting_quality)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL {url}: {e}")
        await processing_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        )

@youtube_router.callback_query(YouTubeAction.filter(F.action.in_(["download_video_quality", "download_audio_quality"])))
async def select_quality(
    query: types.CallbackQuery,
    callback_data: YouTubeAction,
    state: FSMContext,
    services_provider: 'BotServicesProvider',
    sdb_user: DBUser
):
    """–í—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
    user_id = sdb_user.telegram_id
    quality = callback_data.quality
    
    session_data = user_sessions.get(user_id, {})
    if not session_data:
        await query.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.", show_alert=True)
        return
    
    download_type = session_data.get("download_type")
    video_info = session_data.get("video_info", {})
    video_id = video_info.get('id')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
    session_data["quality"] = quality
    user_sessions[user_id] = session_data
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∑–∫–∏ —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ (–¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
    duplicate_warning = ""
    async with services_provider.db.get_session() as session:
        existing_downloads = await session.execute(
            select(YouTubeDownload)
            .where(
                YouTubeDownload.user_id == user_id,
                YouTubeDownload.video_id == video_id,
                YouTubeDownload.status.in_(["COMPLETED", "DOWNLOADING", "PENDING"])
            )
        )
        existing_records = existing_downloads.scalars().all()
        
        if existing_records:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∑–æ–∫ –ø–æ —Ç–∏–ø–∞–º
            video_count = len([r for r in existing_records if r.format_type == "VIDEO"])
            audio_count = len([r for r in existing_records if r.format_type == "AUDIO"])
            
            if video_count > 0 or audio_count > 0:
                duplicate_warning = f"\n‚ö†Ô∏è {hbold('–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:')} –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ"
                if video_count > 0:
                    duplicate_warning += f" (üìπ{video_count} –≤–∏–¥–µ–æ"
                    if audio_count > 0:
                        duplicate_warning += f", üéµ{audio_count} –∞—É–¥–∏–æ)"
                    else:
                        duplicate_warning += ")"
                elif audio_count > 0:
                    duplicate_warning += f" (üéµ{audio_count} –∞—É–¥–∏–æ)"
                duplicate_warning += "\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    duration_str = format_duration(video_info.get('duration', 0))
    view_count = format_count(video_info.get('view_count', 0))
    
    text = (
        f"‚úÖ {hbold('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏')}\n\n"
        f"üé¨ {hbold('–ù–∞–∑–≤–∞–Ω–∏–µ:')}\n{video_info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        f"ÔøΩ {hbold('–ê–≤—Ç–æ—Ä:')} {video_info.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"‚è±Ô∏è {hbold('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:')} {duration_str}\n"
        f"üëÅÔ∏è {hbold('–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:')} {view_count}\n\n"
        f"ÔøΩüì• {hbold('–¢–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏:')} {'üìπ –í–∏–¥–µ–æ' if download_type == 'video' else 'üéµ –ê—É–¥–∏–æ'}\n"
        f"üéØ {hbold('–ö–∞—á–µ—Å—Ç–≤–æ:')} {quality}\n"
        f"{duplicate_warning}\n"
        f"‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É:"
    )
    
    keyboard = get_download_confirmation_keyboard(download_type, quality)
    
    if query.message:
        await query.message.edit_text(text, reply_markup=keyboard)
    
    await state.set_state(YouTubeStates.confirming_download)
    await query.answer()

@youtube_router.callback_query(YouTubeAction.filter(F.action == "confirm_download"))
async def confirm_download(
    query: types.CallbackQuery,
    callback_data: YouTubeAction,
    state: FSMContext,
    services_provider: 'BotServicesProvider',
    sdb_user: DBUser,
    bot: Bot
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏"""
    user_id = sdb_user.telegram_id
    
    session_data = user_sessions.get(user_id, {})
    if not session_data:
        await query.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.", show_alert=True)
        return
    
    url = session_data.get("url")
    video_info = session_data.get("video_info", {})
    download_type = callback_data.format_type
    quality = callback_data.quality
    video_id = video_info.get('id')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª
    async with services_provider.db.get_session() as session:
        existing_download = await session.execute(
            select(YouTubeDownload)
            .where(
                YouTubeDownload.user_id == user_id,
                YouTubeDownload.video_id == video_id,
                YouTubeDownload.format_type == download_type.upper(),
                YouTubeDownload.quality == quality,
                YouTubeDownload.status.in_(["COMPLETED", "DOWNLOADING", "PENDING"])
            )
        )
        existing_record = existing_download.scalar_one_or_none()
        
        if existing_record:
            # –§–∞–π–ª —É–∂–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
            status_text = {
                "COMPLETED": "–∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                "DOWNLOADING": "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", 
                "PENDING": "–æ–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
            }.get(existing_record.status, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
            created_date = existing_record.created_at.strftime('%d.%m.%Y %H:%M') if existing_record.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            completed_date = existing_record.completed_at.strftime('%d.%m.%Y %H:%M') if existing_record.completed_at else None
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏–π
            builder = InlineKeyboardBuilder()
            
            if existing_record.status == "COMPLETED":
                builder.button(
                    text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª",
                    callback_data=YouTubeAction(action="send_file", item_id=existing_record.id).pack()
                )
                builder.button(
                    text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª (–∑–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)",
                    callback_data=YouTubeAction(
                        action="replace_download", 
                        format_type=download_type,
                        quality=quality,
                        item_id=existing_record.id
                    ).pack()
                )
            elif existing_record.status in ["DOWNLOADING", "PENDING"]:
                builder.button(
                    text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É (–∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é)",
                    callback_data=YouTubeAction(
                        action="replace_download", 
                        format_type=download_type,
                        quality=quality,
                        item_id=existing_record.id
                    ).pack()
                )
            
            builder.button(
                text="üìã –ü–µ—Ä–µ–π—Ç–∏ –∫ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫",
                callback_data=YouTubeAction(action="view_history", page=1).pack()
            )
            
            builder.button(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                callback_data=YouTubeAction(action="main_menu").pack()
            )
            
            builder.adjust(1)
            
            # –°—Ç—Ä–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            text = (
                f"‚ö†Ô∏è {hbold('–§–∞–π–ª —É–∂–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω!')}\n\n"
                f"üé¨ {hbold('–í–∏–¥–µ–æ:')} {video_info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"üì• {hbold('–¢–∏–ø:')} {'üìπ –í–∏–¥–µ–æ' if download_type == 'video' else 'üéµ –ê—É–¥–∏–æ'}\n"
                f"üéØ {hbold('–ö–∞—á–µ—Å—Ç–≤–æ:')} {quality}\n\n"
                f"üìä {hbold('–°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏:')} {status_text}\n"
                f"üìÖ {hbold('–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞:')} {created_date}\n"
            )
            
            if completed_date and existing_record.status == "COMPLETED":
                text += f"‚úÖ {hbold('–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:')} {completed_date}\n"
                if existing_record.file_size:
                    text += f"üì¶ {hbold('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:')} {format_file_size(existing_record.file_size)}\n"
            
            text += (
                f"\nüí° {hbold('–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:')} –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–æ–≤—ã–º.\n"
                f"‚ùì {hbold('–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?')}"
            )
            
            if query.message:
                await query.message.edit_text(text, reply_markup=builder.as_markup())
            await query.answer()
            return
        
        # –ï—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        download_record = YouTubeDownload(
            user_id=user_id,
            url=url,
            video_id=video_id,
            title=video_info.get('title'),
            duration=video_info.get('duration'),
            format_type=download_type.upper(),
            quality=quality,
            status="PENDING",
            created_at=datetime.utcnow()
        )
        
        session.add(download_record)
        await session.commit()
        await session.refresh(download_record)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(
        perform_download(download_record.id, services_provider, bot)
    )
    
    text = (
        f"üöÄ {hbold('–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!')}\n\n"
        f"üìä –í–∞—à–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å.\n"
        f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞.\n\n"
        f"üí¨ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.\n"
        f"üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫'."
    )
    
    if query.message:
        await query.message.edit_text(text, reply_markup=None)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–µ—Å—Å–∏—é
    await state.clear()
    user_sessions.pop(user_id, None)
    await query.answer()

@youtube_router.callback_query(YouTubeAction.filter(F.action == "replace_download"))
async def replace_download(
    query: types.CallbackQuery,
    callback_data: YouTubeAction,
    state: FSMContext,
    services_provider: 'BotServicesProvider',
    sdb_user: DBUser,
    bot: Bot
):
    """–ó–∞–º–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏"""
    user_id = sdb_user.telegram_id
    
    session_data = user_sessions.get(user_id, {})
    if not session_data:
        await query.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.", show_alert=True)
        return
    
    url = session_data.get("url")
    video_info = session_data.get("video_info", {})
    download_type = callback_data.format_type
    quality = callback_data.quality
    video_id = video_info.get('id')
    existing_id = callback_data.item_id
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
    async with services_provider.db.get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞
        if existing_id:
            existing_download = await session.execute(
                select(YouTubeDownload).where(YouTubeDownload.id == existing_id)
            )
            old_record = existing_download.scalar_one_or_none()
            
            if old_record and old_record.file_path:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                try:
                    import os
                    if os.path.exists(old_record.file_path):
                        os.remove(old_record.file_path)
                        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {old_record.file_path}")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {e}")
                
                # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ
                try:
                    downloader = YouTubeDownloader()
                    file_type = "video" if download_type == "video" else "audio"
                    downloader.clean_cache_for_video(video_id, file_type)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π
            if old_record:
                old_record.status = "PENDING"
                old_record.created_at = datetime.utcnow()
                old_record.completed_at = None
                old_record.file_path = None
                old_record.file_size = None
                old_record.error_message = None
                download_record = old_record
            else:
                # –ï—Å–ª–∏ —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                download_record = YouTubeDownload(
                    user_id=user_id,
                    url=url,
                    video_id=video_id,
                    title=video_info.get('title'),
                    duration=video_info.get('duration'),
                    format_type=download_type.upper(),
                    quality=quality,
                    status="PENDING",
                    created_at=datetime.utcnow()
                )
                session.add(download_record)
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ ID –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
            download_record = YouTubeDownload(
                user_id=user_id,
                url=url,
                video_id=video_id,
                title=video_info.get('title'),
                duration=video_info.get('duration'),
                format_type=download_type.upper(),
                quality=quality,
                status="PENDING",
                created_at=datetime.utcnow()
            )
            session.add(download_record)
        
        await session.commit()
        await session.refresh(download_record)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(
        perform_download(download_record.id, services_provider, bot)
    )
    
    text = (
        f"ÔøΩ {hbold('–ó–∞–º–µ–Ω–∞ —Ñ–∞–π–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞!')}\n\n"
        f"üìä –°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π.\n"
        f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞.\n\n"
        f"üí¨ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.\n"
        f"üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫'."
    )
    
    if query.message:
        await query.message.edit_text(text, reply_markup=None)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–µ—Å—Å–∏—é
    await state.clear()
    user_sessions.pop(user_id, None)
    await query.answer()

async def perform_download(download_id: int, services_provider: 'BotServicesProvider', bot: Bot):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –≤ —Ñ–æ–Ω–µ"""
    async with services_provider.db.get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∑–∞–≥—Ä—É–∑–∫–∏
        result = await session.execute(
            select(YouTubeDownload).where(YouTubeDownload.id == download_id)
        )
        download = result.scalar_one_or_none()
        
        if not download:
            logger.error(f"–ó–∞–≥—Ä—É–∑–∫–∞ {download_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            download.status = "DOWNLOADING"
            download.started_at = datetime.now(timezone.utc)
            await session.commit()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
            downloader = YouTubeDownloader(user_id=download.user_id)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            if download.format_type == "VIDEO":
                result = await downloader.download_video(download.url, download.quality)
            else:
                result = await downloader.download_audio(download.url, download.quality)
            
            if result["success"]:
                # –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
                download.status = "COMPLETED"
                download.file_path = result["file_path"]
                download.file_size = result["file_size"]
                download.completed_at = datetime.now(timezone.utc)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ñ–∞–π–ª –≤–∑—è—Ç –∏–∑ –∫—ç—à–∞
                from_cache = result.get("from_cache", False)
                cache_emoji = "üíæ" if from_cache else "üì•"
                cache_text = " (–∏–∑ –∫—ç—à–∞)" if from_cache else ""
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                file_result = await send_file_to_user(
                    bot, download.user_id, download.file_path, download.title, download.file_size
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
                file_sent = file_result.get("success", False) if file_result else False
                method = file_result.get("method") if file_result else None
                
                if file_sent and method == "telegram":
                    # –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Telegram
                    await bot.send_message(
                        download.user_id,
                        f"‚úÖ {hbold('–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')}{cache_text}\n\n"
                        f"üé¨ {hbold('–ù–∞–∑–≤–∞–Ω–∏–µ:')} {download.title}\n"
                        f"üë§ {hbold('–ê–≤—Ç–æ—Ä:')} {result.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                        f"‚è±Ô∏è {hbold('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:')} {format_duration(result.get('duration', 0))}\n"
                        f"üëÅÔ∏è {hbold('–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:')} {format_count(result.get('view_count', 0))}\n"
                        f"üì¶ {hbold('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:')} {format_file_size(download.file_size)}\n"
                        f"üéØ {hbold('–ö–∞—á–µ—Å—Ç–≤–æ:')} {download.quality}\n"
                        f"{cache_emoji} {hbold('–ò—Å—Ç–æ—á–Ω–∏–∫:')} {'–ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –∫—ç—à–∞' if from_cache else '–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å YouTube'}\n\n"
                        f"üìã –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫'",
                        reply_markup=get_download_complete_keyboard()
                    )
                elif file_sent and method == "web_download":
                    # –§–∞–π–ª –±–æ–ª—å—à–æ–π, —Å–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    download_url = file_result.get("download_url", "")
                    await bot.send_message(
                        download.user_id,
                        f"‚úÖ {hbold('–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')}{cache_text}\n\n"
                        f"üé¨ {hbold('–ù–∞–∑–≤–∞–Ω–∏–µ:')} {download.title}\n"
                        f"üë§ {hbold('–ê–≤—Ç–æ—Ä:')} {result.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                        f"‚è±Ô∏è {hbold('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:')} {format_duration(result.get('duration', 0))}\n"
                        f"üëÅÔ∏è {hbold('–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:')} {format_count(result.get('view_count', 0))}\n"
                        f"üì¶ {hbold('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:')} {format_file_size(download.file_size)}\n"
                        f"üéØ {hbold('–ö–∞—á–µ—Å—Ç–≤–æ:')} {download.quality}\n"
                        f"{cache_emoji} {hbold('–ò—Å—Ç–æ—á–Ω–∏–∫:')} {'–ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –∫—ç—à–∞' if from_cache else '–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å YouTube'}\n\n"
                        f"üìÅ {hbold('–§–∞–π–ª –≥–æ—Ç–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!')} (—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è Telegram)\n"
                        f"üåê {hlink('üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª', download_url)}\n"
                        f"‚è∞ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 24 —á–∞—Å–∞\n\n"
                        f"üìã –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫'",
                        reply_markup=get_download_complete_keyboard()
                    )
                else:
                    # –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å—Å—ã–ª–∫–∏
                    await bot.send_message(
                        download.user_id,
                        f"‚ùå {hbold('–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ñ–∞–π–ª–∞')}{cache_text}\n\n"
                        f"üé¨ {hbold('–ù–∞–∑–≤–∞–Ω–∏–µ:')} {download.title}\n"
                        f"üë§ {hbold('–ê–≤—Ç–æ—Ä:')} {result.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                        f"‚è±Ô∏è {hbold('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:')} {format_duration(result.get('duration', 0))}\n"
                        f"üëÅÔ∏è {hbold('–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:')} {format_count(result.get('view_count', 0))}\n"
                        f"üì¶ {hbold('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:')} {format_file_size(download.file_size)}\n"
                        f"üéØ {hbold('–ö–∞—á–µ—Å—Ç–≤–æ:')} {download.quality}\n"
                        f"{cache_emoji} {hbold('–ò—Å—Ç–æ—á–Ω–∏–∫:')} {'–ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –∫—ç—à–∞' if from_cache else '–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å YouTube'}\n\n"
                        f"üìã –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫'",
                        reply_markup=get_download_complete_keyboard()
                    )
            else:
                # –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                download.status = "FAILED"
                download.error_message = result["error"]
                download.completed_at = datetime.now(timezone.utc)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                await bot.send_message(
                    download.user_id,
                    f"‚ùå {hbold('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏')}\n\n"
                    f"üé¨ {download.title}\n"
                    f"üìù –û—à–∏–±–∫–∞: {result['error']}",
                    reply_markup=get_error_history_keyboard()
                )
            
            await session.commit()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ {download_id}: {e}")
            download.status = "FAILED"
            download.error_message = str(e)
            download.completed_at = datetime.now(timezone.utc)
            await session.commit()

@youtube_router.callback_query(YouTubeAction.filter(F.action == "view_history"))
async def view_history(
    query: types.CallbackQuery,
    callback_data: YouTubeAction,
    services_provider: 'BotServicesProvider',
    sdb_user: DBUser
):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫"""
    user_id = sdb_user.telegram_id
    page = callback_data.page or 1
    per_page = 5
    offset = (page - 1) * per_page
    
    async with services_provider.db.get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(YouTubeDownload)
            .where(YouTubeDownload.user_id == user_id)
            .order_by(desc(YouTubeDownload.created_at))
            .offset(offset)
            .limit(per_page + 1)  # +1 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        )
        downloads = result.scalars().all()
        
        has_next = len(downloads) > per_page
        if has_next:
            downloads = downloads[:-1]  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
        
        has_prev = page > 1
        
        if not downloads:
            text = (
                f"üìã {hbold('–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫')}\n\n"
                f"üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∑–æ–∫.\n\n"
                f"–ù–∞—á–Ω–∏—Ç–µ —Å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –º–æ–¥—É–ª—è!"
            )
        else:
            text = f"üìã {hbold('–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫')} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page})\n\n"
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            available_downloads = sum(1 for d in downloads if d.status == "COMPLETED" and d.file_path and os.path.exists(d.file_path))
            if available_downloads > 0:
                text += f"üí° {hitalic('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª')}\n\n"
            
            for i, download in enumerate(downloads, 1):
                status_emoji = {
                    "PENDING": "‚è≥",
                    "DOWNLOADING": "üîÑ",
                    "COMPLETED": "‚úÖ",
                    "FAILED": "‚ùå"
                }
                
                type_emoji = "üì∫" if download.format_type == "VIDEO" else "üéµ"
                
                text += (
                    f"{status_emoji[download.status]} {type_emoji} {hbold(f'{i}.')} "
                    f"{download.title[:30]}{'...' if len(download.title) > 30 else ''}\n"
                    f"üìÖ {download.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                )
                
                if download.status == "COMPLETED":
                    text += f"üì¶ {format_file_size(download.file_size)}"
                    if download.file_path and os.path.exists(download.file_path):
                        text += " üì• –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"
                    text += "\n"
                elif download.status == "FAILED":
                    text += f"‚ùå {download.error_message[:50]}...\n"
                
                text += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–∫–∏ Telegram
        current_time = datetime.now().strftime("%H:%M:%S")
        text += f"\nüïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        keyboard = get_history_with_download_keyboard(downloads, page, has_next, has_prev)
        
        if query.message:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            edit_success = await safe_edit_message(query.message, text, reply_markup=keyboard)
            if not edit_success:
                # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await query.answer("üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω–∞", show_alert=False)
                return
        
        await query.answer()

@youtube_router.callback_query(YouTubeAction.filter(F.action == "send_file"))
async def send_existing_file(
    query: types.CallbackQuery,
    callback_data: YouTubeAction,
    services_provider: 'BotServicesProvider',
    sdb_user: DBUser,
    bot: Bot
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    user_id = sdb_user.telegram_id
    download_id = callback_data.item_id
    
    if not download_id:
        await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω ID –∑–∞–≥—Ä—É–∑–∫–∏", show_alert=True)
        return
    
    async with services_provider.db.get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∑–∞–≥—Ä—É–∑–∫–∏
        result = await session.execute(
            select(YouTubeDownload)
            .where(YouTubeDownload.id == download_id)
            .where(YouTubeDownload.user_id == user_id)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        )
        download = result.scalar_one_or_none()
        
        if not download:
            await query.answer("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        if download.status != "COMPLETED":
            await query.answer("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", show_alert=True)
            return
        
        if not download.file_path or not os.path.exists(download.file_path):
            await query.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", show_alert=True)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        await query.answer("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...", show_alert=False)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            file_result = await send_file_to_user(
                bot, user_id, download.file_path, download.title, download.file_size
            )
            
            file_sent = file_result.get("success", False) if file_result else False
            if file_sent and file_result.get("method") == "telegram":
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
                await bot.send_message(
                    user_id,
                    f"‚úÖ {hbold('–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')}\n\n"
                    f"üé¨ {download.title}\n"
                    f"üì¶ –†–∞–∑–º–µ—Ä: {format_file_size(download.file_size)}\n"
                    f"üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {download.created_at.strftime('%d.%m.%Y %H:%M') if download.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
                )
            elif file_sent and file_result.get("method") in ["web_download", "ssh_fallback"]:
                # –§–∞–π–ª –¥–æ—Å—Ç–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –≤–µ–±-—Å—Å—ã–ª–∫—É - —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ send_file_to_user
                pass
            else:
                # –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –æ—à–∏–±–∫–∞
                await bot.send_message(
                    user_id,
                    f"üìÅ {hbold('–§–∞–π–ª –≥–æ—Ç–æ–≤, –Ω–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')}\n\n"
                    f"üé¨ {download.title}\n"
                    f"üì¶ –†–∞–∑–º–µ—Ä: {format_file_size(download.file_size)}\n"
                    f"üí° –§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram (50–ú–ë)\n"
                    f"üìã –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫'"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {download_id}: {e}")
            await bot.send_message(
                user_id,
                f"‚ùå {hbold('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞')}\n\n"
                f"üé¨ {download.title}\n"
                f"üìù –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ"
            )

@youtube_router.callback_query(YouTubeAction.filter(F.action == "download_file"))
async def download_file_from_history(
    query: types.CallbackQuery,
    callback_data: YouTubeAction,
    services_provider: 'BotServicesProvider',
    sdb_user: DBUser,
    bot: Bot
):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫"""
    user_id = sdb_user.telegram_id
    download_id = callback_data.item_id
    
    if not download_id:
        await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω ID –∑–∞–≥—Ä—É–∑–∫–∏", show_alert=True)
        return
    
    async with services_provider.db.get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∑–∞–≥—Ä—É–∑–∫–∏
        result = await session.execute(
            select(YouTubeDownload)
            .where(YouTubeDownload.id == download_id)
            .where(YouTubeDownload.user_id == user_id)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        )
        download = result.scalar()
        
        if not download:
            await query.answer("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        if download.status != "COMPLETED":
            await query.answer("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", show_alert=True)
            return
        
        if not download.file_path or not os.path.exists(download.file_path):
            await query.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", show_alert=True)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        await query.answer("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...", show_alert=False)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        file_result = await send_file_to_user(
            bot, user_id, download.file_path, download.title, download.file_size
        )
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ send_file_to_user

@youtube_router.callback_query(YouTubeAction.filter(F.action == "delete_file"))
async def delete_file_confirm(
    query: types.CallbackQuery,
    callback_data: YouTubeAction,
    services_provider: 'BotServicesProvider',
    sdb_user: DBUser
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    user_id = sdb_user.telegram_id
    download_id = callback_data.item_id
    
    if not download_id:
        await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω ID –∑–∞–≥—Ä—É–∑–∫–∏", show_alert=True)
        return
    
    async with services_provider.db.get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∑–∞–≥—Ä—É–∑–∫–∏
        result = await session.execute(
            select(YouTubeDownload)
            .where(YouTubeDownload.id == download_id)
            .where(YouTubeDownload.user_id == user_id)
        )
        download = result.scalar()
        
        if not download:
            await query.answer("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª", 
                    callback_data=YouTubeAction(action="confirm_delete", item_id=download_id).pack()
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞", 
                    callback_data=YouTubeAction(action="view_history", page=1).pack()
                )
            ]
        ])
        
        file_size_text = ""
        if download.file_size:
            file_size_text = f"\nüì¶ –†–∞–∑–º–µ—Ä: {format_file_size(download.file_size)}"
        
        await query.message.edit_text(
            f"üóëÔ∏è {hbold('–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞')}\n\n"
            f"üìπ {hbold('–ù–∞–∑–≤–∞–Ω–∏–µ:')}\n{download.title}\n"
            f"üìä {hbold('–ö–∞—á–µ—Å—Ç–≤–æ:')} {download.quality or 'N/A'}"
            f"{file_size_text}\n\n"
            f"‚ö†Ô∏è {hitalic('–í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞.')}\n"
            f"‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=keyboard
        )
        await query.answer()

@youtube_router.callback_query(YouTubeAction.filter(F.action == "confirm_delete"))
async def confirm_delete_file(
    query: types.CallbackQuery,
    callback_data: YouTubeAction,
    services_provider: 'BotServicesProvider',
    sdb_user: DBUser
):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    user_id = sdb_user.telegram_id
    download_id = callback_data.item_id
    
    if not download_id:
        await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω ID –∑–∞–≥—Ä—É–∑–∫–∏", show_alert=True)
        return
    
    try:
        async with services_provider.db.get_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∑–∞–≥—Ä—É–∑–∫–∏
            result = await session.execute(
                select(YouTubeDownload)
                .where(YouTubeDownload.id == download_id)
                .where(YouTubeDownload.user_id == user_id)
            )
            download = result.scalar()
            
            if not download:
                await query.answer("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            
            file_deleted = False
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
            if download.file_path and os.path.exists(download.file_path):
                try:
                    os.remove(download.file_path)
                    file_deleted = True
                    logger.info(f"–§–∞–π–ª —É–¥–∞–ª–µ–Ω: {download.file_path}")
                except Exception as file_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {download.file_path}: {file_error}")
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await session.delete(download)
            await session.commit()
            
            await query.message.edit_text(
                f"‚úÖ {hbold('–§–∞–π–ª —É–¥–∞–ª–µ–Ω!')}\n\n"
                f"üìπ {download.title}\n"
                f"üìä {download.quality or 'N/A'}\n\n"
                f"{'üóÇÔ∏è –§–∞–π–ª —É–¥–∞–ª–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞' if file_deleted else 'üìù –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏'}\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ö –∏—Å—Ç–æ—Ä–∏–∏",
                        callback_data=YouTubeAction(action="view_history", page=1).pack()
                    )]
                ])
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await query.message.edit_text(
            f"‚ùå {hbold('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞')}\n\n"
            f"üìù {str(e)}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏—Å—Ç–æ—Ä–∏–∏",
                    callback_data=YouTubeAction(action="view_history", page=1).pack()
                )]
            ])
        )
    await query.answer()


@youtube_router.callback_query(YouTubeAction.filter(F.action == "clear_history"))
async def clear_history_confirm(
    query: types.CallbackQuery,
    callback_data: YouTubeAction,
    services_provider: 'BotServicesProvider',
    sdb_user: DBUser
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", 
                callback_data=YouTubeAction(action="confirm_clear").pack()
            )
        ],
        [
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞", 
                callback_data=YouTubeAction(action="view_history", page=1).pack()
            )
        ]
    ])
    
    await query.message.edit_text(
        f"üóëÔ∏è {hbold('–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫')}\n\n"
        f"‚ö†Ô∏è {hitalic('–í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç:')}\n"
        f"‚Ä¢ –í—Å—é –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–∏—Ö –∑–∞–≥—Ä—É–∑–æ–∫\n"
        f"‚Ä¢ –í—Å–µ —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å —Å–µ—Ä–≤–µ—Ä–∞\n\n"
        f"‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=keyboard
    )
    await query.answer()

@youtube_router.callback_query(YouTubeAction.filter(F.action == "confirm_clear"))
async def confirm_clear_history(
    query: types.CallbackQuery,
    callback_data: YouTubeAction,
    services_provider: 'BotServicesProvider',
    sdb_user: DBUser
):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏"""
    user_id = sdb_user.telegram_id
    
    try:
        async with services_provider.db.get_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(
                select(YouTubeDownload)
                .where(YouTubeDownload.user_id == user_id)
            )
            downloads = result.scalars().all()
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å –¥–∏—Å–∫–∞
            deleted_files = 0
            for download in downloads:
                if download.file_path and os.path.exists(download.file_path):
                    try:
                        os.remove(download.file_path)
                        deleted_files += 1
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {download.file_path}: {e}")
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            for download in downloads:
                await session.delete(download)
            
            await session.commit()
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è
            user_dir = Path(f"project_data/downloads/user_{user_id}")
            if user_dir.exists():
                try:
                    if not any(user_dir.iterdir()):  # –ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞—è
                        user_dir.rmdir()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_dir}: {e}")
            
            await query.message.edit_text(
                f"‚úÖ {hbold('–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!')}\n\n"
                f"üìä –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(downloads)}\n"
                f"üóÇÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted_files}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∂–∞—Ç—å –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data=YouTubeAction(action="main_menu").pack()
                    )]
                ])
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await query.message.edit_text(
            f"‚ùå {hbold('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏')}\n\n"
            f"üìù {str(e)}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏—Å—Ç–æ—Ä–∏–∏",
                    callback_data=YouTubeAction(action="view_history", page=1).pack()
                )]
            ])
        )
    
    await query.answer()

@youtube_router.callback_query(YouTubeAction.filter(F.action.in_(["cancel_download", "no_actions"])))
async def cancel_or_no_action(
    query: types.CallbackQuery,
    callback_data: YouTubeAction,
    state: FSMContext,
    sdb_user: DBUser
):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–µ–π—Å—Ç–≤–∏–π"""
    user_id = sdb_user.telegram_id
    
    if callback_data.action == "cancel_download":
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–µ—Å—Å–∏—é
        await state.clear()
        user_sessions.pop(user_id, None)
        
        text = "‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
    else:
        text = "ü§∑‚Äç‚ôÇÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è."
    
    await query.answer(text, show_alert=True)

@youtube_router.callback_query(YouTubeAction.filter(F.action == "main_menu"))
async def back_to_main_menu(
    query: types.CallbackQuery,
    services_provider: 'BotServicesProvider',
    sdb_user: DBUser,
    state: FSMContext
):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–¥—É–ª—è"""
    user_id = sdb_user.telegram_id
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–µ—Å—Å–∏—é
    await state.clear()
    user_sessions.pop(user_id, None)
    
    await youtube_main_menu(query, services_provider, sdb_user)

@youtube_router.message(Command("cancel"), StateFilter(YouTubeStates))
async def cancel_state(message: types.Message, state: FSMContext, sdb_user: DBUser):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    user_id = sdb_user.telegram_id
    await state.clear()
    user_sessions.pop(user_id, None)
    await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–æ–¥—É–ª—è
@youtube_router.message(Command("youtube"))
async def youtube_command(
    message: types.Message,
    services_provider: 'BotServicesProvider',
    sdb_user: DBUser
):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥—É–ª—é"""
    user_id = sdb_user.telegram_id
    
    async with services_provider.db.get_session() as session:
        if not await services_provider.rbac.user_has_permission(session, user_id, PERM_ACCESS_USER_FEATURES):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥—É–ª—é YouTube Downloader")
            return
        
        keyboard = await get_youtube_main_menu_keyboard(services_provider, user_id, session)
    
    text = (
        f"üì∫ {hbold('YouTube –ó–∞–≥—Ä—É–∑—á–∏–∫')}\n\n"
        f"–ú–æ–¥—É–ª—å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ —Å YouTube.\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await message.answer(text, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–º–æ—â–∏
@youtube_router.callback_query(F.data == "download_help")
async def handle_download_help_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏ –ø–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    from .file_sender import handle_download_help_callback
    await handle_download_help_callback(callback_query)


@youtube_router.callback_query(F.data == "back_to_download")
async def handle_back_to_download_callback(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏"""
    await callback_query.message.edit_text(
        text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —Ñ–∞–π–ª —Å–Ω–æ–≤–∞.",
        parse_mode="Markdown"
    )
    await callback_query.answer()
