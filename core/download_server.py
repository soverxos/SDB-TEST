#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ YouTube
"""

import os
import uuid
import mimetypes
from pathlib import Path
from typing import Dict, Optional
from datetime import datetime, timedelta
import asyncio
from aiohttp import web, web_response
from loguru import logger
import urllib.parse

class DownloadServer:
    """–°–µ—Ä–≤–µ—Ä –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self, host: str = "0.0.0.0", port: int = 3000, base_path: str = "/root/SwiftDevBot"):
        self.host = host
        self.port = port
        self.base_path = Path(base_path)
        self.download_tokens: Dict[str, Dict] = {}  # token -> {file_path, expires, filename}
        
    def generate_download_link(self, file_path: str, filename: str = None, expire_hours: int = 24) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
        token = str(uuid.uuid4().hex)
        
        # –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
        expires = datetime.now() + timedelta(hours=expire_hours)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        if not filename:
            filename = Path(file_path).name
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
        self.download_tokens[token] = {
            'file_path': str(file_path),
            'filename': filename,
            'expires': expires,
            'created': datetime.now()
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É - –∏—Å–ø–æ–ª—å–∑—É–µ–º 100.113.229.67 –¥–ª—è Tailscale
        download_url = f"http://100.113.229.67:{self.port}/download/{token}"
        
        logger.info(f"üîó –°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {filename}")
        logger.info(f"üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expires.strftime('%d.%m.%Y %H:%M')}")
        logger.info(f"üåê –°—Å—ã–ª–∫–∞: {download_url}")
        
        return download_url
    
    async def handle_download(self, request: web.Request) -> web_response.Response:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
        
        token = request.match_info.get('token')
        
        if not token or token not in self.download_tokens:
            logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω: {token}")
            return web.Response(text="–°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞", status=404)
        
        token_info = self.download_tokens[token]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        if datetime.now() > token_info['expires']:
            logger.warning(f"‚è∞ –ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞: {token}")
            del self.download_tokens[token]
            return web.Response(text="–°—Å—ã–ª–∫–∞ –∏—Å—Ç–µ–∫–ª–∞", status=410)
        
        file_path = Path(token_info['file_path'])
        filename = token_info['filename']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not file_path.exists():
            logger.error(f"üìÅ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return web.Response(text="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", status=404)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
        mime_type, _ = mimetypes.guess_type(str(file_path))
        if not mime_type:
            mime_type = 'application/octet-stream'
        
        # –ö–æ–¥–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        encoded_filename = urllib.parse.quote(filename.encode('utf-8'))
        
        file_size = file_path.stat().st_size
        
        logger.info(f"üì• –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: {filename} ({file_size / (1024*1024):.1f} –ú–ë)")
        
        # –°–æ–∑–¥–∞–µ–º response –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        response = web.StreamResponse(
            status=200,
            headers={
                'Content-Type': mime_type,
                'Content-Length': str(file_size),
                'Content-Disposition': f'attachment; filename="{encoded_filename}"; filename*=UTF-8\'\'{encoded_filename}',
                'Cache-Control': 'no-cache',
                'Pragma': 'no-cache'
            }
        )
        
        await response.prepare(request)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —á–∞–Ω–∫–∞–º–∏
        try:
            with open(file_path, 'rb') as f:
                while True:
                    chunk = f.read(8192)  # 8KB —á–∞–Ω–∫–∏
                    if not chunk:
                        break
                    await response.write(chunk)
            
            logger.info(f"‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {filename}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        
        await response.write_eof()
        return response
    
    async def handle_info(self, request: web.Request) -> web.Response:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ"""
        
        active_links = len(self.download_tokens)
        
        info_html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>SwiftDevBot Download Server</title>
            <meta charset="UTF-8">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 40px; }}
                .container {{ max-width: 600px; margin: 0 auto; }}
                .stat {{ background: #f5f5f5; padding: 10px; margin: 10px 0; border-radius: 5px; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>ü§ñ SwiftDevBot Download Server</h1>
                <p>–°–µ—Ä–≤–µ—Ä –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ YouTube</p>
                
                <div class="stat">
                    <strong>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</strong><br>
                    –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: {active_links}<br>
                    –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
                </div>
                
                <div class="stat">
                    <strong>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong><br>
                    ‚Ä¢ –°—Å—ã–ª–∫–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã 24 —á–∞—Å–∞<br>
                    ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π<br>
                    ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: –≤—Å–µ
                </div>
            </div>
        </body>
        </html>
        """
        
        return web.Response(text=info_html, content_type='text/html')
    
    async def cleanup_expired_tokens(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
        while True:
            try:
                now = datetime.now()
                expired_tokens = [
                    token for token, info in self.download_tokens.items()
                    if now > info['expires']
                ]
                
                for token in expired_tokens:
                    del self.download_tokens[token]
                
                if expired_tokens:
                    logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤: {len(expired_tokens)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
                await asyncio.sleep(3600)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
                await asyncio.sleep(60)
    
    async def start_server(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
        
        app = web.Application()
        
        # –ú–∞—Ä—à—Ä—É—Ç—ã
        app.router.add_get('/download/{token}', self.handle_download)
        app.router.add_get('/', self.handle_info)
        app.router.add_get('/info', self.handle_info)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(self.cleanup_expired_tokens())
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Download Server –Ω–∞ {self.host}:{self.port}")
        
        runner = web.AppRunner(app)
        await runner.setup()
        
        site = web.TCPSite(runner, self.host, self.port)
        await site.start()
        
        logger.info(f"‚úÖ Download Server –∑–∞–ø—É—â–µ–Ω: http://{self.host}:{self.port}")
        
        return runner

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞
_download_server: Optional[DownloadServer] = None

def get_download_server() -> DownloadServer:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞"""
    global _download_server
    if _download_server is None:
        _download_server = DownloadServer()
    return _download_server

async def start_download_server_if_needed():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω"""
    server = get_download_server()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —Å–µ—Ä–≤–µ—Ä
    try:
        import aiohttp
        async with aiohttp.ClientSession() as session:
            async with session.get(f'http://{server.host}:{server.port}/info', timeout=2) as resp:
                if resp.status == 200:
                    logger.info(f"‚úÖ Download Server —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                    return server
    except:
        pass
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    try:
        await server.start_server()
        return server
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Download Server: {e}")
        return None

if __name__ == "__main__":
    async def main():
        server = DownloadServer()
        runner = await server.start_server()
        
        try:
            # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        finally:
            await runner.cleanup()
    
    asyncio.run(main())
