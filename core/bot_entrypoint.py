# core/bot_entrypoint.py

import asyncio
import sys
import os
from pathlib import Path
from typing import Optional, Union, List, Dict, Any, TYPE_CHECKING 
from datetime import datetime, timezone

from loguru import logger as global_logger

if not (hasattr(global_logger, '_core') and hasattr(global_logger._core, 'handlers') and global_logger._core.handlers):
    try:
        global_logger.remove() 
        global_logger.add(sys.stderr, level="DEBUG") 
        print("!!! [SDB bot_entrypoint WARNING] Loguru handlers –±—ã–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –¥–æ–±–∞–≤–ª–µ–Ω stderr –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. !!!", file=sys.stderr)
    except Exception as e_loguru_init_fallback_entry:
        print(f"!!! [SDB bot_entrypoint CRITICAL] Loguru handlers –ø—É—Å—Ç –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å stderr: {e_loguru_init_fallback_entry} !!!", file=sys.stderr)


from aiogram import Bot, Dispatcher, __version__ as aiogram_version
from aiogram.types import BotCommand 
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramRetryAfter

# –õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç RedisStorage - —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–µ–Ω
try:
    from aiogram.fsm.storage.redis import RedisStorage
    REDIS_STORAGE_AVAILABLE = True
except ImportError:
    RedisStorage = None  # type: ignore
    REDIS_STORAGE_AVAILABLE = False

from core.app_settings import settings 
from core.services_provider import BotServicesProvider
from core.module_loader import ModuleLoader 
from core.ui.handlers_core_ui import core_ui_router 
from core.i18n.middleware import I18nMiddleware 
from core.i18n.translator import Translator 
from core.users.middleware import UserStatusMiddleware 
from core.logging_manager import LoggingManager 
from core.admin_auto_setup import AdminAutoSetup 

if TYPE_CHECKING:
    pass

PID_FILENAME = "sdb_bot.pid" 
CORE_COMMANDS_DESCRIPTIONS = { 
    "start": "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ / –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    "help": "‚ùì –ü–æ–º–æ—â—å –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞",
}

try:
    from core.admin import admin_router 
    ADMIN_ROUTER_AVAILABLE = True
    global_logger.info("–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω-—Ä–æ—É—Ç–µ—Ä (core.admin.admin_router) —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.")
except ImportError:
    admin_router = None 
    ADMIN_ROUTER_AVAILABLE = False
    global_logger.info("–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω-—Ä–æ—É—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω. –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±—É–¥–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.")


async def _setup_bot_commands(bot: Bot, services: 'BotServicesProvider', admin_router_available: bool):
    module_name_for_log = "CoreBotSetup"
    global_logger.debug(f"[{module_name_for_log}] –ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ Telegram...")
    
    final_commands_dict: Dict[str, str] = {}

    for cmd_name, cmd_desc in CORE_COMMANDS_DESCRIPTIONS.items():
        if cmd_name not in final_commands_dict:
            final_commands_dict[cmd_name] = cmd_desc
    global_logger.trace(f"[{module_name_for_log}] –î–æ–±–∞–≤–ª–µ–Ω—ã –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã —è–¥—Ä–∞: {list(CORE_COMMANDS_DESCRIPTIONS.keys())}")

    all_loaded_plugin_modules_info = services.modules.get_loaded_modules_info(include_system=False, include_plugins=True)
    for module_info in all_loaded_plugin_modules_info:
        if module_info.manifest and module_info.manifest.commands:
            global_logger.trace(f"[{module_name_for_log}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞: {module_info.name}")
            for cmd_manifest in module_info.manifest.commands:
                if not cmd_manifest.admin_only: 
                    if cmd_manifest.command not in final_commands_dict:
                        final_commands_dict[cmd_manifest.command] = cmd_manifest.description
    
    if admin_router_available: 
        admin_panel_commands = {"admin": "üõ† –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"} 
        
        for cmd_name, cmd_desc in admin_panel_commands.items():
            if cmd_name not in final_commands_dict:
                 final_commands_dict[cmd_name] = cmd_desc
        global_logger.trace(f"[{module_name_for_log}] –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {list(admin_panel_commands.keys())}")

    final_bot_commands = [
        BotCommand(command=name, description=desc) for name, desc in final_commands_dict.items()
    ]
            
    if final_bot_commands:
        try:
            await bot.set_my_commands(final_bot_commands)
            global_logger.success(f"[{module_name_for_log}] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(final_bot_commands)} –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ Telegram: "
                                  f"{[cmd.command for cmd in final_bot_commands]}")
        except Exception as e:
            global_logger.error(f"[{module_name_for_log}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}", exc_info=True)
    else:
        global_logger.warning(f"[{module_name_for_log}] –ù–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ Telegram.")


async def run_sdb_bot() -> int:
    if not settings.telegram.token:
        global_logger.critical("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        global_logger.critical("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å BOT_TOKEN=... –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ config.yaml.")
        return 1
        
    current_process_start_time = datetime.now(timezone.utc)
    sdb_version = settings.core.sdb_version
    
    logging_manager = LoggingManager(app_settings=settings)
    await logging_manager.initialize_logging() 
    
    global_logger.info(f"–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. "
                       f"–£—Ä–æ–≤–µ–Ω—å –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –ª–æ–≥–∞: {settings.core.log_level.upper()} (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω SDB_CLI_DEBUG_MODE_FOR_LOGGING). "
                       f"–£—Ä–æ–≤–µ–Ω—å —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–∞ –≤—Å–µ–≥–¥–∞ DEBUG (–∏–ª–∏ TRACE, –µ—Å–ª–∏ —Ç–∞–∫ –∑–∞–¥–∞–Ω–æ –≤ LoggingManager).")

    global_logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ SwiftDevBot (SDB) v{sdb_version} –≤ {current_process_start_time.strftime('%Y-%m-%d %H:%M:%S %Z')}...")
    global_logger.info(f"üêç –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Python v{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
    global_logger.info(f"ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Aiogram v{aiogram_version}")
    global_logger.debug(f"–ö–∞—Ç–∞–ª–æ–≥ –∑–∞–ø—É—Å–∫–∞ (CWD): {Path.cwd()}")
    global_logger.debug(f"–ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: {settings.core.project_data_path.parent}")
    global_logger.debug(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞: {settings.core.project_data_path}")

    pid_file_actual_path = settings.core.project_data_path / PID_FILENAME
    bot: Optional[Bot] = None 
    services: Optional[BotServicesProvider] = None
    exit_code_internal = 1 

    if pid_file_actual_path.exists():
        try:
            old_pid = int(pid_file_actual_path.read_text().strip())
            if sys.platform != "win32": 
                os.kill(old_pid, 0) 
                global_logger.error(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π PID-—Ñ–∞–π–ª ({pid_file_actual_path}) –¥–ª—è —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ PID {old_pid}. "
                                   f"–ù–æ–≤—ã–π –∑–∞–ø—É—Å–∫ SDB (PID: {os.getpid()}) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä.")
                if logging_manager: await logging_manager.shutdown_logging() 
                return 1 
        except (OSError, ValueError): 
            global_logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ PID-—Ñ–∞–π–ª–∞: {pid_file_actual_path}")
            pid_file_actual_path.unlink(missing_ok=True)
        except Exception as e_pid_precheck:
             global_logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ PID-—Ñ–∞–π–ª–∞: {e_pid_precheck}")

    should_write_pid = os.environ.get("SDB_SHOULD_WRITE_PID", "false").lower() == "true"
    if should_write_pid:
        try:
            pid_file_actual_path.parent.mkdir(parents=True, exist_ok=True)
            with open(pid_file_actual_path, "w") as f:
                f.write(str(os.getpid()))
            global_logger.info(f"PID {os.getpid()} –∑–∞–ø–∏—Å–∞–Ω –≤ {pid_file_actual_path}")
        except Exception as e_pid_write:
            global_logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–∑–∞–ø–∏—Å–∞—Ç—å PID-—Ñ–∞–π–ª {pid_file_actual_path}: {e_pid_write}. "
                               "–ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É, –Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ PID-—Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—Ä—É—à–µ–Ω–æ.")
    try:
        services = BotServicesProvider(settings=settings)
        await services.setup_services() 
        global_logger.success("‚úÖ BotServicesProvider –∏ –≤—Å–µ –µ–≥–æ –±–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
        
        bot = Bot(
            token=services.config.telegram.token,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        me = await bot.get_me()
        global_logger.info(f"ü§ñ –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram Bot —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: @{me.username} (ID: {me.id})")

        storage: Union[MemoryStorage, Any]
        if (services.config.cache.type == "redis" and 
            services.cache.is_available() and 
            REDIS_STORAGE_AVAILABLE):
            redis_client_instance = await services.cache.get_redis_client_instance()
            if redis_client_instance:
                storage = RedisStorage(redis=redis_client_instance)
                global_logger.info("FSM Storage: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è RedisStorage.")
            else:
                global_logger.warning("Redis —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫—ç—à–∞, –Ω–æ –∫–ª–∏–µ–Ω—Ç Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è FSM. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è MemoryStorage.")
                storage = MemoryStorage()
        else:
            storage = MemoryStorage()
            global_logger.info("FSM Storage: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è MemoryStorage.")

        dp = Dispatcher(storage=storage, services_provider=services)
        global_logger.info("üö¶ Dispatcher –∏ FSM Storage –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")

        translator = Translator(
            locales_dir=settings.core.i18n.locales_dir,
            domain=settings.core.i18n.domain,
            default_locale=settings.core.i18n.default_locale,
            available_locales=settings.core.i18n.available_locales
        )
        dp.update.outer_middleware(I18nMiddleware(translator))
        global_logger.info("I18nMiddleware –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤—Å–µ—Ö Update.")
        
        dp.update.outer_middleware(UserStatusMiddleware()) 
        global_logger.info("UserStatusMiddleware –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤—Å–µ—Ö Update.")

        dp.include_router(core_ui_router) 
        global_logger.info(f"–ë–∞–∑–æ–≤—ã–π UI-—Ä–æ—É—Ç–µ—Ä —è–¥—Ä–∞ '{core_ui_router.name}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

        if ADMIN_ROUTER_AVAILABLE and admin_router:
            dp.include_router(admin_router)
            global_logger.info(f"‚úÖ –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω-—Ä–æ—É—Ç–µ—Ä '{admin_router.name}' —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        module_loader: ModuleLoader = services.modules 
        await module_loader.initialize_and_setup_modules(dp=dp, bot=bot)
        
        if settings.core.setup_bot_commands_on_startup:
            await _setup_bot_commands(bot, services, admin_router_available=ADMIN_ROUTER_AVAILABLE)
        else:
            global_logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")

        @dp.startup()
        async def on_bot_startup():
            nonlocal sdb_version 
            bot_info = await bot.get_me() 
            services.logger.info(f"‚ö° –°–æ–±—ã—Ç–∏–µ startup –¥–ª—è Dispatcher (–±–æ—Ç: @{bot_info.username})...")
            
            admin_setup = AdminAutoSetup(services)
            await admin_setup.initialize()
            
            # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ callback_data
            from core.ui.callback_data_manager import callback_data_manager
            asyncio.create_task(callback_data_manager.cleanup_expired_hashes_task())
            
            await bot.delete_webhook(drop_pending_updates=True)
            services.logger.info("Webhook —É–¥–∞–ª–µ–Ω, –æ–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã.")
            
            services.logger.success(f"‚úÖ –ë–æ—Ç SDB @{bot_info.username} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            if services.config.core.super_admins:
                for admin_id in services.config.core.super_admins:
                    try:
                        await bot.send_message(admin_id, f"üöÄ –ë–æ—Ç SDB @{bot_info.username} (v{sdb_version}) —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
                    except Exception as e_send:
                        services.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –∞–¥–º–∏–Ω—É {admin_id}: {e_send}")

        @dp.shutdown()
        async def on_bot_shutdown():
            nonlocal logging_manager 
            bot_info = await bot.get_me()
            services.logger.info(f"‚è≥ –°–æ–±—ã—Ç–∏–µ shutdown –¥–ª—è Dispatcher. –ù–∞—á–∞–ª–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ @{bot_info.username}...")
            
            if logging_manager: 
                await logging_manager.shutdown_logging()

            if pid_file_actual_path.is_file():
                try:
                    if int(pid_file_actual_path.read_text().strip()) == os.getpid():
                        pid_file_actual_path.unlink()
                except: pass

            global_logger.info(f"üèÅ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ @{bot_info.username} –ø–æ—á—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

        bot_username_for_log = (await bot.get_me()).username
        global_logger.info(f"üì° –ó–∞–ø—É—Å–∫ Telegram Bot Polling –¥–ª—è @{bot_username_for_log}...")
        
        await dp.start_polling(bot) 
        exit_code_internal = 0 
        
    except (KeyboardInterrupt, SystemExit) as e_exit:
        global_logger.info(f"üö® –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ({type(e_exit).__name__}). –ü–æ–ª–ª–∏–Ω–≥ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è...")
        exit_code_internal = 0 
    except Exception as e_main_run:
        global_logger.critical(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ run_sdb_bot: {e_main_run}", exc_info=True)
        exit_code_internal = 1
    finally:
        global_logger.info("–ë–ª–æ–∫ finally –≤ run_sdb_bot.")
        
        if services:
            await services.close_services()
        
        if logging_manager and logging_manager._is_initialized: 
            await logging_manager.shutdown_logging() 
        
        if pid_file_actual_path.is_file():
            try:
                if int(pid_file_actual_path.read_text().strip()) == os.getpid():
                    pid_file_actual_path.unlink()
            except: pass
            
        global_logger.info(f"üèÅ –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–¥ –≤—ã—Ö–æ–¥–∞: {exit_code_internal}")
        return exit_code_internal