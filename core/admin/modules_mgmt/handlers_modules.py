# core/admin/modules_mgmt/handlers_modules.py
from aiogram import Router, types, F
from loguru import logger
from typing import List, Dict, Any, Optional

from core.ui.callback_data_factories import AdminModulesPanelNavigate, AdminMainMenuNavigate
from core.admin.filters_admin import can_view_admin_panel_filter
from .keyboards_modules import get_modules_list_keyboard, get_module_details_keyboard, get_module_actions_keyboard

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from core.services_provider import BotServicesProvider

modules_mgmt_router = Router(name="sdb_admin_modules_mgmt_handlers")
MODULE_NAME_FOR_LOG = "AdminModulesMgmt"

modules_mgmt_router.callback_query.filter(can_view_admin_panel_filter)

@modules_mgmt_router.callback_query(AdminMainMenuNavigate.filter(F.target_section == "modules"))
async def cq_admin_modules_start(
    query: types.CallbackQuery,
    services_provider: 'BotServicesProvider'
):
    admin_user_id = query.from_user.id
    logger.info(f"[{MODULE_NAME_FOR_LOG}] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏.")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π
    modules_info = await _get_modules_info(services_provider)
    
    text = "üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏**\n\n"
    if modules_info:
        enabled_count = sum(1 for m in modules_info if m['is_enabled'])
        total_count = len(modules_info)
        text += f"üìä –í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π: {total_count}\n"
        text += f"‚úÖ –í–∫–ª—é—á–µ–Ω–æ: {enabled_count}\n"
        text += f"‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ: {total_count - enabled_count}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    else:
        text += "‚ùå –ú–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    keyboard = await get_modules_list_keyboard(modules_info)
    
    if query.message:
        try:
            await query.message.edit_text(text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", show_alert=True)
    
    await query.answer()

@modules_mgmt_router.callback_query(AdminModulesPanelNavigate.filter(F.action == "list"))
async def cq_admin_modules_list(
    query: types.CallbackQuery,
    services_provider: 'BotServicesProvider'
):
    admin_user_id = query.from_user.id
    logger.info(f"[{MODULE_NAME_FOR_LOG}] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π.")
    
    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∏–∑ cq_admin_modules_start
    modules_info = await _get_modules_info(services_provider)
    
    text = "üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏**\n\n"
    if modules_info:
        enabled_count = sum(1 for m in modules_info if m['is_enabled'])
        total_count = len(modules_info)
        text += f"üìä –í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π: {total_count}\n"
        text += f"‚úÖ –í–∫–ª—é—á–µ–Ω–æ: {enabled_count}\n"
        text += f"‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ: {total_count - enabled_count}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    else:
        text += "‚ùå –ú–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    keyboard = await get_modules_list_keyboard(modules_info)
    
    if query.message:
        try:
            await query.message.edit_text(text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", show_alert=True)
    
    await query.answer()

@modules_mgmt_router.callback_query(AdminModulesPanelNavigate.filter(F.action == "view"))
async def cq_admin_module_view(
    query: types.CallbackQuery,
    callback_data: AdminModulesPanelNavigate,
    services_provider: 'BotServicesProvider'
):
    admin_user_id = query.from_user.id
    module_name = callback_data.item_id
    
    logger.info(f"[{MODULE_NAME_FOR_LOG}] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Å–º–æ—Ç—Ä –º–æ–¥—É–ª—è {module_name}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ
    module_info = await _get_module_info(services_provider, module_name)
    
    if not module_info:
        await query.answer("–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    text = f"üì¶ **–ú–æ–¥—É–ª—å: {module_name}**\n\n"
    text += f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {module_info.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
    text += f"üìÖ –í–µ—Ä—Å–∏—è: {module_info.get('version', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    text += f"üë®‚Äçüíª –ê–≤—Ç–æ—Ä: {module_info.get('author', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"üîó –°–∞–π—Ç: {module_info.get('website', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"üìß Email: {module_info.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"üìÑ –õ–∏—Ü–µ–Ω–∑–∏—è: {module_info.get('license', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
    text += f"‚úÖ –°—Ç–∞—Ç—É—Å: {'–í–∫–ª—é—á–µ–Ω' if module_info['is_enabled'] else '–û—Ç–∫–ª—é—á–µ–Ω'}\n"
    
    if module_info.get('error'):
        text += f"‚ùå –û—à–∏–±–∫–∞: {module_info['error']}\n"
    
    keyboard = await get_module_details_keyboard(module_name, module_info['is_enabled'])
    
    if query.message:
        try:
            await query.message.edit_text(text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", show_alert=True)
    
    await query.answer()

@modules_mgmt_router.callback_query(AdminModulesPanelNavigate.filter(F.action == "toggle"))
async def cq_admin_module_toggle(
    query: types.CallbackQuery,
    callback_data: AdminModulesPanelNavigate,
    services_provider: 'BotServicesProvider'
):
    admin_user_id = query.from_user.id
    module_name = callback_data.item_id
    
    logger.info(f"[{MODULE_NAME_FOR_LOG}] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª—è {module_name}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è
    module_info = await _get_module_info(services_provider, module_name)
    
    if not module_info:
        await query.answer("–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    current_status = module_info['is_enabled']
    new_status = not current_status
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
    success = await _toggle_module(services_provider, module_name, new_status)
    
    if success:
        status_text = "–≤–∫–ª—é—á–µ–Ω" if new_status else "–æ—Ç–∫–ª—é—á–µ–Ω"
        await query.answer(f"–ú–æ–¥—É–ª—å {module_name} {status_text}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        await cq_admin_module_view(query, callback_data, services_provider)
    else:
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –º–æ–¥—É–ª—è", show_alert=True)

@modules_mgmt_router.callback_query(AdminModulesPanelNavigate.filter(F.action == "actions"))
async def cq_admin_module_actions(
    query: types.CallbackQuery,
    callback_data: AdminModulesPanelNavigate,
    services_provider: 'BotServicesProvider'
):
    admin_user_id = query.from_user.id
    module_name = callback_data.item_id
    
    logger.info(f"[{MODULE_NAME_FOR_LOG}] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–µ–π—Å—Ç–≤–∏—è —Å –º–æ–¥—É–ª–µ–º {module_name}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ
    module_info = await _get_module_info(services_provider, module_name)
    
    if not module_info:
        await query.answer("–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    text = f"üîß **–î–µ–π—Å—Ç–≤–∏—è —Å –º–æ–¥—É–ª–µ–º: {module_name}**\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    keyboard = await get_module_actions_keyboard(module_name, module_info['is_enabled'])
    
    if query.message:
        try:
            await query.message.edit_text(text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥—É–ª—è: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", show_alert=True)
    
    await query.answer()

@modules_mgmt_router.callback_query(AdminModulesPanelNavigate.filter(F.action == "clean_tables"))
async def cq_admin_module_clean_tables(
    query: types.CallbackQuery,
    callback_data: AdminModulesPanelNavigate,
    services_provider: 'BotServicesProvider'
):
    admin_user_id = query.from_user.id
    module_name = callback_data.item_id
    
    logger.info(f"[{MODULE_NAME_FOR_LOG}] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—á–∏—Å—Ç–∫—É —Ç–∞–±–ª–∏—Ü –º–æ–¥—É–ª—è {module_name}")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    text = f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!**\n\n"
    text += f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã –º–æ–¥—É–ª—è '{module_name}'.\n"
    text += "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ –∏ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª—è.\n\n"
    text += "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
    
    keyboard = await get_module_clean_tables_confirm_keyboard(module_name)
    
    if query.message:
        try:
            await query.message.edit_text(text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", show_alert=True)
    
    await query.answer()

@modules_mgmt_router.callback_query(AdminModulesPanelNavigate.filter(F.action == "clean_tables_confirm"))
async def cq_admin_module_clean_tables_confirm(
    query: types.CallbackQuery,
    callback_data: AdminModulesPanelNavigate,
    services_provider: 'BotServicesProvider'
):
    admin_user_id = query.from_user.id
    module_name = callback_data.item_id
    
    logger.info(f"[{MODULE_NAME_FOR_LOG}] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ—á–∏—Å—Ç–∫—É —Ç–∞–±–ª–∏—Ü –º–æ–¥—É–ª—è {module_name}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É —Ç–∞–±–ª–∏—Ü
    success = await _clean_module_tables(services_provider, module_name)
    
    if success:
        await query.answer("–¢–∞–±–ª–∏—Ü—ã –º–æ–¥—É–ª—è –æ—á–∏—â–µ–Ω—ã")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –º–æ–¥—É–ª–µ–π
        await cq_admin_modules_list(query, services_provider)
    else:
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü", show_alert=True)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def _get_modules_info(services_provider: 'BotServicesProvider') -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –º–æ–¥—É–ª—è—Ö"""
    try:
        module_loader = services_provider.module_loader
        all_modules = module_loader.get_all_modules_info()
        
        modules_info = []
        for module_info in all_modules:
            modules_info.append({
                'name': module_info.name,
                'description': module_info.manifest.description if module_info.manifest else '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è',
                'version': module_info.manifest.version if module_info.manifest else '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
                'author': module_info.manifest.author if module_info.manifest else '–ù–µ —É–∫–∞–∑–∞–Ω',
                'website': module_info.manifest.website if module_info.manifest else '–ù–µ —É–∫–∞–∑–∞–Ω',
                'email': module_info.manifest.email if module_info.manifest else '–ù–µ —É–∫–∞–∑–∞–Ω',
                'license': module_info.manifest.license if module_info.manifest else '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
                'is_enabled': module_info.is_enabled,
                'error': module_info.error,
                'is_system_module': module_info.is_system_module
            })
        
        return modules_info
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª—è—Ö: {e}")
        return []

async def _get_module_info(services_provider: 'BotServicesProvider', module_name: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –º–æ–¥—É–ª–µ"""
    try:
        module_loader = services_provider.module_loader
        module_info = module_loader.get_module_info(module_name)
        
        if not module_info:
            return None
        
        return {
            'name': module_info.name,
            'description': module_info.manifest.description if module_info.manifest else '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è',
            'version': module_info.manifest.version if module_info.manifest else '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
            'author': module_info.manifest.author if module_info.manifest else '–ù–µ —É–∫–∞–∑–∞–Ω',
            'website': module_info.manifest.website if module_info.manifest else '–ù–µ —É–∫–∞–∑–∞–Ω',
            'email': module_info.manifest.email if module_info.manifest else '–ù–µ —É–∫–∞–∑–∞–Ω',
            'license': module_info.manifest.license if module_info.manifest else '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
            'is_enabled': module_info.is_enabled,
            'error': module_info.error,
            'is_system_module': module_info.is_system_module
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ {module_name}: {e}")
        return None

async def _toggle_module(services_provider: 'BotServicesProvider', module_name: str, enable: bool) -> bool:
    """–í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º CLI –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è–º–∏
        import subprocess
        import sys
        
        action = "enable" if enable else "disable"
        cmd = [sys.executable, "sdb", "module", action, module_name]
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            logger.info(f"–ú–æ–¥—É–ª—å {module_name} —É—Å–ø–µ—à–Ω–æ {action}d")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ {action} –º–æ–¥—É–ª—è {module_name}: {result.stderr}")
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –º–æ–¥—É–ª—è {module_name}: {e}")
        return False

async def _clean_module_tables(services_provider: 'BotServicesProvider', module_name: str) -> bool:
    """–û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã –º–æ–¥—É–ª—è"""
    try:
        import subprocess
        import sys
        
        cmd = [sys.executable, "sdb", "module", "clean-tables", module_name]
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            logger.info(f"–¢–∞–±–ª–∏—Ü—ã –º–æ–¥—É–ª—è {module_name} —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü –º–æ–¥—É–ª—è {module_name}: {result.stderr}")
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü –º–æ–¥—É–ª—è {module_name}: {e}")
        return False

async def get_module_clean_tables_confirm_keyboard(module_name: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    builder.button(
        text="‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å",
        callback_data=AdminModulesPanelNavigate(action="clean_tables_confirm", item_id=module_name).pack()
    )
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    builder.button(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data=AdminModulesPanelNavigate(action="view", item_id=module_name).pack()
    )
    
    builder.adjust(2)
    return builder.as_markup()