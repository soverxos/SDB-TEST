# core/admin/modules_mgmt/keyboards_modules.py
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger
from typing import List, Dict, Any

from core.ui.callback_data_factories import AdminModulesPanelNavigate, AdminMainMenuNavigate

async def get_modules_list_keyboard(modules_info: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π"""
    builder = InlineKeyboardBuilder()
    
    if modules_info:
        for module in modules_info:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è
            status_icon = "‚úÖ" if module['is_enabled'] else "‚ùå"
            error_icon = "‚ö†Ô∏è" if module.get('error') else ""
            system_icon = "üîß" if module.get('is_system_module') else ""
            
            display_text = f"{status_icon} {system_icon} {module['name']} {error_icon}"
            callback_data = AdminModulesPanelNavigate(action="view", item_id=module['name']).pack()
            builder.button(text=display_text, callback_data=callback_data)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            callback_data=AdminMainMenuNavigate(target_section="main_admin").pack()
        )
    )
    
    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥—É
    return builder.as_markup()

async def get_module_details_keyboard(module_name: str, is_enabled: bool) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ"""
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    toggle_text = "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å" if is_enabled else "‚úÖ –í–∫–ª—é—á–∏—Ç—å"
    toggle_action = "disable" if is_enabled else "enable"
    builder.button(
        text=toggle_text,
        callback_data=AdminModulesPanelNavigate(action="toggle", item_id=module_name).pack()
    )
    
    # –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
    builder.button(
        text="üîß –î–µ–π—Å—Ç–≤–∏—è",
        callback_data=AdminModulesPanelNavigate(action="actions", item_id=module_name).pack()
    )
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –º–æ–¥—É–ª–µ–π
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –º–æ–¥—É–ª–µ–π",
            callback_data=AdminModulesPanelNavigate(action="list").pack()
        )
    )
    
    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥—É
    return builder.as_markup()

async def get_module_actions_keyboard(module_name: str, is_enabled: bool) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –º–æ–¥—É–ª–µ–º"""
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    toggle_text = "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å" if is_enabled else "‚úÖ –í–∫–ª—é—á–∏—Ç—å"
    toggle_action = "disable" if is_enabled else "enable"
    builder.button(
        text=toggle_text,
        callback_data=AdminModulesPanelNavigate(action="toggle", item_id=module_name).pack()
    )
    
    # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü (–æ–ø–∞—Å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ)
    builder.button(
        text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã",
        callback_data=AdminModulesPanelNavigate(action="clean_tables", item_id=module_name).pack()
    )
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ
    builder.button(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
        callback_data=AdminModulesPanelNavigate(action="view", item_id=module_name).pack()
    )
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –º–æ–¥—É–ª–µ–π
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –º–æ–¥—É–ª–µ–π",
            callback_data=AdminModulesPanelNavigate(action="list").pack()
        )
    )
    
    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥—É
    return builder.as_markup()