# core/admin/logs_viewer/handlers_logs.py
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger
import os
from pathlib import Path
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Any

from core.ui.callback_data_factories import AdminMainMenuNavigate, AdminLogsViewerNavigate
from core.admin.filters_admin import can_view_admin_panel_filter
from .keyboards_logs import get_logs_main_keyboard, get_log_file_keyboard, get_log_content_keyboard

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from core.services_provider import BotServicesProvider

logs_viewer_router = Router(name="sdb_admin_logs_viewer_handlers")
MODULE_NAME_FOR_LOG = "AdminLogsViewer"

logs_viewer_router.callback_query.filter(can_view_admin_panel_filter)

class FSMAdminLogsViewer(StatesGroup):
    viewing_log_content = State()

@logs_viewer_router.callback_query(AdminMainMenuNavigate.filter(F.target_section == "logs_view"))
async def cq_admin_logs_view_start(
    query: types.CallbackQuery,
    services_provider: 'BotServicesProvider'
):
    admin_user_id = query.from_user.id
    logger.info(f"[{MODULE_NAME_FOR_LOG}] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤.")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
    log_files = await _get_available_log_files(services_provider)
    
    text = "üìã **–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã**\n\n"
    if log_files:
        text += f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤: {len(log_files)}\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    else:
        text += "‚ùå –§–∞–π–ª—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    keyboard = await get_logs_main_keyboard(log_files)
    
    if query.message:
        try:
            await query.message.edit_text(text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", show_alert=True)
    else:
        await query.message.answer(text, reply_markup=keyboard)
    
    await query.answer()

@logs_viewer_router.callback_query(AdminLogsViewerNavigate.filter(F.action == "view_file"))
async def cq_admin_logs_view_file(
    query: types.CallbackQuery,
    callback_data: AdminLogsViewerNavigate,
    services_provider: 'BotServicesProvider'
):
    admin_user_id = query.from_user.id
    file_name = callback_data.payload
    
    logger.info(f"[{MODULE_NAME_FOR_LOG}] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞ {file_name}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    log_file_info = await _get_log_file_info(services_provider, file_name)
    
    if not log_file_info:
        await query.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    text = f"üìÑ **–§–∞–π–ª –ª–æ–≥–æ–≤: {file_name}**\n\n"
    text += f"üìä –†–∞–∑–º–µ—Ä: {log_file_info['size_formatted']}\n"
    text += f"üìÖ –ò–∑–º–µ–Ω–µ–Ω: {log_file_info['modified_formatted']}\n"
    text += f"üìù –°—Ç—Ä–æ–∫: {log_file_info['lines_count']}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    keyboard = await get_log_file_keyboard(file_name)
    
    if query.message:
        try:
            await query.message.edit_text(text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", show_alert=True)
    
    await query.answer()

@logs_viewer_router.callback_query(AdminLogsViewerNavigate.filter(F.action == "view_content"))
async def cq_admin_logs_view_content(
    query: types.CallbackQuery,
    callback_data: AdminLogsViewerNavigate,
    services_provider: 'BotServicesProvider',
    state: FSMContext
):
    admin_user_id = query.from_user.id
    file_name = callback_data.payload
    
    logger.info(f"[{MODULE_NAME_FOR_LOG}] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {file_name}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫)
    log_content = await _get_log_file_content(services_provider, file_name, lines_count=50)
    
    if not log_content:
        await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª", show_alert=True)
        return
    
    text = f"üìÑ **–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: {file_name}**\n\n"
    text += f"```\n{log_content}\n```"
    
    keyboard = await get_log_content_keyboard(file_name)
    
    if query.message:
        try:
            await query.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ª–æ–≥–æ–≤: {e}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ Markdown
            text = f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: {file_name}\n\n{log_content}"
            await query.message.edit_text(text, reply_markup=keyboard)
    
    await query.answer()

@logs_viewer_router.callback_query(AdminLogsViewerNavigate.filter(F.action == "download"))
async def cq_admin_logs_download(
    query: types.CallbackQuery,
    callback_data: AdminLogsViewerNavigate,
    services_provider: 'BotServicesProvider'
):
    admin_user_id = query.from_user.id
    file_name = callback_data.payload
    
    logger.info(f"[{MODULE_NAME_FOR_LOG}] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ {file_name}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    log_file_path = await _get_log_file_path(services_provider, file_name)
    
    if not log_file_path or not log_file_path.exists():
        await query.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await query.message.answer_document(
            types.BufferedInputFile(
                log_file_path.read_bytes(),
                filename=file_name
            ),
            caption=f"üìÑ –§–∞–π–ª –ª–æ–≥–æ–≤: {file_name}"
        )
        await query.answer("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞", show_alert=True)

@logs_viewer_router.callback_query(AdminLogsViewerNavigate.filter(F.action == "back_to_main"))
async def cq_admin_logs_back_to_main(
    query: types.CallbackQuery,
    services_provider: 'BotServicesProvider'
):
    admin_user_id = query.from_user.id
    logger.info(f"[{MODULE_NAME_FOR_LOG}] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_user_id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –ª–æ–≥–æ–≤")
    
    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∏–∑ cq_admin_logs_view_start
    log_files = await _get_available_log_files(services_provider)
    
    text = "üìã **–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã**\n\n"
    if log_files:
        text += f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤: {len(log_files)}\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    else:
        text += "‚ùå –§–∞–π–ª—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    keyboard = await get_logs_main_keyboard(log_files)
    
    if query.message:
        try:
            await query.message.edit_text(text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –ª–æ–≥–æ–≤: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", show_alert=True)
    
    await query.answer()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def _get_available_log_files(services_provider: 'BotServicesProvider') -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤"""
    try:
        log_dir = services_provider.config.core.project_data_path / "logs"
        if not log_dir.exists():
            return []
        
        log_files = []
        for file_path in log_dir.glob("*.log"):
            try:
                stat = file_path.stat()
                log_files.append({
                    'name': file_path.name,
                    'size': stat.st_size,
                    'modified': datetime.fromtimestamp(stat.st_mtime),
                    'size_formatted': _format_size(stat.st_size),
                    'modified_formatted': datetime.fromtimestamp(stat.st_mtime).strftime('%d.%m.%Y %H:%M')
                })
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ {file_path}: {e}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        log_files.sort(key=lambda x: x['modified'], reverse=True)
        return log_files
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤: {e}")
        return []

async def _get_log_file_info(services_provider: 'BotServicesProvider', file_name: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –ª–æ–≥–æ–≤"""
    try:
        log_file_path = await _get_log_file_path(services_provider, file_name)
        if not log_file_path or not log_file_path.exists():
            return None
        
        stat = log_file_path.stat()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
        try:
            with open(log_file_path, 'r', encoding='utf-8') as f:
                lines_count = sum(1 for _ in f)
        except Exception:
            lines_count = 0
        
        return {
            'name': file_name,
            'size': stat.st_size,
            'modified': datetime.fromtimestamp(stat.st_mtime),
            'size_formatted': _format_size(stat.st_size),
            'modified_formatted': datetime.fromtimestamp(stat.st_mtime).strftime('%d.%m.%Y %H:%M'),
            'lines_count': lines_count
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ {file_name}: {e}")
        return None

async def _get_log_file_content(services_provider: 'BotServicesProvider', file_name: str, lines_count: int = 50) -> Optional[str]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏)"""
    try:
        log_file_path = await _get_log_file_path(services_provider, file_name)
        if not log_file_path or not log_file_path.exists():
            return None
        
        with open(log_file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
        if len(lines) > lines_count:
            lines = lines[-lines_count:]
        
        return ''.join(lines)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ {file_name}: {e}")
        return None

async def _get_log_file_path(services_provider: 'BotServicesProvider', file_name: str) -> Optional[Path]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤"""
    try:
        log_dir = services_provider.config.core.project_data_path / "logs"
        log_file_path = log_dir / file_name
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤ (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
        if not log_file_path.resolve().is_relative_to(log_dir.resolve()):
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –≤–Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤: {file_name}")
            return None
        
        return log_file_path
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É {file_name}: {e}")
        return None

def _format_size(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞"""
    if size_bytes == 0:
        return "0 B"
    
    size_names = ["B", "KB", "MB", "GB"]
    i = 0
    while size_bytes >= 1024 and i < len(size_names) - 1:
        size_bytes /= 1024.0
        i += 1
    
    return f"{size_bytes:.1f} {size_names[i]}"