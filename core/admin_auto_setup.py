# core/admin_auto_setup.py

from typing import TYPE_CHECKING
from loguru import logger
from sqlalchemy import select
from datetime import datetime, timezone

from core.database.core_models import User as DBUser, Role as DBRole
from core.rbac.service import DEFAULT_ROLE_ADMIN

if TYPE_CHECKING:
    from core.services_provider import BotServicesProvider


class AdminAutoSetup:
    def __init__(self, services_provider: 'BotServicesProvider'):
        self._services = services_provider
        self._logger = logger.bind(service="AdminAutoSetup")

    async def ensure_super_admin_exists(self) -> bool:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        """
        try:
            super_admin_id = getattr(self._services.config.core, 'super_admin_telegram_id', None)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            import os
            env_super_admin_id = os.getenv('SUPER_ADMIN_TELEGRAM_ID')
            if env_super_admin_id:
                try:
                    super_admin_id = int(env_super_admin_id)
                except ValueError:
                    self._logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π SUPER_ADMIN_TELEGRAM_ID –≤ .env: {env_super_admin_id}")
                    return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º config.yaml
            if not super_admin_id:
                admin_config = getattr(self._services.config, 'admin', None)
                if admin_config:
                    super_admin_id = getattr(admin_config, 'super_admin_telegram_id', None)

            if not super_admin_id or super_admin_id == 123456789:  # –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                self._logger.warning("–°—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –£–∫–∞–∂–∏—Ç–µ SUPER_ADMIN_TELEGRAM_ID –≤ .env –∏–ª–∏ admin.super_admin_telegram_id –≤ config.yaml")
                return False

            async with self._services.db.get_session() as session:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                existing_user = await session.execute(
                    select(DBUser).where(DBUser.telegram_id == super_admin_id)
                )
                user = existing_user.scalars().first()

                if user:
                    self._logger.info(f"–°—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: TG ID {super_admin_id}, DB ID {user.id}")
                    
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –Ω–µ–≥–æ –µ—Å—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    if hasattr(self._services, 'rbac') and self._services.rbac:
                        has_admin_role = await session.execute(
                            select(DBRole)
                            .join(DBUser.roles)
                            .where(DBUser.id == user.id)
                            .where(DBRole.name == DEFAULT_ROLE_ADMIN)
                        )
                        
                        if not has_admin_role.scalars().first():
                            # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                            await self._services.rbac.assign_role_to_user(session, user, DEFAULT_ROLE_ADMIN)
                            await session.commit()
                            self._logger.info(f"–†–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é TG ID {super_admin_id}")
                    
                    return True

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                self._logger.info(f"–°–æ–∑–¥–∞—é —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å TG ID: {super_admin_id}")
                
                new_admin = DBUser(
                    telegram_id=super_admin_id,
                    username=f"super_admin_{super_admin_id}",
                    username_lower=f"super_admin_{super_admin_id}",
                    first_name="Super",
                    last_name="Admin",
                    preferred_language_code="ru",
                    is_active=True,
                    is_bot_blocked=False,
                    last_activity_at=datetime.now(timezone.utc),
                    created_at=datetime.now(timezone.utc)
                )
                
                session.add(new_admin)
                await session.flush([new_admin])  # –ü–æ–ª—É—á–∞–µ–º ID
                
                # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                if hasattr(self._services, 'rbac') and self._services.rbac:
                    await self._services.rbac.assign_role_to_user(session, new_admin, DEFAULT_ROLE_ADMIN)
                
                await session.commit()
                
                self._logger.success(f"‚úÖ –°—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: TG ID {super_admin_id}, DB ID {new_admin.id}")
                return True

        except Exception as e:
            self._logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}", exc_info=True)
            return False

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞"""
        self._logger.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏—è
        auto_create = True
        
        try:
            admin_config = getattr(self._services.config, 'admin', None)
            if admin_config:
                auto_create = getattr(admin_config, 'auto_create_super_admin', True)
        except:
            pass
            
        if auto_create:
            success = await self.ensure_super_admin_exists()
            if success:
                self._logger.info("‚úÖ –°—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            else:
                self._logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        else:
            self._logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
