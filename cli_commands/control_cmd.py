# cli_commands/control_cmd.py

import typer
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.columns import Columns 
from rich.text import Text
import os
import signal
import time
import subprocess
from pathlib import Path
import sys
import asyncio
from typing import Optional, List, Tuple as TypingTuple, Any 

try:
    import psutil
except ImportError:
    psutil = None

from datetime import datetime, timedelta

from .cli_utils import get_sdb_services_for_cli

console = Console()
PID_FILENAME = "sdb_bot.pid"
control_app = typer.Typer(name="control", help="üö¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–º Telegram-–±–æ—Ç–∞ SDB.", rich_markup_mode="rich")

def _get_pid_file_path() -> Path:
    from core.app_settings import settings
    project_data_dir = Path(settings.core.project_data_path)
    return project_data_dir / PID_FILENAME

def _read_pid_from_file(pid_file: Path) -> Optional[int]:
    if not pid_file.is_file(): return None
    try:
        with open(pid_file, "r") as f: pid_str = f.read().strip()
        if not pid_str.isdigit():
            sys.stderr.write(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: PID-—Ñ–∞–π–ª {pid_file} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{pid_str}'.\n")
            return None
        return int(pid_str)
    except Exception as e:
        sys.stderr.write(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è PID –∏–∑ —Ñ–∞–π–ª–∞ {pid_file}: {e}\n")
        return None

def _is_process_running(pid: int) -> bool:
    if psutil:
        try: return psutil.pid_exists(pid)
        except Exception: pass
            
    if sys.platform != "win32":
        try:
            os.kill(pid, 0)
            return True
        except OSError: 
            return False
    else: 
        try:
            result = subprocess.run(
                ['tasklist', '/FI', f'PID eq {pid}'], 
                capture_output=True, text=True, check=False, 
                creationflags=getattr(subprocess, 'CREATE_NO_WINDOW', 0)
            )
            return str(pid) in result.stdout
        except FileNotFoundError:
            return False 
        except Exception:
            return False

async def _get_total_users_count_cli() -> Optional[int]:
    settings_obj, db_m, _ = None, None, None
    try:
        settings_obj, db_m, _ = await get_sdb_services_for_cli(init_db=True)
        if not db_m:
            return None
        
        from core.database.core_models import User
        from sqlalchemy import select, func as sql_func

        async with db_m.get_session() as session:
            count_stmt = select(sql_func.count(User.id))
            total_users_result = await session.execute(count_stmt)
            return total_users_result.scalar_one_or_none() or 0
    except Exception: 
        return None
    finally:
        if db_m:
            await db_m.dispose()

@control_app.command()
def status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ SDB –±–æ—Ç–µ."""
    from core.app_settings import settings 
    from aiogram import __version__ as aiogram_version

    pid_file = _get_pid_file_path()
    pid = _read_pid_from_file(pid_file)

    status_text_elements: List[Text] = [] 
    process_info_data: Optional[List[TypingTuple[str, str]]] = None 

    is_running_flag = False
    if pid and _is_process_running(pid):
        is_running_flag = True
        status_text_elements.append(Text.assemble(("‚óè SDB –±–æ—Ç –∑–∞–ø—É—â–µ–Ω ", "green"), (f"(PID: {pid})", "green bold")))
        if psutil:
            try:
                p = psutil.Process(pid)
                process_info_data = [] 
                with p.oneshot(): 
                    create_time = datetime.fromtimestamp(p.create_time())
                    uptime_delta = datetime.now() - create_time
                    days, remainder = divmod(uptime_delta.total_seconds(), 86400)
                    hours, remainder = divmod(remainder, 3600)
                    minutes, seconds = divmod(remainder, 60)
                    uptime_str_parts = []
                    if days > 0: uptime_str_parts.append(f"{int(days)}–¥")
                    if hours > 0: uptime_str_parts.append(f"{int(hours)}—á")
                    if minutes > 0: uptime_str_parts.append(f"{int(minutes)}–º")
                    uptime_str_parts.append(f"{int(seconds)}—Å")
                    
                    process_info_data.append(("–ó–∞–ø—É—â–µ–Ω:", create_time.strftime("%Y-%m-%d %H:%M:%S")))
                    process_info_data.append(("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:", " ".join(uptime_str_parts) or "0—Å"))
                    process_info_data.append(("CPU –Ω–∞–≥—Ä—É–∑–∫–∞:", f"{p.cpu_percent(interval=0.1):.1f}%"))
                    rss_mb = p.memory_info().rss / (1024 * 1024)
                    process_info_data.append(("–ü–∞–º—è—Ç—å (RSS):", f"{rss_mb:.2f} MB"))
                    try: process_info_data.append(("–ö–æ–ª-–≤–æ –ø–æ—Ç–æ–∫–æ–≤:", str(p.num_threads())))
                    except (psutil.Error, AttributeError, NotImplementedError): pass
                    process_info_data.append(("–°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞:", str(p.status())))
                    try: process_info_data.append(("–ó–∞–ø—É—â–µ–Ω –æ—Ç:", str(p.username())))
                    except (psutil.Error, AttributeError, NotImplementedError): pass
            except psutil.NoSuchProcess:
                is_running_flag = False 
                status_text_elements.clear() 
                status_text_elements.append(Text(f"‚ö† PID-—Ñ–∞–π–ª ({pid_file}) –¥–ª—è PID {pid} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø—Ä–æ—Ü–µ—Å—Å —É–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω (—É—Å—Ç–∞—Ä–µ–ª).", style="yellow"))
                if pid_file.is_file(): status_text_elements.append(Text(f"  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å PID-—Ñ–∞–π–ª: rm {pid_file}", style="cyan"))
            except psutil.AccessDenied:
                status_text_elements.append(Text(f"‚úó –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ PID {pid}.", style="red"))
            except Exception as e_psutil:
                status_text_elements.append(Text(f"‚úó –û—à–∏–±–∫–∞ psutil –¥–ª—è PID {pid}: {e_psutil}", style="red"))
        else: 
             status_text_elements.append(Text("(–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 'psutil' –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ)", style="dim"))
    elif pid: 
        status_text_elements.append(Text(f"‚ö† SDB –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω (PID-—Ñ–∞–π–ª {pid_file} (PID {pid}) —É—Å—Ç–∞—Ä–µ–ª).", style="yellow"))
        if pid_file.is_file(): status_text_elements.append(Text(f"  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å PID-—Ñ–∞–π–ª: rm {pid_file}", style="cyan"))
    else: 
        status_text_elements.append(Text("‚óé SDB –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω (PID-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω).", style="red"))

    status_panel_content = Text("\n").join(status_text_elements)
    status_panel = Panel(status_panel_content, title="[bold green]–°—Ç–∞—Ç—É—Å –ë–æ—Ç–∞[/bold green]", border_style="green", expand=False, padding=(1,2))
    
    process_panel_renderable = None
    if process_info_data and is_running_flag: 
        proc_table = Table(show_header=False, box=None, padding=(0, 1), show_edge=False)
        proc_table.add_column(style="dim blue", justify="right", min_width=18, max_width=20) 
        proc_table.add_column(min_width=20)
        for key, value in process_info_data:
            proc_table.add_row(key, value)
        process_panel_renderable = Panel(proc_table, title="[bold blue]–ü—Ä–æ—Ü–µ—Å—Å SDB[/bold blue]", border_style="blue", expand=False, padding=1)

    sdb_info_data_list: List[TypingTuple[str, Any]] = []
    sdb_info_data_list.append(("–í–µ—Ä—Å–∏—è SDB Core:", settings.core.sdb_version))
    sdb_info_data_list.append(("–í–µ—Ä—Å–∏—è Aiogram:", aiogram_version))
    sdb_info_data_list.append(("–¢–∏–ø –ë–î:", settings.db.type.upper()))
    sdb_info_data_list.append(("–¢–∏–ø –∫—ç—à–∞:", settings.cache.type.capitalize()))
    
    try:
        from core.module_loader import ModuleLoader
        from core.services_provider import BotServicesProvider 
        temp_bsp = BotServicesProvider(settings=settings)
        loader = ModuleLoader(settings=settings, services_provider=temp_bsp)
        loader.scan_available_modules()
        loader._load_enabled_module_names() 
        sdb_info_data_list.append(("–ù–∞–π–¥–µ–Ω–æ –º–æ–¥—É–ª–µ–π:", str(len(loader.available_modules))))
        sdb_info_data_list.append(("–ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π:", str(len(loader.enabled_module_names))))
    except Exception: 
        sdb_info_data_list.append(("–ú–æ–¥—É–ª–∏:", Text("–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞", style="yellow")))
    
    total_users = asyncio.run(_get_total_users_count_cli()) 
    user_count_text_val = str(total_users) if total_users is not None else Text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å", style="yellow")
    sdb_info_data_list.append(("–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î:", user_count_text_val))

    sdb_info_table = Table(show_header=False, box=None, padding=(0,1), show_edge=False)
    sdb_info_table.add_column(style="dim magenta", justify="right", min_width=26) 
    sdb_info_table.add_column(min_width=25)
    for key, value in sdb_info_data_list:
        sdb_info_table.add_row(key, value)
    sdb_info_panel = Panel(sdb_info_table, title="[bold magenta]–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SDB[/bold magenta]", border_style="magenta", expand=False, padding=1)

    console.print(status_panel) 
    
    columns_content = []
    if process_panel_renderable:
        columns_content.append(process_panel_renderable)
    columns_content.append(sdb_info_panel)
        
    if columns_content: 
        console.print(Columns(columns_content, expand=True, equal=False, padding=(0,2), column_first=False))


@control_app.command()
def stop(
    force: bool = typer.Option(False, "--force", "-f", help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (SIGKILL), –µ—Å–ª–∏ SIGTERM –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (–û–ü–ê–°–ù–û)."),
    timeout: int = typer.Option(5, "--timeout", "-t", help="–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (—Å–µ–∫) –ø–æ—Å–ª–µ SIGTERM –ø–µ—Ä–µ–¥ SIGKILL (–µ—Å–ª–∏ --force).", min=1, max=60)
):
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SDB –±–æ—Ç–∞."""
    pid_file = _get_pid_file_path()
    pid = _read_pid_from_file(pid_file)

    if not pid:
        console.print("[yellow]SDB –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω (PID-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω).[/yellow]")
        return 

    if not _is_process_running(pid):
        console.print(f"[yellow]SDB –±–æ—Ç (PID: {pid} –∏–∑ —Ñ–∞–π–ª–∞) —É–∂–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω.[/yellow]")
        if pid_file.is_file(): 
            try:
                pid_file.unlink()
                console.print(f"–£—Å—Ç–∞—Ä–µ–≤—à–∏–π PID-—Ñ–∞–π–ª {pid_file} —É–¥–∞–ª–µ–Ω.")
            except Exception as e_unlink:
                console.print(f"[red]–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–π PID-—Ñ–∞–π–ª {pid_file}: {e_unlink}[/red]")
        return

    console.print(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SDB –±–æ—Ç–∞ (PID: {pid})...")
    
    if sys.platform == "win32":
        console.print("[yellow]–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è Windows –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –≤—Ä—É—á–Ω—É—é (taskkill /F /PID {pid}).[/yellow]")
        raise typer.Exit(code=1) 

    try:
        os.kill(pid, signal.SIGTERM) 
        console.print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM –ø—Ä–æ—Ü–µ—Å—Å—É {pid}.")
        
        for i in range(timeout):
            time.sleep(1) 
            if not _is_process_running(pid):
                console.print(f"[green]SDB –±–æ—Ç (PID: {pid}) —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—á–µ—Ä–µ–∑ {i+1} —Å–µ–∫).[/green]")
                if pid_file.is_file(): pid_file.unlink(missing_ok=True) 
                return 
        
        if _is_process_running(pid):
            if force:
                console.print(f"[yellow]–ü—Ä–æ—Ü–µ—Å—Å {pid} –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω –ø–æ—Å–ª–µ {timeout} —Å–µ–∫. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ (SIGKILL)...[/yellow]")
                os.kill(pid, signal.SIGKILL)
                time.sleep(0.1) 
                if not _is_process_running(pid):
                    console.print(f"[green]SDB –±–æ—Ç (PID: {pid}) –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (SIGKILL).[/green]")
                else: 
                    console.print(f"[red]‚úó SDB –±–æ—Ç (PID: {pid}) –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –¥–∞–∂–µ –ø–æ—Å–ª–µ SIGKILL. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é.[/red]")
                    raise typer.Exit(code=1) 
                if pid_file.is_file(): pid_file.unlink(missing_ok=True)
            else:
                console.print(f"[red]‚úó SDB –±–æ—Ç (PID: {pid}) –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ø–æ—Å–ª–µ SIGTERM ({timeout} —Å–µ–∫).[/red]")
                console.print(f"  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ './sdb control stop --force' –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –≤—Ä—É—á–Ω—É—é (kill {pid}).")
                raise typer.Exit(code=1) 
        else: 
            console.print(f"[green]SDB –±–æ—Ç (PID: {pid}) —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.[/green]")
            if pid_file.is_file(): pid_file.unlink(missing_ok=True)

    except ProcessLookupError: 
        console.print(f"[green]SDB –±–æ—Ç (PID: {pid}) —É–∂–µ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.[/green]")
        if pid_file.is_file(): pid_file.unlink(missing_ok=True)
    except typer.Exit: 
        raise 
    except Exception as e:
        console.print(f"[red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}[/red]")
        raise typer.Exit(code=1)


@control_app.command()
def restart(
    force_stop: bool = typer.Option(False, "--force-stop", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å --force –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º."),
    stop_timeout: int = typer.Option(5, "--stop-timeout", help="–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (—Å–µ–∫) –¥–ª—è –∫–æ–º–∞–Ω–¥—ã stop.", min=1, max=60),
    background: bool = typer.Option(True, "--background/--no-background", "-b", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."),
    debug: bool = typer.Option(False, "--debug", "-d", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å SDB –±–æ—Ç–∞: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω) –∏ –∑–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ—Ç."""
    console.print(Panel("[blue]–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ SDB –±–æ—Ç–∞...[/blue]", expand=False))
    
    console.print("\n[cyan]–®–∞–≥ 1: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω)...[/cyan]")
    stop_failed = False
    
    sdb_executable_str: Optional[str] = None
    if Path(sys.argv[0]).is_absolute():
        sdb_executable_str = sys.argv[0]
    else:
        sdb_script_in_bin = Path(sys.executable).parent / Path(sys.argv[0]).name
        if sdb_script_in_bin.exists() and (os.access(sdb_script_in_bin, os.X_OK) or str(sdb_script_in_bin).endswith(".py")):
            sdb_executable_str = str(sdb_script_in_bin)
        else: 
            sdb_py_in_cwd = Path.cwd() / "sdb.py"
            sdb_in_cwd = Path.cwd() / "sdb"
            if sdb_py_in_cwd.exists():
                sdb_executable_str = str(sdb_py_in_cwd)
            elif sdb_in_cwd.exists() and os.access(sdb_in_cwd, os.X_OK):
                sdb_executable_str = str(sdb_in_cwd)
    
    if not sdb_executable_str:
        console.print(f"[bold red]–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª SDB CLI. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ sys.argv[0]: {sys.argv[0]}[/bold red]")
        raise typer.Exit(1)

    try:
        stop_command_args = [str(sys.executable), sdb_executable_str, "control", "stop", f"--timeout={stop_timeout}"]
        if force_stop:
            stop_command_args.append("--force")
        
        console.print(f"[dim]–í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {' '.join(stop_command_args)}[/dim]")
        stop_process_result = subprocess.run(stop_command_args, capture_output=True, text=True, encoding='utf-8')

        # –ü–µ—á–∞—Ç–∞–µ–º stdout –∏ stderr –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, Rich —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π –≤–Ω—É—Ç—Ä–∏ –Ω–∏—Ö
        if stop_process_result.stdout:
            console.print(f"[dim cyan]–í—ã–≤–æ–¥ 'stop':[/]\n{stop_process_result.stdout.strip()}")
        if stop_process_result.stderr:
            console.print(f"[dim yellow]–û—à–∏–±–∫–∏ –æ—Ç 'stop':[/]\n{stop_process_result.stderr.strip()}")

        if stop_process_result.returncode != 0:
            console.print(f"[bold red]–û—à–∏–±–∫–∞ –Ω–∞ —Ñ–∞–∑–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–∫–æ–¥: {stop_process_result.returncode}).[/bold red]")
            if not typer.confirm("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –∑–∞–ø—É—Å–∫–∞, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏?", default=False):
                console.print("[bold yellow]–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.[/bold yellow]")
                raise typer.Exit(code=1)
            console.print("[yellow]–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...[/yellow]")
            stop_failed = True
        else:
            console.print("[green]–§–∞–∑–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω).[/green]")

    except Exception as e_stop_wrapper:
        console.print(Text.assemble(("[bold red]–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–∞ 'stop': ", "bold red"), Text(str(e_stop_wrapper))))
        if not typer.confirm("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –∑–∞–ø—É—Å–∫–∞, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É?", default=False):
            console.print("[bold yellow]–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.[/bold yellow]")
            raise typer.Exit(code=1)
        console.print("[yellow]–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞...[/yellow]")
        stop_failed = True

    if not stop_failed:
        console.print("[dim]–û–∂–∏–¥–∞–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º...[/dim]")
        time.sleep(1)

    console.print("\n[cyan]–®–∞–≥ 2: –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞...[/cyan]")
    try:
        start_command_args = [str(sys.executable), sdb_executable_str, "start"]
        if background:
            start_command_args.append("--background")
        if debug:
            start_command_args.append("--debug")

        console.print(f"[dim]–í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞: {' '.join(start_command_args)}[/dim]")
        
        if background:
            subprocess.Popen(start_command_args)
            console.print("[green]–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.[/green]")
        else:
            start_process_result = subprocess.run(start_command_args, capture_output=True, text=True, encoding='utf-8')
            if start_process_result.stdout:
                 console.print(f"[dim cyan]–í—ã–≤–æ–¥ 'start':[/]\n{start_process_result.stdout.strip()}")
            if start_process_result.stderr: 
                 console.print(f"[dim yellow]–í—ã–≤–æ–¥ (–≤–æ–∑–º–æ–∂–Ω–æ, –æ—à–∏–±–∫–∏) –æ—Ç 'start':[/]\n{start_process_result.stderr.strip()}")
            if start_process_result.returncode != 0:
                console.print(f"[bold red]–û—à–∏–±–∫–∞ –Ω–∞ —Ñ–∞–∑–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (–∫–æ–¥: {start_process_result.returncode}).[/bold red]")
                raise typer.Exit(code=1)
            console.print("[green]–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–∑–≤–∞–Ω–∞ (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º).[/green]")

    except Exception as e_start_wrapper:
        console.print(Text.assemble(("[bold red]–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –∑–∞–ø—É—Å–∫–∞: ", "bold red"), Text(str(e_start_wrapper))))
        raise typer.Exit(code=1)

    console.print("\n[bold green]–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.[/bold green]")
    if background:
        console.print("  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ —á–µ—Ä–µ–∑: [cyan]./sdb control status[/cyan]")