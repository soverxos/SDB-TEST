# cli_commands/license_cmd.py
import typer
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from dataclasses import asdict
import asyncio

from core.license_manager import get_license_manager, LicenseType

console = Console()

license_app = typer.Typer(
    name="license",
    help="üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–µ–π SwiftDevBot.",
    rich_markup_mode="rich"
)

async def update_stats_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ–±–∏—Ä–∞–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
    from core.services_provider import BotServicesProvider
    from core.app_settings import settings
    from sqlalchemy import select, func

    stats = {}
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î –∏ –º–æ–¥—É–ª—è–º
        services = BotServicesProvider(settings)
        await services.setup_services()

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        if services.db:
            async with services.db.get_session() as session:
                from core.database.core_models import User
                user_count = await session.scalar(select(func.count(User.id)))
                stats['max_users'] = user_count or 0
        
        # –ú–æ–¥—É–ª–∏
        if services.modules:
            stats['max_modules'] = len(services.modules.enabled_plugin_names)

        await services.close_services()
    except Exception as e:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}[/bold red]")

    return stats


@license_app.command(name="info", help="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏ –ª–∏–º–∏—Ç–∞—Ö.")
def show_license_info():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏."""
    console.print("[cyan]–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è...[/cyan]")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
    try:
        updated_stats = asyncio.run(update_stats_async())
        manager = get_license_manager()
        manager.update_usage_stats(**updated_stats)
    except Exception as e:
        console.print(f"[bold red]–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}[/bold red]")
        manager = get_license_manager() # –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä

    info = manager.license_info
    
    title_style = {
        LicenseType.LITE: "[bold cyan]üÜì SwiftDevBot LITE[/bold cyan]",
        LicenseType.PRO: "[bold yellow]üöÄ SwiftDevBot PRO[/bold yellow]",
        LicenseType.PRO_PLUS: "[bold magenta]üíé SwiftDevBot PRO+[/bold magenta]",
    }
    
    console.print(Panel.fit(title_style.get(info.type, "–°—Ç–∞—Ç—É—Å –ª–∏—Ü–µ–Ω–∑–∏–∏"), border_style="blue", title_align="left"))
    
    info_table = Table(show_header=False, box=None, padding=(0, 1))
    info_table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan", width=18)
    info_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ")
    
    info_table.add_row("–¢–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏", info.type.value.upper())
    if info.key:
        info_table.add_row("–ö–ª—é—á", f"****-****-{info.key[-4:]}")
    if info.activated_at:
        info_table.add_row("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞", info.activated_at.strftime('%Y-%m-%d %H:%M:%S'))
    
    console.print(info_table)

    console.print("\n[bold]‚öñÔ∏è –õ–∏–º–∏—Ç—ã –∏ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:[/bold]")
    limits_table = Table(box=None, padding=(0, 1))
    limits_table.add_column("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ", style="cyan")
    limits_table.add_column("–¢–µ–∫—É—â–µ–µ", style="yellow", justify="right")
    limits_table.add_column("–õ–∏–º–∏—Ç", style="green", justify="right")
    limits_table.add_column("–°—Ç–∞—Ç—É—Å", justify="center")

    limits_dict = asdict(info.limits)
    for limit_name, limit_value in limits_dict.items():
        if limit_name.startswith("max_"):
            current_value = manager.get_current_usage(limit_name)
            is_ok, limit = manager.check_limit(limit_name, current_value)
            status = "‚úÖ" if is_ok else "‚ö†Ô∏è"
            limit_str = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ" if limit == -1 else str(limit)
            limits_table.add_row(limit_name.replace("max_", "").replace("_", " ").capitalize(), str(current_value), limit_str, status)

    console.print(limits_table)
    
    console.print("\n[bold]üîß –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:[/bold]")
    features_table = Table(box=None, padding=(0, 1))
    features_table.add_column("–§—É–Ω–∫—Ü–∏—è", style="cyan")
    features_table.add_column("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å")
    
    for feature_name, _ in limits_dict.items():
        if feature_name.startswith("allow_"):
            is_available = manager.is_feature_available(feature_name)
            status = "[green]‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ[/green]" if is_available else "[red]‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ[/red]"
            features_table.add_row(feature_name.replace("allow_", "").replace("_", " ").capitalize(), status)
            
    console.print(features_table)

@license_app.command(name="activate", help="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é PRO –∏–ª–∏ PRO+.")
def activate_license_key(
    key: str = typer.Argument(..., help="–õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞."""
    console.print(Panel(f"–ü–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞: [yellow]****-{key[-4:]}[/yellow]", title="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏"))
    manager = get_license_manager()
    
    if manager.activate_license(key):
        console.print("\n[bold green]‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞![/bold green]")
        console.print("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞, —á—Ç–æ–±—ã –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É: [cyan]./sdb restart[/cyan]")
        show_license_info()
    else:
        console.print("\n[bold red]‚ùå –û—à–∏–±–∫–∞: –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.[/bold red]")