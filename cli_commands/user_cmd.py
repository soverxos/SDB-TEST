# cli_commands/user_cmd.py

import typer
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.text import Text # –î–ª—è –±–æ–ª–µ–µ –≥–∏–±–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
import asyncio
from typing import Optional, List, Any, Tuple

from .cli_utils import get_sdb_services_for_cli # –ù–∞—à–∞ —É—Ç–∏–ª–∏—Ç–∞

console = Console()
user_app = typer.Typer(
    name="user",
    help="üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ SDB –∏ –∏—Ö —Ä–æ–ª—è–º–∏ (RBAC).",
    rich_markup_mode="rich"
)

# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥ ---

async def _list_users_cmd_async(limit: int, offset: int, sort_by: str, sort_desc: bool):
    panel_title = "[bold blue]–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π SwiftDevBot[/]"
    settings, db_m, _ = None, None, None # rbac_s –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
    try:
        settings, db_m, _ = await get_sdb_services_for_cli(init_db=True, init_rbac=False)
        if not (settings and db_m):
            console.print("[bold red]–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å DBManager –¥–ª—è –∫–æ–º–∞–Ω–¥—ã 'user list'.[/]")
            raise typer.Exit(code=1)

        async with db_m.get_session() as session:
            from core.database.core_models import User
            from sqlalchemy import select, func as sql_func, desc, asc
            from sqlalchemy.orm import selectinload

            count_stmt = select(sql_func.count(User.id))
            total_users_result = await session.execute(count_stmt)
            total_users = total_users_result.scalar_one_or_none() or 0

            if total_users == 0:
                console.print(Panel("[yellow]–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.[/yellow]", title=panel_title))
                return

            # –õ–æ–≥–∏–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            order_column = getattr(User, sort_by, User.id) # –î–µ—Ñ–æ–ª—Ç –ø–æ id, –µ—Å–ª–∏ –∞—Ç—Ä–∏–±—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
            order_expression = desc(order_column) if sort_desc else asc(order_column)

            stmt = (
                select(User)
                .options(selectinload(User.roles))
                .order_by(order_expression)
                .limit(limit)
                .offset(offset)
            )
            result = await session.execute(stmt)
            users: List[User] = list(result.scalars().all())

            if not users and total_users > 0 : # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –Ω–æ –Ω–µ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                console.print(Panel(
                    f"[yellow]–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (—Å–º–µ—â–µ–Ω–∏–µ {offset}, –ª–∏–º–∏—Ç {limit}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç, –Ω–æ –≤—Å–µ–≥–æ –≤ –ë–î: {total_users}.[/yellow]",
                    title=panel_title
                ))
                return
            elif not users: # –≠—Ç–æ —É—Å–ª–æ–≤–∏–µ —É–∂–µ –ø–æ–∫—Ä—ã—Ç–æ –≤—ã—à–µ, –Ω–æ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
                console.print(Panel("[yellow]–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.[/yellow]", title=panel_title))
                return


            table_title = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ SDB (–ü–æ–∫–∞–∑–∞–Ω–æ: {len(users)} –∏–∑ {total_users}, –õ–∏–º–∏—Ç: {limit}, –°–º–µ—â–µ–Ω–∏–µ: {offset}, –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {sort_by} {'DESC' if sort_desc else 'ASC'})"
            table = Table(title=table_title, show_header=True, header_style="bold magenta", expand=True)
            table.add_column("DB ID", style="dim cyan", justify="right", no_wrap=True)
            table.add_column("TG ID", style="cyan", justify="right", no_wrap=True)
            table.add_column("–ü–æ–ª–Ω–æ–µ –ò–º—è", min_width=20)
            table.add_column("Username", style="yellow", no_wrap=True)
            table.add_column("–†–æ–ª–∏", min_width=15)
            table.add_column("–Ø–∑—ã–∫", justify="center", no_wrap=True)
            table.add_column("–ê–∫—Ç–∏–≤–µ–Ω", justify="center", no_wrap=True)
            table.add_column("–ë–æ—Ç –±–ª–æ–∫.", justify="center", no_wrap=True)
            table.add_column("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", no_wrap=True)
            table.add_column("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", no_wrap=True)

            for user_obj in users:
                roles_str = ", ".join(sorted([role.name for role in user_obj.roles])) if user_obj.roles else "-"
                active_str = "‚úÖ" if user_obj.is_active else "‚ùå"
                blocked_str = "üö´" if user_obj.is_bot_blocked else "‚úÖ"
                created_at_str = user_obj.created_at.strftime('%Y-%m-%d %H:%M') if user_obj.created_at else "-"
                last_activity_str = user_obj.last_activity_at.strftime('%Y-%m-%d %H:%M') if user_obj.last_activity_at else "-"

                table.add_row(
                    str(user_obj.id), str(user_obj.telegram_id), user_obj.full_name,
                    f"@{user_obj.username}" if user_obj.username else "-",
                    roles_str,
                    user_obj.preferred_language_code or "-",
                    active_str,
                    blocked_str,
                    created_at_str,
                    last_activity_str
                )
            console.print(Panel(table, title=panel_title, border_style="blue", padding=(1,1)))
    finally:
        if db_m: await db_m.dispose()

async def _find_user_interactive(session: Any, identifier: str) -> Optional[Any]: # User
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ username."""
    from core.database.core_models import User
    from sqlalchemy import select
    from sqlalchemy.orm import selectinload

    user: Optional[User] = None
    if identifier.isdigit():
        user_id_int = int(identifier)
        stmt = select(User).options(selectinload(User.roles)).where(User.telegram_id == user_id_int)
        result = await session.execute(stmt)
        user = result.scalars().first()
        if user: return user
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ TG ID, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ DB ID
        stmt_db_id = select(User).options(selectinload(User.roles)).where(User.id == user_id_int)
        result_db_id = await session.execute(stmt_db_id)
        user = result_db_id.scalars().first()
        if user: return user

    # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ ID, –∏—â–µ–º –ø–æ username (–±–µ–∑ @)
    username_to_search = identifier.lstrip('@')
    stmt_uname = select(User).options(selectinload(User.roles)).where(User.username_lower == username_to_search.lower())
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ username_lower –∏–ª–∏ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å ILIKE –¥–ª—è PostgreSQL/–¥—Ä—É–≥–∏—Ö –ë–î
    # –î–ª—è SQLite —ç—Ç–æ –±—É–¥–µ—Ç WHERE lower(username) = lower(:username_to_search)
    # –ß—Ç–æ–±—ã —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–ª–æ –∫—Ä–æ—Å—Å-–°–£–ë–î –±–µ–∑ ILIKE, –ª—É—á—à–µ –∏–º–µ—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ username_lower –∏–ª–∏ –¥–µ–ª–∞—Ç—å lower() –≤ –∑–∞–ø—Ä–æ—Å–µ
    # stmt_uname = select(User).options(selectinload(User.roles)).where(func.lower(User.username) == username_to_search.lower())
    result_uname = await session.execute(stmt_uname)
    user = result_uname.scalars().first()
    return user


async def _info_user_cmd_async(user_identifier: str):
    settings, db_m, _ = None, None, None # rbac_s –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è –∏–Ω—Ñ–æ
    try:
        settings, db_m, _ = await get_sdb_services_for_cli(init_db=True, init_rbac=False)
        if not (settings and db_m):
            console.print("[bold red]–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å DBManager –¥–ª—è –∫–æ–º–∞–Ω–¥—ã 'user info'.[/]")
            raise typer.Exit(code=1)

        async with db_m.get_session() as session:
            user = await _find_user_interactive(session, user_identifier)

            if not user:
                console.print(f"[bold red]–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º '{user_identifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.[/]")
                raise typer.Exit(code=1)
            
            panel_title = f"[bold blue]–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user.full_name} (TG ID: {user.telegram_id})[/]"
            info_text = Text()
            info_text.append(f"DB ID: {user.id}\n", style="bold")
            info_text.append(f"Telegram ID: {user.telegram_id}\n", style="bold")
            info_text.append(f"–ü–æ–ª–Ω–æ–µ –∏–º—è: {user.full_name}\n")
            info_text.append(f"Username: @{user.username}\n" if user.username else "Username: -\n")
            info_text.append(f"–Ø–∑—ã–∫ –±–æ—Ç–∞: {user.preferred_language_code or '(–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)'}\n")
            info_text.append(f"–ê–∫—Ç–∏–≤–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ: {'–î–∞ ‚úÖ' if user.is_active else '–ù–µ—Ç ‚ùå'}\n")
            info_text.append(f"–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {'–î–∞ üö´' if user.is_bot_blocked else '–ù–µ—Ç ‚úÖ'}\n")
            created_at_str = user.created_at.strftime('%Y-%m-%d %H:%M:%S %Z') if user.created_at and user.created_at.tzinfo else (user.created_at.strftime('%Y-%m-%d %H:%M:%S') if user.created_at else '-')
            updated_at_str = user.updated_at.strftime('%Y-%m-%d %H:%M:%S %Z') if user.updated_at and user.updated_at.tzinfo else (user.updated_at.strftime('%Y-%m-%d %H:%M:%S') if user.updated_at else '-')
            last_activity_str = user.last_activity_at.strftime('%Y-%m-%d %H:%M:%S %Z') if user.last_activity_at and user.last_activity_at.tzinfo else (user.last_activity_at.strftime('%Y-%m-%d %H:%M:%S') if user.last_activity_at else ' (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)')
            info_text.append(f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created_at_str}\n")
            info_text.append(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {updated_at_str}\n")
            info_text.append(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity_str}\n")
            roles_str = ", ".join(sorted([role.name for role in user.roles])) if user.roles else " (–Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π)"
            info_text.append(f"–†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {roles_str}\n", style="bold")
            
            console.print(Panel(info_text, title=panel_title, border_style="blue", padding=1))
    finally:
        if db_m: await db_m.dispose()

async def _list_roles_cmd_async():
    panel_title = "[bold blue]–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–æ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ SDB[/]"
    settings, db_m, rbac_s = None, None, None
    try:
        settings, db_m, rbac_s = await get_sdb_services_for_cli(init_db=True, init_rbac=True)
        if not (settings and db_m and rbac_s):
            console.print("[bold red]–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å DBManager –∏ RBACService –¥–ª—è –∫–æ–º–∞–Ω–¥—ã 'user roles'.[/]")
            raise typer.Exit(code=1)

        async with db_m.get_session() as session:
            from core.database.core_models import Role # Role —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ RBACService
            all_roles: List[Role] = await rbac_s.get_all_roles(session)

            if not all_roles:
                console.print(Panel("[yellow]–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π.[/yellow]", title=panel_title))
                return

            table = Table(title="–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–æ–ª–∏ SDB", show_header=True, header_style="bold magenta", expand=True)
            table.add_column("DB ID", style="dim cyan", justify="right", no_wrap=True)
            table.add_column("–ò–º—è –†–æ–ª–∏", style="cyan", min_width=15)
            table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", min_width=30, max_width=70, overflow="fold")
            
            for role_obj in all_roles:
                table.add_row(
                    str(role_obj.id), role_obj.name,
                    role_obj.description if role_obj.description else "-"
                )
            console.print(Panel(table, title=panel_title, border_style="blue", padding=(1,1)))
    finally:
        if db_m: await db_m.dispose()

async def _assign_role_cmd_async(user_identifier: str, role_name: str):
    console.print(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å [cyan]'{role_name}'[/] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é [cyan]'{user_identifier}'[/]...")
    settings, db_m, rbac_s = None, None, None
    try:
        settings, db_m, rbac_s = await get_sdb_services_for_cli(init_db=True, init_rbac=True)
        if not (settings and db_m and rbac_s):
            console.print("[bold red]–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è 'user assign-role'.[/]")
            raise typer.Exit(code=1)

        async with db_m.get_session() as session:
            user_obj = await _find_user_interactive(session, user_identifier)
            if not user_obj:
                console.print(f"[bold red]–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_identifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω.[/]")
                raise typer.Exit(code=1)
            
            if await rbac_s.assign_role_to_user(session, user_obj, role_name):
                await session.commit()
                console.print(f"[bold green]–†–æ–ª—å '{role_name}' —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_obj.telegram_id} (@{user_obj.username}).[/]")
            else:
                # RBACService –¥–æ–ª–∂–µ–Ω –±—ã–ª –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏
                console.print(f"[bold red]–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å '{role_name}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_obj.telegram_id}. "
                              "–í–æ–∑–º–æ–∂–Ω–æ, —Ä–æ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ (—Å–º. –ª–æ–≥–∏).[/]")
                # –ù–µ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å rollback –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ assign_role_to_user –º–æ–≥ –¥–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å –≤ —Å–µ—Å—Å–∏—é, –Ω–æ –Ω–µ UserRole
                raise typer.Exit(code=1)
    finally:
        if db_m: await db_m.dispose()

async def _remove_role_cmd_async(user_identifier: str, role_name: str):
    console.print(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–Ω—è—Ç—å —Ä–æ–ª—å [cyan]'{role_name}'[/] —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [cyan]'{user_identifier}'[/]...")
    settings, db_m, rbac_s = None, None, None
    try:
        settings, db_m, rbac_s = await get_sdb_services_for_cli(init_db=True, init_rbac=True)
        if not (settings and db_m and rbac_s):
            console.print("[bold red]–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è 'user remove-role'.[/]")
            raise typer.Exit(code=1)

        async with db_m.get_session() as session:
            user_obj = await _find_user_interactive(session, user_identifier)
            if not user_obj:
                console.print(f"[bold red]–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_identifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω.[/]")
                raise typer.Exit(code=1)

            if await rbac_s.remove_role_from_user(session, user_obj, role_name):
                await session.commit()
                console.print(f"[bold green]–†–æ–ª—å '{role_name}' —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_obj.telegram_id} (@{user_obj.username}).[/]")
            else:
                console.print(f"[bold red]–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å —Ä–æ–ª—å '{role_name}' —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_obj.telegram_id}. "
                              "–í–æ–∑–º–æ–∂–Ω–æ, —Ä–æ–ª—å –Ω–µ –±—ã–ª–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ (—Å–º. –ª–æ–≥–∏).[/]")
                raise typer.Exit(code=1)
    finally:
        if db_m: await db_m.dispose()


# --- –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è Typer ---

@user_app.command(name="list", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π SDB –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
def list_users_cmd_wrapper(
    limit: int = typer.Option(20, "--limit", "-l", help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.", min=1, max=200),
    offset: int = typer.Option(0, "--offset", "-o", help="–°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", min=0),
    sort_by: str = typer.Option("id", "--sort-by", help="–ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (id, telegram_id, username, first_name, last_name, created_at, last_activity_at).", case_sensitive=False),
    desc: bool = typer.Option(False, "--desc", help="–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —É–±—ã–≤–∞–Ω–∏—é.")
):
    valid_sort_fields = ["id", "telegram_id", "username", "first_name", "last_name", "created_at", "last_activity_at"]
    if sort_by.lower() not in valid_sort_fields:
        console.print(f"[bold red]–û—à–∏–±–∫–∞: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è --sort-by: '{sort_by}'.[/]")
        console.print(f"–î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {', '.join(valid_sort_fields)}")
        raise typer.Exit(code=1)
    try:
        asyncio.run(_list_users_cmd_async(limit=limit, offset=offset, sort_by=sort_by.lower(), sort_desc=desc))
    except Exception as e:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã 'user list': {type(e).__name__} - {e}[/]")
        # console.print_exception(show_locals=True) # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        raise typer.Exit(code=1)

@user_app.command(name="info", help="–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ Telegram ID, DB ID –∏–ª–∏ Username.")
def info_user_cmd_wrapper(user_identifier: str = typer.Argument(..., help="Telegram ID, DB ID –∏–ª–∏ Username (@–Ω–∏–∫) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")):
    try:
        asyncio.run(_info_user_cmd_async(user_identifier=user_identifier))
    except typer.Exit: # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º Exit, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        raise
    except Exception as e:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã 'user info': {type(e).__name__} - {e}[/]")
        raise typer.Exit(code=1)

@user_app.command(name="roles", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ.")
def list_roles_cmd_wrapper():
    try:
        asyncio.run(_list_roles_cmd_async())
    except Exception as e:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã 'user roles': {type(e).__name__} - {e}[/]")
        raise typer.Exit(code=1)

@user_app.command(name="assign-role", help="–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
def assign_role_cmd_wrapper(
    user_identifier: str = typer.Argument(..., help="Telegram ID, DB ID –∏–ª–∏ Username (@–Ω–∏–∫) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."),
    role_name: str = typer.Argument(..., help="–ò–º—è —Ä–æ–ª–∏ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Admin', 'User').")
):
    try:
        asyncio.run(_assign_role_cmd_async(user_identifier=user_identifier, role_name=role_name))
    except typer.Exit: raise
    except Exception as e:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —É–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ _assign_role_cmd_async
        raise typer.Exit(code=1)

@user_app.command(name="remove-role", help="–°–Ω—è—Ç—å —Ä–æ–ª—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
def remove_role_cmd_wrapper(
    user_identifier: str = typer.Argument(..., help="Telegram ID, DB ID –∏–ª–∏ Username (@–Ω–∏–∫) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."),
    role_name: str = typer.Argument(..., help="–ò–º—è —Ä–æ–ª–∏ –¥–ª—è —Å–Ω—è—Ç–∏—è.")
):
    try:
        asyncio.run(_remove_role_cmd_async(user_identifier=user_identifier, role_name=role_name))
    except typer.Exit: raise
    except Exception as e:
        raise typer.Exit(code=1)