# cli_commands/logs_cmd.py

import typer
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.text import Text
import os
import sys
from pathlib import Path
from datetime import datetime
from typing import Optional, List
import subprocess
import re

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥ –ª–æ–≥–æ–≤
logs_app = typer.Typer(help="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞–º–∏ SDB.")
console = Console()

try:
    from core.app_settings import load_app_settings
except ImportError:
    load_app_settings = None


def _get_log_directory() -> Path:
    """–ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤"""
    try:
        if load_app_settings:
            settings = load_app_settings()
            logs_dir = Path(settings.core.project_data_path) / "Logs"
        else:
            logs_dir = Path.cwd() / "project_data" / "Logs"
        return logs_dir
    except Exception:
        return Path.cwd() / "project_data" / "Logs"


def _find_latest_log_file() -> Optional[Path]:
    """–ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –ª–æ–≥–∞"""
    logs_dir = _get_log_directory()
    
    if not logs_dir.exists():
        return None
    
    # –ò—â–µ–º —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ YYYY/MM-Month/DD/HH_sdb.log
    log_files = []
    for root, dirs, files in os.walk(logs_dir):
        for file in files:
            if file.endswith("_sdb.log"):
                log_files.append(Path(root) / file)
    
    if not log_files:
        return None
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    log_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
    return log_files[0]


def _format_log_line_ultra_compact(line: str) -> str:
    """–°—É–ø–µ—Ä –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –æ–¥–Ω–∞ —á–∏—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ Rich markup"""
    pattern = r'(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}) \| (\w+)\s+\| ([^:]+):([^:]+):(\d+) - (.+)'
    
    match = re.match(pattern, line)
    if not match:
        return line
    
    timestamp, level, module, function, line_num, message = match.groups()
    
    # –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è
    time_short = timestamp.split()[1][:8]
    
    # –°–æ–∫—Ä–∞—â–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    if len(module) > 16:
        module = module[:13] + "..."
    if len(function) > 20:
        function = function[:17] + "..."
    if len(message) > 70:
        message = message[:67] + "..."
    
    # –ß–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ markup - –Ω–∏–∫–∞–∫–∏—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤!
    return f"{time_short} {level:7} {module:16} {function:20} {line_num:>3} | {message}"


def _format_log_line_compact(line: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ (–±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤) - –†–ï–ê–õ–¨–ù–û –∫–æ–º–ø–∞–∫—Ç–Ω–æ"""
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è loguru: YYYY-MM-DD HH:MM:SS.sss | LEVEL | module:function:line - message
    pattern = r'(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}) \| (\w+)\s+\| ([^:]+):([^:]+):(\d+) - (.+)'
    
    match = re.match(pattern, line)
    if not match:
        return line
    
    timestamp, level, module, function, line_num, message = match.groups()
    
    # –¶–≤–µ—Ç–∞ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø—Ä–æ—Å—Ç—ã–µ, –±–µ–∑ markup –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏)
    level_colors = {
        'DEBUG': 'dim cyan',
        'INFO': 'blue', 
        'SUCCESS': 'green',
        'WARNING': 'yellow',
        'ERROR': 'red',
        'CRITICAL': 'bold red'
    }
    
    level_color = level_colors.get(level, 'white')
    
    # –°–æ–∫—Ä–∞—â–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
    time_short = timestamp.split()[1][:8]  # –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è HH:MM:SS
    
    if len(module) > 18:
        module = module[:15] + "..."
    if len(function) > 22:
        function = function[:19] + "..."
    if len(message) > 80:
        message = message[:77] + "..."
    
    # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    formatted = f"{time_short} [{level_color}]{level:7}[/{level_color}] {module:18} {function:22} {line_num:>3} | {message}"
    
    return formatted


def _format_log_line(line: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è loguru: YYYY-MM-DD HH:MM:SS.sss | LEVEL | module:function:line - message
    pattern = r'(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}) \| (\w+)\s+\| ([^:]+):([^:]+):(\d+) - (.+)'
    
    match = re.match(pattern, line)
    if not match:
        return line
    
    timestamp, level, module, function, line_num, message = match.groups()
    
    # –¶–≤–µ—Ç–∞ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    level_colors = {
        'DEBUG': 'dim cyan',
        'INFO': 'blue', 
        'SUCCESS': 'green',
        'WARNING': 'yellow',
        'ERROR': 'red',
        'CRITICAL': 'bold red'
    }
    
    level_color = level_colors.get(level, 'white')
    
    # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ –º–æ–¥—É–ª–µ–π –∏ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
    if len(module) > 20:
        module = module[:17] + "..."
    if len(function) > 25:
        function = function[:22] + "..."
    
    # –û–±—Ä–µ–∑–∞–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    max_message_length = 100
    if len(message) > max_message_length:
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
        parts = []
        current_part = ""
        words = message.split()
        
        for word in words:
            if len(current_part + " " + word) <= max_message_length:
                current_part += (" " + word) if current_part else word
            else:
                if current_part:
                    parts.append(current_part)
                current_part = word
        
        if current_part:
            parts.append(current_part)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
        formatted = (
            f"[dim]{timestamp}[/dim] "
            f"[{level_color}]{level:8}[/{level_color}] "
            f"[cyan]{module:20}[/cyan]:[bright_cyan]{function:25}[/bright_cyan]:[dim]{line_num:4}[/dim] "
            f"- {parts[0]}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å –æ—Ç—Å—Ç—É–ø–æ–º
        for part in parts[1:]:
            formatted += f"\n{' ' * 60}  {part}"
            
        return formatted
    else:
        # –û–±—ã—á–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        formatted = (
            f"[dim]{timestamp}[/dim] "
            f"[{level_color}]{level:8}[/{level_color}] "
            f"[cyan]{module:20}[/cyan]:[bright_cyan]{function:25}[/bright_cyan]:[dim]{line_num:4}[/dim] "
            f"- {message}"
        )
        
        return formatted


@logs_app.command("tail", help="üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–æ–≥–∞ SDB.")
def tail_logs(
    lines: int = typer.Option(50, "--lines", "-n", help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞"),
    follow: bool = typer.Option(False, "--follow", "-f", help="–°–ª–µ–¥–∏—Ç—å –∑–∞ –ª–æ–≥–æ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"),
    filter_level: Optional[str] = typer.Option(None, "--level", "-l", help="–§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é (DEBUG, INFO, SUCCESS, WARNING, ERROR, CRITICAL)"),
    filter_module: Optional[str] = typer.Option(None, "--module", "-m", help="–§–∏–ª—å—Ç—Ä –ø–æ –º–æ–¥—É–ª—é"),
    raw: bool = typer.Option(False, "--raw", "-r", help="–í—ã–≤–æ–¥ –≤ —Å—ã—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"),
    compact: bool = typer.Option(False, "--compact", "-c", help="–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤—ã–≤–æ–¥ (–±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫)"),
    ultra_compact: bool = typer.Option(False, "--ultra-compact", "-u", help="–°—É–ø–µ—Ä –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤—ã–≤–æ–¥ (—á–∏—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ —Ü–≤–µ—Ç–æ–≤)"),
    frame: bool = typer.Option(False, "--frame", help="–í—ã–≤–æ–¥ –≤ —Ä–∞–º–∫–µ"),
    sort_by_time: bool = typer.Option(True, "--sort-time", help="–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–æ–≥–∞ SDB —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    log_file = _find_latest_log_file()
    if not log_file or not log_file.exists():
        console.print("[red]‚ùå –§–∞–π–ª –ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω![/red]")
        console.print(f"[dim]–û–∂–∏–¥–∞–µ–º–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤: {_get_log_directory()}[/dim]")
        raise typer.Exit(1)
    
    if frame:
        console.print(Panel(f"üìã –ß–∏—Ç–∞–µ–º –ª–æ–≥: {log_file}", style="cyan"))
    else:
        console.print(f"[dim]üìã –ß–∏—Ç–∞–µ–º –ª–æ–≥: {log_file}[/dim]\n")
    
    try:
        if follow:
            # –†–µ–∂–∏–º —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞ –ª–æ–≥–æ–º (tail -f)
            if frame:
                console.print(Panel("üëÅÔ∏è –†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)", style="yellow"))
            else:
                console.print("[yellow]üëÅÔ∏è –†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)[/yellow]\n")
            
            process = subprocess.Popen(
                ["tail", "-f", str(log_file)],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                bufsize=1,
                universal_newlines=True
            )
            
            try:
                for line in iter(process.stdout.readline, ''):
                    line = line.rstrip()
                    if not line:
                        continue
                        
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                    if filter_level and filter_level.upper() not in line:
                        continue
                    if filter_module and filter_module not in line:
                        continue
                    
                    if raw:
                        console.print(line)
                    elif ultra_compact:
                        # –°—É–ø–µ—Ä –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º - –ø–µ—á–∞—Ç–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ Rich
                        print(_format_log_line_ultra_compact(line))
                    else:
                        formatted_line = _format_log_line(line) if not compact else _format_log_line_compact(line)
                        if frame:
                            console.print(Panel(formatted_line, expand=False))
                        else:
                            console.print(formatted_line, markup=False)
                        
            except KeyboardInterrupt:
                if frame:
                    console.print(Panel("üëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", style="yellow"))
                else:
                    console.print("\n[yellow]üëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω[/yellow]")
                process.terminate()
                
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º tail
            with open(log_file, 'r', encoding='utf-8') as f:
                all_lines = f.readlines()
                last_lines = all_lines[-lines:] if len(all_lines) > lines else all_lines
                
                filtered_lines = []
                for line in last_lines:
                    line = line.rstrip()
                    if not line:
                        continue
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                    if filter_level and filter_level.upper() not in line:
                        continue
                    if filter_module and filter_module not in line:
                        continue
                    
                    filtered_lines.append(line)
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if sort_by_time and not raw:
                    filtered_lines.sort(key=lambda x: x[:23] if len(x) >= 23 else x)
                
                # –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏
                if frame and filtered_lines:
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ —Ä–∞–º–∫–∞—Ö
                    output_text = ""
                    for line in filtered_lines:
                        if raw:
                            output_text += line + "\n"
                        elif ultra_compact:
                            output_text += _format_log_line_ultra_compact(line) + "\n"
                        else:
                            formatted_line = _format_log_line(line) if not compact else _format_log_line_compact(line)
                            output_text += formatted_line + "\n"
                    
                    console.print(Panel(output_text.rstrip(), title="üìã –õ–æ–≥–∏ SDB", border_style="blue"))
                else:
                    for line in filtered_lines:
                        if raw:
                            console.print(line)
                        elif ultra_compact:
                            # –°—É–ø–µ—Ä –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º - –ø–µ—á–∞—Ç–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ Rich
                            print(_format_log_line_ultra_compact(line))
                        else:
                            formatted_line = _format_log_line(line) if not compact else _format_log_line_compact(line)
                            console.print(formatted_line, markup=False)
                
                if not filtered_lines:
                    if frame:
                        console.print(Panel("‚ö†Ô∏è –ù–µ—Ç —Å—Ç—Ä–æ–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º", style="yellow"))
                    else:
                        console.print("[yellow]‚ö†Ô∏è –ù–µ—Ç —Å—Ç—Ä–æ–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º[/yellow]")
                    
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–∞: {e}[/red]")
        raise typer.Exit(1)


@logs_app.command("clean", help="üßπ –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤ —Å—É–ø–µ—Ä-—á–∏—Å—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–∞–ª–∏–∞—Å –¥–ª—è --ultra-compact).")
def clean_logs(
    lines: int = typer.Option(50, "--lines", "-n", help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞"),
    filter_level: Optional[str] = typer.Option(None, "--level", "-l", help="–§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é"),
    filter_module: Optional[str] = typer.Option(None, "--module", "-m", help="–§–∏–ª—å—Ç—Ä –ø–æ –º–æ–¥—É–ª—é")
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏ –≤ —Å—É–ø–µ—Ä-—á–∏—Å—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –±–µ–∑ –∫–∞—à–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤"""
    
    log_file = _find_latest_log_file()
    if not log_file or not log_file.exists():
        print("‚ùå –§–∞–π–ª –ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        raise typer.Exit(1)
    
    print(f"üìã –õ–æ–≥–∏ SDB (—á–∏—Å—Ç—ã–π —Ñ–æ—Ä–º–∞—Ç): {log_file}")
    print()
    
    try:
        with open(log_file, 'r', encoding='utf-8') as f:
            all_lines = f.readlines()
            last_lines = all_lines[-lines:] if len(all_lines) > lines else all_lines
            
            filtered_lines = []
            for line in last_lines:
                line = line.rstrip()
                if not line:
                    continue
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                if filter_level and filter_level.upper() not in line:
                    continue
                if filter_module and filter_module not in line:
                    continue
                
                filtered_lines.append(line)
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏ –≤ —Å—É–ø–µ—Ä —á–∏—Å—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            for line in filtered_lines:
                print(_format_log_line_ultra_compact(line))
            
            if not filtered_lines:
                print("‚ö†Ô∏è –ù–µ—Ç —Å—Ç—Ä–æ–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–∞: {e}")
        raise typer.Exit(1)


@logs_app.command("table", help="üìä –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã.")
def table_logs(
    lines: int = typer.Option(30, "--lines", "-n", help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞"),
    filter_level: Optional[str] = typer.Option(None, "--level", "-l", help="–§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é"),
    filter_module: Optional[str] = typer.Option(None, "--module", "-m", help="–§–∏–ª—å—Ç—Ä –ø–æ –º–æ–¥—É–ª—é"),
    sort_by_time: bool = typer.Option(True, "--sort-time", help="–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏ –≤ –≤–∏–¥–µ –∫—Ä–∞—Å–∏–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
    
    log_file = _find_latest_log_file()
    if not log_file or not log_file.exists():
        console.print("[red]‚ùå –§–∞–π–ª –ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω![/red]")
        raise typer.Exit(1)
    
    try:
        with open(log_file, 'r', encoding='utf-8') as f:
            all_lines = f.readlines()
            last_lines = all_lines[-lines:] if len(all_lines) > lines else all_lines
            
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–æ–≤
            log_entries = []
            pattern = r'(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}) \| (\w+)\s+\| ([^:]+):([^:]+):(\d+) - (.+)'
            
            for line in last_lines:
                line = line.rstrip()
                if not line:
                    continue
                
                match = re.match(pattern, line)
                if not match:
                    continue
                
                timestamp, level, module, function, line_num, message = match.groups()
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                if filter_level and filter_level.upper() != level:
                    continue
                if filter_module and filter_module not in module:
                    continue
                
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
                if len(module) > 20:
                    module = module[:17] + "..."
                if len(function) > 25:
                    function = function[:22] + "..."
                if len(message) > 60:
                    message = message[:57] + "..."
                
                log_entries.append({
                    'time': timestamp.split()[1][:8],  # –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è
                    'level': level,
                    'module': module,
                    'function': function,
                    'line': line_num,
                    'message': message
                })
            
            if not log_entries:
                console.print("[yellow]‚ö†Ô∏è –ù–µ—Ç —Å—Ç—Ä–æ–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º[/yellow]")
                return
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if sort_by_time:
                log_entries.sort(key=lambda x: x['time'])
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            table = Table(title="üìä –õ–æ–≥–∏ SDB (—Ç–∞–±–ª–∏—á–Ω—ã–π –≤–∏–¥)")
            table.add_column("–í—Ä–µ–º—è", style="dim", width=10)
            table.add_column("–£—Ä–æ–≤–µ–Ω—å", width=10)
            table.add_column("–ú–æ–¥—É–ª—å", style="cyan", width=20)
            table.add_column("–§—É–Ω–∫—Ü–∏—è", style="bright_cyan", width=25)
            table.add_column("–°—Ç—Ä–æ–∫–∞", justify="right", style="dim", width=6)
            table.add_column("–°–æ–æ–±—â–µ–Ω–∏–µ", width=60)
            
            # –¶–≤–µ—Ç–∞ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
            level_colors = {
                'DEBUG': 'dim cyan',
                'INFO': 'blue', 
                'SUCCESS': 'green',
                'WARNING': 'yellow',
                'ERROR': 'red',
                'CRITICAL': 'bold red'
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
            for entry in log_entries:
                level_color = level_colors.get(entry['level'], 'white')
                table.add_row(
                    entry['time'],
                    f"[{level_color}]{entry['level']}[/{level_color}]",
                    entry['module'],
                    entry['function'],
                    entry['line'],
                    entry['message']
                )
            
            console.print(table)
            console.print(f"\n[dim]üìä –ü–æ–∫–∞–∑–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(log_entries)} –∏–∑ {len(last_lines)}[/dim]")
            
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–∞: {e}[/red]")
        raise typer.Exit(1)


@logs_app.command("list", help="üìÇ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤.")
def list_logs():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤"""
    
    logs_dir = _get_log_directory()
    
    if not logs_dir.exists():
        console.print(f"[red]‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {logs_dir}[/red]")
        raise typer.Exit(1)
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤
    log_files = []
    for root, dirs, files in os.walk(logs_dir):
        for file in files:
            if file.endswith("_sdb.log"):
                full_path = Path(root) / file
                stat = full_path.stat()
                log_files.append({
                    'path': full_path,
                    'relative_path': full_path.relative_to(logs_dir),
                    'size': stat.st_size,
                    'modified': datetime.fromtimestamp(stat.st_mtime)
                })
    
    if not log_files:
        console.print("[yellow]‚ö†Ô∏è –§–∞–π–ª—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/yellow]")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    log_files.sort(key=lambda x: x['modified'], reverse=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    table = Table(title="üìã –§–∞–π–ª—ã –ª–æ–≥–æ–≤ SDB")
    table.add_column("–§–∞–π–ª", style="cyan")
    table.add_column("–†–∞–∑–º–µ—Ä", justify="right", style="green")
    table.add_column("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ", style="yellow")
    
    for log_info in log_files:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        size = log_info['size']
        if size < 1024:
            size_str = f"{size} B"
        elif size < 1024 * 1024:
            size_str = f"{size / 1024:.1f} KB"
        else:
            size_str = f"{size / (1024 * 1024):.1f} MB"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        time_str = log_info['modified'].strftime("%Y-%m-%d %H:%M:%S")
        
        table.add_row(
            str(log_info['relative_path']),
            size_str,
            time_str
        )
    
    console.print(table)
    console.print(f"\n[dim]üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤: {logs_dir}[/dim]")


@logs_app.command("search", help="üîç –ü–æ–∏—Å–∫ –≤ –ª–æ–≥–∞—Ö –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.")
def search_logs(
    query: str = typer.Argument(..., help="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"),
    lines: int = typer.Option(100, "--lines", "-n", help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å –∫–æ–Ω—Ü–∞"),
    context: int = typer.Option(2, "--context", "-C", help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–æ –∏ –ø–æ—Å–ª–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"),
    ignore_case: bool = typer.Option(True, "--ignore-case", "-i", help="–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä –ø—Ä–∏ –ø–æ–∏—Å–∫–µ"),
    raw: bool = typer.Option(False, "--raw", "-r", help="–í—ã–≤–æ–¥ –≤ —Å—ã—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
):
    """–ü–æ–∏—Å–∫ –ø–æ –ª–æ–≥–∞–º —Å –≤—ã–≤–æ–¥–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    
    log_file = _find_latest_log_file()
    if not log_file or not log_file.exists():
        console.print("[red]‚ùå –§–∞–π–ª –ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω![/red]")
        raise typer.Exit(1)
    
    console.print(f"[dim]üîç –ü–æ–∏—Å–∫ –≤ –ª–æ–≥–µ: {log_file}[/dim]")
    console.print(f"[dim]–ó–∞–ø—Ä–æ—Å: [cyan]'{query}'[/cyan][/dim]\n")
    
    try:
        with open(log_file, 'r', encoding='utf-8') as f:
            all_lines = f.readlines()
            search_lines = all_lines[-lines:] if len(all_lines) > lines else all_lines
        
        # –ü–æ–∏—Å–∫
        matches = []
        search_query = query.lower() if ignore_case else query
        
        for i, line in enumerate(search_lines):
            search_line = line.lower() if ignore_case else line
            if search_query in search_line:
                matches.append(i)
        
        if not matches:
            console.print("[yellow]‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ[/yellow]")
            return
        
        console.print(f"[green]‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matches)}[/green]\n")
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        for match_idx in matches:
            start_idx = max(0, match_idx - context)
            end_idx = min(len(search_lines), match_idx + context + 1)
            
            console.print(f"[bold blue]--- –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–µ {match_idx + 1} ---[/bold blue]")
            
            for i in range(start_idx, end_idx):
                line = search_lines[i].rstrip()
                if i == match_idx:
                    # –í—ã–¥–µ–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
                    if raw:
                        console.print(f"[bold green]> {line}[/bold green]")
                    else:
                        formatted = _format_log_line(line)
                        console.print(f"[bold green]> [/bold green]{formatted}", markup=False)
                else:
                    # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                    if raw:
                        console.print(f"  {line}")
                    else:
                        console.print(f"  {_format_log_line(line)}", markup=False)
            
            console.print()
            
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –ª–æ–≥–µ: {e}[/red]")
        raise typer.Exit(1)


@logs_app.command("clear", help="üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤.")
def clear_logs(
    days: int = typer.Option(30, "--days", "-d", help="–£–¥–∞–ª–∏—Ç—å –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π"),
    dry_run: bool = typer.Option(False, "--dry-run", help="–ü–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª—è—Ç—å"),
    confirm: bool = typer.Option(False, "--yes", "-y", help="–ù–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤"""
    
    logs_dir = _get_log_directory()
    
    if not logs_dir.exists():
        console.print(f"[red]‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {logs_dir}[/red]")
        raise typer.Exit(1)
    
    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
    now = datetime.now()
    old_files = []
    
    for root, dirs, files in os.walk(logs_dir):
        for file in files:
            if file.endswith("_sdb.log"):
                full_path = Path(root) / file
                modified_time = datetime.fromtimestamp(full_path.stat().st_mtime)
                age_days = (now - modified_time).days
                
                if age_days > days:
                    old_files.append((full_path, age_days))
    
    if not old_files:
        console.print(f"[green]‚úÖ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π[/green]")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
    table = Table(title=f"üßπ –§–∞–π–ª—ã –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π")
    table.add_column("–§–∞–π–ª", style="cyan")
    table.add_column("–í–æ–∑—Ä–∞—Å—Ç (–¥–Ω–µ–π)", justify="right", style="yellow")
    table.add_column("–†–∞–∑–º–µ—Ä", justify="right", style="green")
    
    total_size = 0
    for file_path, age in old_files:
        size = file_path.stat().st_size
        total_size += size
        
        if size < 1024:
            size_str = f"{size} B"
        elif size < 1024 * 1024:
            size_str = f"{size / 1024:.1f} KB"
        else:
            size_str = f"{size / (1024 * 1024):.1f} MB"
        
        relative_path = file_path.relative_to(logs_dir)
        table.add_row(str(relative_path), str(age), size_str)
    
    console.print(table)
    
    if total_size < 1024:
        total_str = f"{total_size} B"
    elif total_size < 1024 * 1024:
        total_str = f"{total_size / 1024:.1f} KB"
    else:
        total_str = f"{total_size / (1024 * 1024):.1f} MB"
    
    console.print(f"\n[bold]–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(old_files)}, –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_str}[/bold]")
    
    if dry_run:
        console.print("\n[yellow]üîç –ü—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥–æ–Ω - —Ñ–∞–π–ª—ã –ù–ï –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã[/yellow]")
        return
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if not confirm:
        if not typer.confirm(f"\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {len(old_files)} —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤?"):
            console.print("[yellow]‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞[/yellow]")
            return
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
    deleted_count = 0
    for file_path, _ in old_files:
        try:
            file_path.unlink()
            deleted_count += 1
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {file_path}: {e}[/red]")
    
    console.print(f"\n[green]‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted_count} –∏–∑ {len(old_files)}[/green]")


# –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
__all__ = ["logs_app"]
