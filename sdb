#!/usr/bin/env python3
# sdb

import asyncio
import sys
import os
import subprocess
import time
import signal
from pathlib import Path
from typing import Optional, List
from datetime import datetime, timedelta

# –ò–º–ø–æ—Ä—Ç psutil –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
try:
    import psutil
except ImportError:
    psutil = None

current_script_path = Path(__file__).resolve()
project_root = current_script_path.parent
if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))

try:
    import typer
    from rich.console import Console
    from rich.panel import Panel
    from rich.text import Text
    from rich.table import Table
    from rich.columns import Columns
    from loguru import logger as global_logger 
except ImportError as e:
    print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (Typer, Rich, Loguru) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. {e}", file=sys.stderr)
    print(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ requirements.txt –∏–ª–∏ requirements-dev.txt:", file=sys.stderr)
    print(f"  pip install -r requirements.txt", file=sys.stderr)
    sys.exit(1)

sdb_console = Console()

# === –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º –±–æ—Ç–∞ ===

def _get_pid_file_path() -> Path:
    try:
        from core.app_settings import settings
        project_data_dir = Path(settings.core.project_data_path)
        return project_data_dir / PID_FILENAME
    except Exception:
        # Fallback: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é + project_data
        return Path.cwd() / "project_data" / PID_FILENAME

def _read_pid_from_file(pid_file: Path) -> Optional[int]:
    """–ß–∏—Ç–∞–µ—Ç PID –∏–∑ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    if not pid_file.is_file(): 
        return None
    try:
        with open(pid_file, "r", encoding='utf-8') as f: 
            pid_str = f.read().strip()
        
        if not pid_str:
            sdb_console.print(f"[yellow]–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: PID-—Ñ–∞–π–ª {pid_file} –ø—É—Å—Ç[/yellow]")
            return None
            
        if not pid_str.isdigit():
            sdb_console.print(f"[yellow]–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: PID-—Ñ–∞–π–ª {pid_file} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{pid_str}'[/yellow]")
            return None
            
        pid = int(pid_str)
        if pid <= 0:
            sdb_console.print(f"[yellow]–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π PID –≤ —Ñ–∞–π–ª–µ {pid_file}: {pid}[/yellow]")
            return None
            
        return pid
    except (IOError, OSError) as e:
        sdb_console.print(f"[red]–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ PID-—Ñ–∞–π–ª—É {pid_file}: {e}[/red]")
        return None
    except ValueError as e:
        sdb_console.print(f"[yellow]–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ PID –∏–∑ —Ñ–∞–π–ª–∞ {pid_file}: {e}[/yellow]")
        return None
    except Exception as e:
        sdb_console.print(f"[red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ PID –∏–∑ —Ñ–∞–π–ª–∞ {pid_file}: {e}[/red]")
        return None

def _is_process_running(pid: int) -> bool:
    if psutil:
        try: 
            return psutil.pid_exists(pid)
        except Exception:
            pass
    try:
        if sys.platform == "win32":
            subprocess.run(["tasklist", "/FI", f"PID eq {pid}"], 
                         stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True)
            return True
        else:
            os.kill(pid, 0)
            return True
    except (OSError, subprocess.CalledProcessError):
        return False

try:
    from cli_commands.setup_cmd import config_app
    from cli_commands.db_cmd import db_app
    from cli_commands.module_cmd import module_app
    from cli_commands.user_cmd import user_app
    from cli_commands.backup_cmd import backup_app
    from cli_commands.system_cmd import system_app
    from cli_commands.control_cmd import control_app, PID_FILENAME 
    from cli_commands.bot_cmd import bot_app 
    from cli_commands.logs_cmd import logs_app
    from core.bot_entrypoint import run_sdb_bot 
except ImportError as e:
    sdb_console.print(f"[bold red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:[/]\n –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã SDB CLI –∏–ª–∏ —è–¥—Ä–∞: {e}")
    sdb_console.print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —è–¥—Ä–∞ –∏ CLI –Ω–∞ –º–µ—Å—Ç–µ –∏ PYTHONPATH –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    sdb_console.print_exception(show_locals=False)
    sys.exit(1)
except Exception as e:
    sdb_console.print(f"[bold red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SDB CLI (–≤–æ –≤—Ä–µ–º—è –∏–º–ø–æ—Ä—Ç–æ–≤):[/]\n {e}")
    sdb_console.print_exception(show_locals=True)
    sys.exit(1)

cli_main_app = typer.Typer(
    name="sdb",
    help="üöÄ [bold cyan]SwiftDevBot CLI[/] - –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º SDB!",
    rich_markup_mode="rich",
    add_completion=False,
    no_args_is_help=True,
    context_settings={"help_option_names": ["-h", "--help"]}
)

cli_main_app.add_typer(config_app, name="config", help="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π SDB (init, info).")
cli_main_app.add_typer(db_app, name="db", help="üóÑÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ Alembic.")
cli_main_app.add_typer(module_app, name="module", help="üß© –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏ SDB (–ø–ª–∞–≥–∏–Ω–∞–º–∏).")
cli_main_app.add_typer(user_app, name="user", help="üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Ä–æ–ª—è–º–∏ (RBAC).")
cli_main_app.add_typer(backup_app, name="backup", help="üíæ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –ë–î.")
cli_main_app.add_typer(system_app, name="system", help="üõ†Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–¥—Ä–∞, –æ—Ç–∫–∞—Ç –∏ –¥—Ä.).")
cli_main_app.add_typer(logs_app, name="logs", help="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞–º–∏ SDB.")
# control_app –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
cli_main_app.add_typer(control_app, name="control", help="üö¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–º –±–æ—Ç–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º—ã–µ –∫–æ–º–∞–Ω–¥—ã).") 
cli_main_app.add_typer(bot_app, name="bot", help="ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram-–±–æ—Ç–æ–º SDB (–∫–æ–º–∞–Ω–¥—ã, —Å—Ç–∞—Ç—É—Å).") 

@cli_main_app.command(name="start", help="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å Telegram –±–æ—Ç–∞ SDB.")
def start_bot_command(
    debug: bool = typer.Option(
        False, "--debug", "-d", 
        help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ (—É–≤–µ–ª–∏—á–∏—Ç —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ DEBUG)."
    ),
    background: bool = typer.Option(
        False, "--background", "-b",
        help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (–¥–µ–º–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å)."
    )
):
    from core.app_settings import settings 
    pid_file_path = settings.core.project_data_path / PID_FILENAME

    if pid_file_path.exists():
        try:
            with open(pid_file_path, "r") as f:
                pid = int(f.read().strip())
            if sys.platform != "win32":
                os.kill(pid, 0) 
                sdb_console.print(f"[yellow]SDB –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: {pid}). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ './sdb.py stop' –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.[/yellow]")
                raise typer.Exit(code=1)
            else: 
                 sdb_console.print(f"[yellow]PID-—Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (PID: {pid}). –ï—Å–ª–∏ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω, –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º.[/yellow]")
        except (OSError, ValueError): 
            sdb_console.print(f"[yellow]–û–±–Ω–∞—Ä—É–∂–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π PID-—Ñ–∞–π–ª ({pid_file_path}). –£–¥–∞–ª–µ–Ω–∏–µ...[/yellow]")
            pid_file_path.unlink(missing_ok=True)
        except Exception as e_pid_check:
             sdb_console.print(f"[red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ PID-—Ñ–∞–π–ª–∞: {e_pid_check}[/red]")

    if debug:
        sdb_console.print(Panel(f"[bold yellow]–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ DEBUG.[/]", 
                                title="SDB Start (Debug Mode Requested)", expand=False, border_style="yellow"))
        os.environ["SDB_LAUNCH_DEBUG_MODE"] = "true"
        # SDB_CLI_DEBUG_MODE_FOR_LOGGING —Ç–µ–ø–µ—Ä—å –Ω–µ –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å, 
        # —Ç.–∫. app_settings.py —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –ª–æ–≥.
        # –ï—Å–ª–∏ –æ—á–µ–Ω—å –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –ª–æ–≥ *–∏–º–µ–Ω–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –≤—ã–∑–æ–≤–∞ sdb start*,
        # —Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å reload app_settings —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π SDB_CLI_DEBUG_MODE_FOR_LOGGING.
        # –ù–æ –ø—Ä–æ—â–µ –ø–æ–ª–æ–∂–∏—Ç—å—Å—è –Ω–∞ —Ç–æ, —á—Ç–æ SDB_LAUNCH_DEBUG_MODE –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ bot_entrypoint.
    else:
        os.environ["SDB_LAUNCH_DEBUG_MODE"] = "false"
        # os.environ["SDB_CLI_DEBUG_MODE_FOR_LOGGING"] = "false" # –£–∂–µ –Ω–µ —Ç–∞–∫ –≤–∞–∂–Ω–æ –∑–¥–µ—Å—å

    if background:
        if sys.platform == "win32":
            sdb_console.print("[bold red]–§–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º (-b/--background) –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ Windows —á–µ—Ä–µ–∑ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.[/bold red]")
            sdb_console.print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –±–µ–∑ —Ñ–ª–∞–≥–∞ -b –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –¥–µ–º–æ–Ω–∏–∑–∞—Ü–∏–∏.")
            raise typer.Exit(code=1)

        sdb_console.print(Panel("[bold blue]–ó–∞–ø—É—Å–∫ SDB –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...[/]", 
                                title="SDB Start (Background)", expand=False, border_style="blue"))
        
        run_bot_script_path = project_root / "run_bot.py"
        
        env_for_subprocess = os.environ.copy()
        env_for_subprocess["SDB_SHOULD_WRITE_PID"] = "true"
        
        try:
            process = subprocess.Popen(
                [sys.executable, str(run_bot_script_path)],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL,
                start_new_session=True, 
                env=env_for_subprocess
            )
            sdb_console.print(f"–ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ (—Å–∏—Å—Ç–µ–º–Ω—ã–π PID: {process.pid}).")
            sdb_console.print(f"–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è PID-—Ñ–∞–π–ª–∞ '{PID_FILENAME}' (–¥–æ 10 —Å–µ–∫—É–Ω–¥)...")
            
            pid_file_created_successfully = False
            for i in range(10): 
                time.sleep(1)
                if pid_file_path.exists():
                    try:
                        actual_pid_from_file_str = pid_file_path.read_text().strip()
                        if actual_pid_from_file_str.isdigit():
                            actual_pid_from_file = int(actual_pid_from_file_str)
                            sdb_console.print(f"[green]PID-—Ñ–∞–π–ª {pid_file_path} —Å–æ–∑–¥–∞–Ω. PID –±–æ—Ç–∞: {actual_pid_from_file}.[/green]")
                            sdb_console.print("–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: [cyan]./sdb.py status[/cyan]")
                            sdb_console.print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: [cyan]./sdb.py stop[/cyan]")
                            pid_file_created_successfully = True
                            break
                        else:
                            sdb_console.print(f"[yellow]PID-—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{actual_pid_from_file_str}'. –ü–æ–ø—ã—Ç–∫–∞ {i+1}/10.[/yellow]")
                    except ValueError:
                        sdb_console.print(f"[yellow]PID-—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—ã—Ç–∫–∞ {i+1}/10.[/yellow]")
                    except Exception as e_read_pid:
                         sdb_console.print(f"[yellow]–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è PID –∏–∑ —Ñ–∞–π–ª–∞ ({e_read_pid}). –ü–æ–ø—ã—Ç–∫–∞ {i+1}/10.[/yellow]")

            if not pid_file_created_successfully:
                sdb_console.print(f"[yellow]–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: PID-—Ñ–∞–π–ª –Ω–µ –±—ã–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–∑–¥–∞–Ω/–ø—Ä–æ—á–∏—Ç–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥.[/yellow]")
                sdb_console.print(f"  –í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ —Ñ–æ–Ω–µ –∏–ª–∏ –Ω–µ —Å–º–æ–≥ –∑–∞–ø–∏—Å–∞—Ç—å PID. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞.")
                sdb_console.print(f"  –°–∏—Å—Ç–µ–º–Ω—ã–π PID –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞: {process.pid}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å –≤—Ä—É—á–Ω—É—é.")

        except Exception as e_popen:
            sdb_console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ: {e_popen}[/bold red]")
            sdb_console.print_exception(show_locals=True)
            raise typer.Exit(code=1)
    else:
        if not debug: 
             sdb_console.print(Panel("[bold green]–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ SDB...[/]", 
                                title="SDB Start", expand=False, border_style="green"))
        try:
            os.environ["SDB_SHOULD_WRITE_PID"] = "false" 
            
            bot_coroutine = run_sdb_bot() 
            exit_code = asyncio.run(bot_coroutine)
            
            if exit_code != 0:
                sdb_console.print(f"[bold red]–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏: {exit_code}[/]")
                sys.exit(exit_code)
            else:
                if not (os.environ.get("SDB_SHOULD_WRITE_PID", "false").lower() == "true"):
                    sdb_console.print("[bold green]–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Å–≤–æ—é —Ä–∞–±–æ—Ç—É (—à—Ç–∞—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ).[/]")
                
        except KeyboardInterrupt:
            sdb_console.print("\n[bold orange_red1]ü§ñ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C). –í—ã—Ö–æ–¥.[/]")
            sys.exit(0) 
        except Exception as e:
            sdb_console.print(Panel(f"[bold red]–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–ª–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞:[/]\n{e}", 
                                    title="SDB Runtime Error", border_style="red", expand=True))
            global_logger.opt(exception=e).critical("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ sdb.py start_bot_command")
            sdb_console.print_exception(show_locals=True) 
            sys.exit(1)

@cli_main_app.command(name="stop", help="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SDB –±–æ—Ç–∞.")
def stop_bot_command(
    force: bool = typer.Option(False, "--force", "-f", help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (SIGKILL), –µ—Å–ª–∏ SIGTERM –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (–û–ü–ê–°–ù–û)."),
    timeout: int = typer.Option(5, "--timeout", "-t", help="–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (—Å–µ–∫) –ø–æ—Å–ª–µ SIGTERM –ø–µ—Ä–µ–¥ SIGKILL (–µ—Å–ª–∏ --force).", min=1, max=60)
):
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SDB –±–æ—Ç–∞."""
    pid_file = _get_pid_file_path()
    pid = _read_pid_from_file(pid_file)

    if not pid:
        sdb_console.print("[yellow]SDB –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω (PID-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω).[/yellow]")
        return 

    if not _is_process_running(pid):
        sdb_console.print(f"[yellow]SDB –±–æ—Ç (PID: {pid} –∏–∑ —Ñ–∞–π–ª–∞) —É–∂–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω.[/yellow]")
        if pid_file.is_file(): 
            try:
                pid_file.unlink()
                sdb_console.print(f"–£—Å—Ç–∞—Ä–µ–≤—à–∏–π PID-—Ñ–∞–π–ª {pid_file} —É–¥–∞–ª–µ–Ω.")
            except Exception as e_unlink:
                sdb_console.print(f"[red]–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–π PID-—Ñ–∞–π–ª {pid_file}: {e_unlink}[/red]")
        return

    sdb_console.print(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SDB –±–æ—Ç–∞ (PID: {pid})...")
    
    if sys.platform == "win32":
        sdb_console.print("[yellow]–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è Windows –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –≤—Ä—É—á–Ω—É—é (taskkill /F /PID {pid}).[/yellow]")
        raise typer.Exit(code=1) 

    try:
        os.kill(pid, signal.SIGTERM) 
        sdb_console.print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM –ø—Ä–æ—Ü–µ—Å—Å—É {pid}.")
        
        for i in range(timeout):
            time.sleep(1) 
            if not _is_process_running(pid):
                sdb_console.print(f"[green]SDB –±–æ—Ç (PID: {pid}) —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—á–µ—Ä–µ–∑ {i+1} —Å–µ–∫).[/green]")
                if pid_file.is_file(): 
                    pid_file.unlink(missing_ok=True) 
                return 
        
        if _is_process_running(pid):
            if force:
                sdb_console.print(f"[yellow]–ü—Ä–æ—Ü–µ—Å—Å {pid} –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω –ø–æ—Å–ª–µ {timeout} —Å–µ–∫. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ (SIGKILL)...[/yellow]")
                os.kill(pid, signal.SIGKILL)
                time.sleep(0.1) 
                if not _is_process_running(pid):
                    sdb_console.print(f"[green]SDB –±–æ—Ç (PID: {pid}) –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (SIGKILL).[/green]")
                else: 
                    sdb_console.print(f"[red]‚úó SDB –±–æ—Ç (PID: {pid}) –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –¥–∞–∂–µ –ø–æ—Å–ª–µ SIGKILL. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é.[/red]")
                    raise typer.Exit(code=1) 
                if pid_file.is_file(): 
                    pid_file.unlink(missing_ok=True)
            else:
                sdb_console.print(f"[red]‚úó SDB –±–æ—Ç (PID: {pid}) –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ø–æ—Å–ª–µ SIGTERM ({timeout} —Å–µ–∫).[/red]")
                sdb_console.print(f"  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ './sdb.py stop --force' –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –≤—Ä—É—á–Ω—É—é (kill {pid}).")
                raise typer.Exit(code=1) 
        else: 
            sdb_console.print(f"[green]SDB –±–æ—Ç (PID: {pid}) —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.[/green]")
            if pid_file.is_file(): 
                pid_file.unlink(missing_ok=True)

    except ProcessLookupError: 
        sdb_console.print(f"[green]SDB –±–æ—Ç (PID: {pid}) —É–∂–µ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.[/green]")
        if pid_file.is_file(): 
            pid_file.unlink(missing_ok=True)
    except typer.Exit: 
        raise 
    except Exception as e:
        sdb_console.print(f"[red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}[/red]")
        raise typer.Exit(code=1)

@cli_main_app.command(name="status", help="üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å SDB –±–æ—Ç–∞.")
def status_bot_command():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ SDB –±–æ—Ç–µ."""
    
    pid_file = _get_pid_file_path()
    pid = _read_pid_from_file(pid_file)

    if pid and _is_process_running(pid):
        sdb_console.print(f"[green]‚óè SDB –±–æ—Ç –∑–∞–ø—É—â–µ–Ω (PID: {pid})[/green]")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —á–µ—Ä–µ–∑ psutil –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if psutil:
            try:
                p = psutil.Process(pid)
                with p.oneshot(): 
                    create_time = datetime.fromtimestamp(p.create_time())
                    uptime_delta = datetime.now() - create_time
                    memory_mb = p.memory_info().rss / (1024**2)
                    
                    sdb_console.print(f"[cyan]–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:[/] {uptime_delta}")
                    sdb_console.print(f"[cyan]–ü–∞–º—è—Ç—å (RSS):[/] {memory_mb:.1f} –ú–ë")
                    sdb_console.print(f"[cyan]–°–æ–∑–¥–∞–Ω:[/] {create_time.strftime('%Y-%m-%d %H:%M:%S')}")
            except Exception as e:
                sdb_console.print(f"[dim]–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}[/dim]")
    else:
        sdb_console.print("[red]‚óè SDB –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω[/red]")
        if pid:
            sdb_console.print(f"[dim](PID {pid} –∏–∑ —Ñ–∞–π–ª–∞ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω)[/dim]")
    
    # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    sdb_console.print(f"\n[cyan]Python:[/] {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
    sdb_console.print(f"[cyan]–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:[/] {sys.platform}")
    sdb_console.print(f"[cyan]SDB –∫–æ—Ä–µ–Ω—å:[/] {project_root}")

@cli_main_app.command(name="restart", help="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å SDB –±–æ—Ç–∞.")
def restart_bot_command(
    force_stop: bool = typer.Option(False, "--force-stop", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å --force –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º."),
    stop_timeout: int = typer.Option(5, "--stop-timeout", help="–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (—Å–µ–∫) –¥–ª—è –∫–æ–º–∞–Ω–¥—ã stop.", min=1, max=60),
    background: bool = typer.Option(True, "--background/--no-background", "-b", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."),
    debug: bool = typer.Option(False, "--debug", "-d", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å SDB –±–æ—Ç–∞: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω) –∏ –∑–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ—Ç."""
    
    sdb_console.print(Panel("[blue]–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ SDB –±–æ—Ç–∞...[/blue]", expand=False))
    
    sdb_console.print("\n[cyan]–®–∞–≥ 1: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω)...[/cyan]")
    stop_failed = False
    
    sdb_executable_str = None
    if Path(sys.argv[0]).is_absolute():
        sdb_executable_str = sys.argv[0]
    else:
        sdb_script_in_bin = Path(sys.executable).parent / Path(sys.argv[0]).name
        if sdb_script_in_bin.exists() and (os.access(sdb_script_in_bin, os.X_OK) or str(sdb_script_in_bin).endswith(".py")):
            sdb_executable_str = str(sdb_script_in_bin)
        else: 
            sdb_py_in_cwd = Path.cwd() / "sdb.py"
            sdb_in_cwd = Path.cwd() / "sdb"
            if sdb_py_in_cwd.exists():
                sdb_executable_str = str(sdb_py_in_cwd)
            elif sdb_in_cwd.exists() and os.access(sdb_in_cwd, os.X_OK):
                sdb_executable_str = str(sdb_in_cwd)
    
    if not sdb_executable_str:
        sdb_console.print(f"[bold red]–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª SDB CLI. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ sys.argv[0]: {sys.argv[0]}[/bold red]")
        raise typer.Exit(1)

    try:
        stop_command_args = [str(sys.executable), sdb_executable_str, "stop", f"--timeout={stop_timeout}"]
        if force_stop:
            stop_command_args.append("--force")
        
        sdb_console.print(f"[dim]–í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {' '.join(stop_command_args)}[/dim]")
        stop_process_result = subprocess.run(stop_command_args, capture_output=True, text=True, encoding='utf-8')

        if stop_process_result.stdout:
            sdb_console.print(f"[dim cyan]–í—ã–≤–æ–¥ 'stop':[/]\n{stop_process_result.stdout.strip()}")
        if stop_process_result.stderr:
            sdb_console.print(f"[dim yellow]–û—à–∏–±–∫–∏ –æ—Ç 'stop':[/]\n{stop_process_result.stderr.strip()}")

        if stop_process_result.returncode != 0:
            sdb_console.print(f"[bold red]–û—à–∏–±–∫–∞ –Ω–∞ —Ñ–∞–∑–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–∫–æ–¥: {stop_process_result.returncode}).[/bold red]")
            if not typer.confirm("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –∑–∞–ø—É—Å–∫–∞, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏?", default=False):
                sdb_console.print("[bold yellow]–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.[/bold yellow]")
                raise typer.Exit(code=1)
            sdb_console.print("[yellow]–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...[/yellow]")
            stop_failed = True
        else:
            sdb_console.print("[green]–§–∞–∑–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω).[/green]")

    except Exception as e_stop_wrapper:
        sdb_console.print(f"[bold red]–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–∞ 'stop': {e_stop_wrapper}[/bold red]")
        if not typer.confirm("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –∑–∞–ø—É—Å–∫–∞, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É?", default=False):
            sdb_console.print("[bold yellow]–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.[/bold yellow]")
            raise typer.Exit(code=1)
        sdb_console.print("[yellow]–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞...[/yellow]")
        stop_failed = True

    if not stop_failed:
        sdb_console.print("[dim]–û–∂–∏–¥–∞–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º...[/dim]")
        time.sleep(1)

    sdb_console.print("\n[cyan]–®–∞–≥ 2: –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞...[/cyan]")
    try:
        start_command_args = [str(sys.executable), sdb_executable_str, "start"]
        if background:
            start_command_args.append("--background")
        if debug:
            start_command_args.append("--debug")

        sdb_console.print(f"[dim]–í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞: {' '.join(start_command_args)}[/dim]")
        
        if background:
            subprocess.Popen(start_command_args)
            sdb_console.print("[green]–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.[/green]")
        else:
            start_process_result = subprocess.run(start_command_args, capture_output=True, text=True, encoding='utf-8')
            if start_process_result.stdout:
                 sdb_console.print(f"[dim cyan]–í—ã–≤–æ–¥ 'start':[/]\n{start_process_result.stdout.strip()}")
            if start_process_result.stderr: 
                 sdb_console.print(f"[dim yellow]–í—ã–≤–æ–¥ (–≤–æ–∑–º–æ–∂–Ω–æ, –æ—à–∏–±–∫–∏) –æ—Ç 'start':[/]\n{start_process_result.stderr.strip()}")
            if start_process_result.returncode != 0:
                sdb_console.print(f"[bold red]–û—à–∏–±–∫–∞ –Ω–∞ —Ñ–∞–∑–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (–∫–æ–¥: {start_process_result.returncode}).[/bold red]")
                raise typer.Exit(code=1)
            sdb_console.print("[green]–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–∑–≤–∞–Ω–∞ (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º).[/green]")

    except Exception as e_start_wrapper:
        sdb_console.print(f"[bold red]–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –∑–∞–ø—É—Å–∫–∞: {e_start_wrapper}[/bold red]")
        raise typer.Exit(code=1)

    sdb_console.print("\n[bold green]–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.[/bold green]")
    if background:
        sdb_console.print("  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ —á–µ—Ä–µ–∑: [cyan]./sdb.py status[/cyan]")

if __name__ == "__main__":
    try:
        if sys.platform != "win32":
            if not os.access(__file__, os.X_OK):
                current_mode = os.stat(__file__).st_mode
                os.chmod(__file__, current_mode | 0o111) 
                sdb_console.print("[dim green]–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è sdb.py[/dim]")
    except Exception as e_chmod:
        sdb_console.print(f"[dim yellow]–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è sdb.py: {e_chmod}[/dim]")

    cli_main_app()