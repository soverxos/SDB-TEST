#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥ monitor –∏ utils –≤ SwiftDevBot CLI
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import asyncio
import json
import os
import subprocess
import sys
import tempfile
import time
from pathlib import Path
from typing import Dict, List, Optional, Tuple

class MonitorUtilsTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ monitor –∏ utils"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.test_results = []
        self.errors = []
        self.warnings = []
        
    def log_result(self, test_name: str, success: bool, message: str = "", details: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        result = {
            "test": test_name,
            "success": success,
            "message": message,
            "details": details,
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        self.test_results.append(result)
        
        if success:
            print(f"‚úÖ {test_name}: {message}")
        else:
            print(f"‚ùå {test_name}: {message}")
            if details:
                print(f"   –î–µ—Ç–∞–ª–∏: {details}")
    
    def run_command(self, command: str, timeout: int = 30) -> Tuple[bool, str, str]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        try:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º python3
            full_command = f"source .venv/bin/activate && python3 {command}"
            
            result = subprocess.run(
                full_command,
                shell=True,
                executable="/bin/bash",
                capture_output=True,
                text=True,
                timeout=timeout,
                cwd=self.project_root
            )
            
            return (
                result.returncode == 0,
                result.stdout,
                result.stderr
            )
        except subprocess.TimeoutExpired:
            return False, "", f"–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç {timeout} —Å–µ–∫—É–Ω–¥"
        except Exception as e:
            return False, "", f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}"
    
    def test_help_commands(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã —Å–ø—Ä–∞–≤–∫–∏"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Å–ø—Ä–∞–≤–∫–∏...")
        
        help_commands = [
            ("sdb.py --help", "–û—Å–Ω–æ–≤–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞"),
            ("sdb.py monitor --help", "–°–ø—Ä–∞–≤–∫–∞ monitor"),
            ("sdb.py utils --help", "–°–ø—Ä–∞–≤–∫–∞ utils"),
            ("sdb.py monitor status --help", "–°–ø—Ä–∞–≤–∫–∞ monitor status"),
            ("sdb.py utils diagnose --help", "–°–ø—Ä–∞–≤–∫–∞ utils diagnose"),
        ]
        
        for command, description in help_commands:
            success, stdout, stderr = self.run_command(command)
            if success and "help" in stdout.lower() or "usage" in stdout.lower():
                self.log_result(f"–°–ø—Ä–∞–≤–∫–∞ {description}", True, "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                self.log_result(f"–°–ø—Ä–∞–≤–∫–∞ {description}", False, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —Å–ø—Ä–∞–≤–∫—É", stderr)
    
    def test_monitor_status_commands(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã monitor status"""
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ monitor status...")
        
        status_commands = [
            ("sdb.py monitor status", "–ë–∞–∑–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å"),
            ("sdb.py monitor status --detailed", "–ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å"),
            ("sdb.py monitor status --json", "–°—Ç–∞—Ç—É—Å –≤ JSON"),
            ("sdb.py monitor status --health", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"),
        ]
        
        for command, description in status_commands:
            success, stdout, stderr = self.run_command(command)
            if success:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤–µ—Ä–Ω—É–ª–∞ –∫–∞–∫–æ–π-—Ç–æ –≤—ã–≤–æ–¥
                if stdout.strip() or "status" in stdout.lower() or "health" in stdout.lower():
                    self.log_result(f"Status {description}", True, "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                else:
                    self.log_result(f"Status {description}", False, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –æ–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥")
            else:
                self.log_result(f"Status {description}", False, "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π", stderr)
    
    def test_monitor_metrics_commands(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã monitor metrics"""
        print("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ monitor metrics...")
        
        metrics_commands = [
            ("sdb.py monitor metrics", "–ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏"),
            ("sdb.py monitor metrics --cpu --memory", "CPU –∏ –ø–∞–º—è—Ç—å"),
            ("sdb.py monitor metrics --disk --network", "–î–∏—Å–∫ –∏ —Å–µ—Ç—å"),
        ]
        
        for command, description in metrics_commands:
            success, stdout, stderr = self.run_command(command)
            if success:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤–µ—Ä–Ω—É–ª–∞ –∫–∞–∫–æ–π-—Ç–æ –≤—ã–≤–æ–¥
                if stdout.strip() or "metrics" in stdout.lower() or "cpu" in stdout.lower() or "memory" in stdout.lower():
                    self.log_result(f"Metrics {description}", True, "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                else:
                    self.log_result(f"Metrics {description}", False, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –æ–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥")
            else:
                self.log_result(f"Metrics {description}", False, "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π", stderr)
    
    def test_monitor_alerts_commands(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã monitor alerts"""
        print("\nüö® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ monitor alerts...")
        
        alerts_commands = [
            ("sdb.py monitor alerts --list", "–°–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤"),
            ("sdb.py monitor alerts --history", "–ò—Å—Ç–æ—Ä–∏—è –∞–ª–µ—Ä—Ç–æ–≤"),
        ]
        
        for command, description in alerts_commands:
            success, stdout, stderr = self.run_command(command)
            if success:
                # –ö–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –Ω–µ –≤–µ—Ä–Ω—É—Ç—å –∞–ª–µ—Ä—Ç—ã, –Ω–æ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
                self.log_result(f"Alerts {description}", True, "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                self.log_result(f"Alerts {description}", False, "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π", stderr)
    
    def test_monitor_logs_commands(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã monitor logs"""
        print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ monitor logs...")
        
        logs_commands = [
            ("sdb.py monitor logs --analyze", "–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤"),
            ("sdb.py monitor logs --errors", "–û—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö"),
            ("sdb.py monitor logs --last 10", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π"),
            ("sdb.py monitor logs --search error", "–ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫"),
        ]
        
        for command, description in logs_commands:
            success, stdout, stderr = self.run_command(command)
            if success:
                # –ö–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –Ω–µ –Ω–∞–π—Ç–∏ –ª–æ–≥–∏, –Ω–æ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
                self.log_result(f"Logs {description}", True, "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                self.log_result(f"Logs {description}", False, "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π", stderr)
    
    def test_monitor_performance_commands(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã monitor performance"""
        print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ monitor performance...")
        
        performance_commands = [
            ("sdb.py monitor performance", "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"),
            ("sdb.py monitor performance --slow-queries", "–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"),
            ("sdb.py monitor performance --response-time", "–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞"),
            ("sdb.py monitor performance --memory-leaks", "–£—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏"),
        ]
        
        for command, description in performance_commands:
            success, stdout, stderr = self.run_command(command)
            if success:
                # –ö–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –Ω–µ –Ω–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
                self.log_result(f"Performance {description}", True, "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                self.log_result(f"Performance {description}", False, "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π", stderr)
    
    def test_monitor_report_commands(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã monitor report"""
        print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ monitor report...")
        
        report_commands = [
            ("sdb.py monitor report --daily", "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"),
            ("sdb.py monitor report --weekly --format html", "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π HTML –æ—Ç—á–µ—Ç"),
            ("sdb.py monitor report --monthly", "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç"),
        ]
        
        for command, description in report_commands:
            success, stdout, stderr = self.run_command(command)
            if success:
                # –ö–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –Ω–µ —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç, –Ω–æ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
                self.log_result(f"Report {description}", True, "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                self.log_result(f"Report {description}", False, "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π", stderr)
    
    def test_monitor_integrate_commands(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã monitor integrate"""
        print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ monitor integrate...")
        
        integrate_commands = [
            ("sdb.py monitor integrate --prometheus --grafana", "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Prometheus/Grafana"),
            ("sdb.py monitor integrate --datadog", "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å DataDog"),
            ("sdb.py monitor integrate --newrelic", "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å New Relic"),
        ]
        
        for command, description in integrate_commands:
            success, stdout, stderr = self.run_command(command)
            if success:
                # –ö–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é, –Ω–æ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
                self.log_result(f"Integrate {description}", True, "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                self.log_result(f"Integrate {description}", False, "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π", stderr)
    
    def test_utils_diagnose_commands(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã utils diagnose"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ utils diagnose...")
        
        diagnose_commands = [
            ("sdb.py utils diagnose", "–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"),
            ("sdb.py utils diagnose --system", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"),
            ("sdb.py utils diagnose --network", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏"),
            ("sdb.py utils diagnose --database", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ë–î"),
            ("sdb.py utils diagnose --security", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"),
            ("sdb.py utils diagnose --detailed", "–ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"),
        ]
        
        for command, description in diagnose_commands:
            success, stdout, stderr = self.run_command(command)
            if success:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤–µ—Ä–Ω—É–ª–∞ –∫–∞–∫–æ–π-—Ç–æ –≤—ã–≤–æ–¥
                if stdout.strip() or "diagnostic" in stdout.lower() or "system" in stdout.lower():
                    self.log_result(f"Diagnose {description}", True, "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                else:
                    self.log_result(f"Diagnose {description}", False, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –æ–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥")
            else:
                self.log_result(f"Diagnose {description}", False, "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π", stderr)
    
    def test_utils_check_commands(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã utils check"""
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ utils check...")
        
        check_commands = [
            ("sdb.py utils check --files", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤"),
            ("sdb.py utils check --database", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î"),
            ("sdb.py utils check --config", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"),
            ("sdb.py utils check --permissions", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"),
            ("sdb.py utils check --all", "–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"),
        ]
        
        for command, description in check_commands:
            success, stdout, stderr = self.run_command(command)
            if success:
                # –ö–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –Ω–µ –Ω–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
                self.log_result(f"Check {description}", True, "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                self.log_result(f"Check {description}", False, "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π", stderr)
    
    def test_utils_cleanup_commands(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã utils cleanup"""
        print("\nüßπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ utils cleanup...")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
        success, stdout, stderr = self.run_command("sdb.py utils diagnose --detailed")
        if success:
            self.log_result("Diagnose before cleanup", True, "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π")
        
        # –¢–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—á–∏—Å—Ç–∫–∏
        cleanup_commands = [
            ("sdb.py utils cleanup --temp", "–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"),
            ("sdb.py utils cleanup --cache", "–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"),
        ]
        
        for command, description in cleanup_commands:
            success, stdout, stderr = self.run_command(command)
            if success:
                self.log_result(f"Cleanup {description}", True, "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                self.log_result(f"Cleanup {description}", False, "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π", stderr)
    
    def test_utils_convert_commands(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã utils convert —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏"""
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ utils convert...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        test_files = {
            "test.json": '{"name": "test", "value": 123, "items": ["a", "b", "c"]}',
            "test.csv": "name,value,type\ntest,123,string\nsample,456,number",
            "test.yaml": "name: test\nvalue: 123\nitems:\n  - a\n  - b\n  - c"
        }
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        for filename, content in test_files.items():
            filepath = self.project_root / filename
            try:
                with open(filepath, 'w', encoding='utf-8') as f:
                    f.write(content)
                self.log_result(f"–°–æ–∑–¥–∞–Ω–∏–µ {filename}", True, "–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")
            except Exception as e:
                self.log_result(f"–°–æ–∑–¥–∞–Ω–∏–µ {filename}", False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª", str(e))
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
        convert_commands = [
            ("sdb.py utils convert test.json test.yaml", "JSON –≤ YAML"),
            ("sdb.py utils convert test.csv test.json --format json", "CSV –≤ JSON"),
            ("sdb.py utils convert test.yaml test.csv --format csv", "YAML –≤ CSV"),
        ]
        
        for command, description in convert_commands:
            success, stdout, stderr = self.run_command(command)
            if success:
                self.log_result(f"Convert {description}", True, "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                self.log_result(f"Convert {description}", False, "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π", stderr)
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        for filename in test_files.keys():
            filepath = self.project_root / filename
            try:
                if filepath.exists():
                    filepath.unlink()
                # –£–¥–∞–ª—è–µ–º —Ç–∞–∫–∂–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                for ext in ['.json', '.yaml', '.csv']:
                    converted_file = self.project_root / f"test{ext}"
                    if converted_file.exists():
                        converted_file.unlink()
                self.log_result(f"–£–¥–∞–ª–µ–Ω–∏–µ {filename}", True, "–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                self.log_result(f"–£–¥–∞–ª–µ–Ω–∏–µ {filename}", False, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª", str(e))
    
    def test_utils_encrypt_decrypt_commands(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã utils encrypt/decrypt"""
        print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ utils encrypt/decrypt...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        test_content = "–≠—Ç–æ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è\n–°—Ç—Ä–æ–∫–∞ 2\n–°—Ç—Ä–æ–∫–∞ 3"
        test_file = self.project_root / "secret.txt"
        
        try:
            with open(test_file, 'w', encoding='utf-8') as f:
                f.write(test_content)
            self.log_result("–°–æ–∑–¥–∞–Ω–∏–µ secret.txt", True, "–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            self.log_result("–°–æ–∑–¥–∞–Ω–∏–µ secret.txt", False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª", str(e))
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
        encrypt_commands = [
            ("sdb.py utils encrypt secret.txt secret.enc --password mypassword", "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º"),
        ]
        
        for command, description in encrypt_commands:
            success, stdout, stderr = self.run_command(command)
            if success:
                self.log_result(f"Encrypt {description}", True, "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            else:
                self.log_result(f"Encrypt {description}", False, "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π", stderr)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É
        decrypt_commands = [
            ("sdb.py utils decrypt secret.enc decrypted.txt --password mypassword", "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å –ø–∞—Ä–æ–ª–µ–º"),
        ]
        
        for command, description in decrypt_commands:
            success, stdout, stderr = self.run_command(command)
            if success:
                self.log_result(f"Decrypt {description}", True, "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                self.log_result(f"Decrypt {description}", False, "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π", stderr)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        try:
            with open(test_file, 'r', encoding='utf-8') as f:
                original_content = f.read()
            with open(self.project_root / "decrypted.txt", 'r', encoding='utf-8') as f:
                decrypted_content = f.read()
            
            if original_content == decrypted_content:
                self.log_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è", True, "–û—Ä–∏–≥–∏–Ω–∞–ª –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–¥–µ–Ω—Ç–∏—á–Ω—ã")
            else:
                self.log_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è", False, "–û—Ä–∏–≥–∏–Ω–∞–ª –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è")
        except Exception as e:
            self.log_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è", False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ä–∞–≤–Ω–∏—Ç—å —Ñ–∞–π–ª—ã", str(e))
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        test_files_to_remove = ["secret.txt", "secret.enc", "decrypted.txt"]
        for filename in test_files_to_remove:
            filepath = self.project_root / filename
            try:
                if filepath.exists():
                    filepath.unlink()
                # –£–¥–∞–ª—è–µ–º —Ç–∞–∫–∂–µ —Ñ–∞–π–ª—ã –∫–ª—é—á–µ–π
                key_file = self.project_root / f"{filename}.key"
                if key_file.exists():
                    key_file.unlink()
                self.log_result(f"–£–¥–∞–ª–µ–Ω–∏–µ {filename}", True, "–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                self.log_result(f"–£–¥–∞–ª–µ–Ω–∏–µ {filename}", False, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª", str(e))
    
    def test_dangerous_commands_warning(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö"""
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ–± –æ–ø–∞—Å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö...")
        
        dangerous_commands = [
            ("sdb.py utils cleanup --all", "–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–û–ü–ê–°–ù–û)"),
            ("sdb.py utils cleanup --logs", "–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ (–û–°–¢–û–†–û–ñ–ù–û)"),
            ("sdb.py utils cleanup --backups", "–û—á–∏—Å—Ç–∫–∞ –±—ç–∫–∞–ø–æ–≤ (–û–°–¢–û–†–û–ñ–ù–û)"),
        ]
        
        for command, description in dangerous_commands:
            success, stdout, stderr = self.run_command(command)
            # –≠—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Å –æ—à–∏–±–∫–æ–π –∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
            if success:
                self.log_result(f"–û–ø–∞—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ {description}", True, "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º)")
            else:
                # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –∫–æ–º–∞–Ω–¥—ã –º–æ–≥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                self.log_result(f"–û–ø–∞—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ {description}", True, "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å (–≤–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)")
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        print("\n" + "="*60)
        print("üìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ö–û–ú–ê–ù–î MONITOR –ò UTILS")
        print("="*60)
        
        total_tests = len(self.test_results)
        successful_tests = sum(1 for result in self.test_results if result["success"])
        failed_tests = total_tests - successful_tests
        
        print(f"\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
        print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tests}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_tests/total_tests*100):.1f}%")
        
        if failed_tests > 0:
            print(f"\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
            for result in self.test_results:
                if not result["success"]:
                    print(f"   ‚Ä¢ {result['test']}: {result['message']}")
                    if result['details']:
                        print(f"     –î–µ—Ç–∞–ª–∏: {result['details']}")
        
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
        for result in self.test_results:
            if result["success"]:
                print(f"   ‚Ä¢ {result['test']}: {result['message']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        report_file = self.project_root / "test_monitor_utils_report.json"
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump({
                    "summary": {
                        "total_tests": total_tests,
                        "successful_tests": successful_tests,
                        "failed_tests": failed_tests,
                        "success_rate": (successful_tests/total_tests*100) if total_tests > 0 else 0
                    },
                    "results": self.test_results
                }, f, indent=2, ensure_ascii=False)
            print(f"\nüìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")
        except Exception as e:
            print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç: {e}")
        
        return successful_tests == total_tests
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ monitor –∏ utils")
        print("="*60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if not (self.project_root / "sdb.py").exists():
            print("‚ùå –û—à–∏–±–∫–∞: sdb.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        venv_path = self.project_root / ".venv"
        if not venv_path.exists():
            print("‚ùå –û—à–∏–±–∫–∞: –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ .venv –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        self.test_help_commands()
        self.test_monitor_status_commands()
        self.test_monitor_metrics_commands()
        self.test_monitor_alerts_commands()
        self.test_monitor_logs_commands()
        self.test_monitor_performance_commands()
        self.test_monitor_report_commands()
        self.test_monitor_integrate_commands()
        self.test_utils_diagnose_commands()
        self.test_utils_check_commands()
        self.test_utils_cleanup_commands()
        self.test_utils_convert_commands()
        self.test_utils_encrypt_decrypt_commands()
        self.test_dangerous_commands_warning()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        return self.generate_report()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ monitor –∏ utils –≤ SwiftDevBot CLI")
    print("="*60)
    
    tester = MonitorUtilsTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –Ω–µ—É–¥–∞—á–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á–µ—Ç –≤—ã—à–µ.")
        return 1


if __name__ == "__main__":
    sys.exit(main()) 