#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ monitor –∏ utils
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
"""

import subprocess
import sys
from pathlib import Path

def run_command(command: str, description: str = "") -> bool:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\nüîß –í—ã–ø–æ–ª–Ω—è—é: {command}")
    if description:
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
    
    try:
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º python3
        full_command = f"source .venv/bin/activate && python3 {command}"
        
        result = subprocess.run(
            full_command,
            shell=True,
            executable="/bin/bash",
            capture_output=True,
            text=True,
            timeout=30,
            cwd=Path(__file__).parent
        )
        
        if result.returncode == 0:
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            if result.stdout.strip():
                print("üì§ –í—ã–≤–æ–¥:")
                print(result.stdout)
            return True
        else:
            print("‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π!")
            if result.stderr.strip():
                print("üì§ –û—à–∏–±–∫–∞:")
                print(result.stderr)
            return False
            
    except subprocess.TimeoutExpired:
        print("‚è∞ –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç (30 —Å–µ–∫—É–Ω–¥)")
        return False
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        return False

def test_monitor_commands():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã monitor"""
    print("\n" + "="*60)
    print("üìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ê–ù–î MONITOR")
    print("="*60)
    
    monitor_commands = [
        # Status –∫–æ–º–∞–Ω–¥—ã
        ("sdb.py monitor status", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"),
        ("sdb.py monitor status --detailed", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"),
        ("sdb.py monitor status --json", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤ JSON"),
        ("sdb.py monitor status --health", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"),
        
        # Metrics –∫–æ–º–∞–Ω–¥—ã
        ("sdb.py monitor metrics", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫"),
        ("sdb.py monitor metrics --cpu --memory", "–ü—Ä–æ–≤–µ—Ä–∫–∞ CPU –∏ –ø–∞–º—è—Ç–∏"),
        ("sdb.py monitor metrics --disk --network", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–∞ –∏ —Å–µ—Ç–∏"),
        
        # Alerts –∫–æ–º–∞–Ω–¥—ã
        ("sdb.py monitor alerts --list", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"),
        ("sdb.py monitor alerts --history", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤"),
        
        # Logs –∫–æ–º–∞–Ω–¥—ã
        ("sdb.py monitor logs --analyze", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤"),
        ("sdb.py monitor logs --errors", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö"),
        ("sdb.py monitor logs --last 5", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –∑–∞–ø–∏—Å–µ–π"),
        ("sdb.py monitor logs --search error", "–ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö"),
        
        # Performance –∫–æ–º–∞–Ω–¥—ã
        ("sdb.py monitor performance", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"),
        ("sdb.py monitor performance --slow-queries", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"),
        ("sdb.py monitor performance --response-time", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞"),
        ("sdb.py monitor performance --memory-leaks", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏"),
        
        # Report –∫–æ–º–∞–Ω–¥—ã
        ("sdb.py monitor report --daily", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"),
        ("sdb.py monitor report --weekly --format html", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ HTML –æ—Ç—á–µ—Ç–∞"),
        
        # Integrate –∫–æ–º–∞–Ω–¥—ã
        ("sdb.py monitor integrate --prometheus --grafana", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Prometheus/Grafana"),
        ("sdb.py monitor integrate --datadog", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å DataDog"),
    ]
    
    success_count = 0
    total_count = len(monitor_commands)
    
    for command, description in monitor_commands:
        if run_command(command, description):
            success_count += 1
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã monitor: {success_count}/{total_count} —É—Å–ø–µ—à–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")
    return success_count, total_count

def test_utils_commands():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã utils"""
    print("\n" + "="*60)
    print("üõ†Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ê–ù–î UTILS")
    print("="*60)
    
    utils_commands = [
        # Diagnose –∫–æ–º–∞–Ω–¥—ã
        ("sdb.py utils diagnose", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"),
        ("sdb.py utils diagnose --system", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"),
        ("sdb.py utils diagnose --network", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–µ—Ç–∏"),
        ("sdb.py utils diagnose --database", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ë–î"),
        ("sdb.py utils diagnose --security", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"),
        ("sdb.py utils diagnose --detailed", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"),
        
        # Check –∫–æ–º–∞–Ω–¥—ã
        ("sdb.py utils check --files", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤"),
        ("sdb.py utils check --database", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î"),
        ("sdb.py utils check --config", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"),
        ("sdb.py utils check --permissions", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"),
        ("sdb.py utils check --all", "–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"),
        
        # Cleanup –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ)
        ("sdb.py utils cleanup --temp", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"),
        ("sdb.py utils cleanup --cache", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞"),
    ]
    
    success_count = 0
    total_count = len(utils_commands)
    
    for command, description in utils_commands:
        if run_command(command, description):
            success_count += 1
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã utils: {success_count}/{total_count} —É—Å–ø–µ—à–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")
    return success_count, total_count

def test_convert_commands():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏"""
    print("\n" + "="*60)
    print("üîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ê–ù–î –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    test_files = {
        "quick_test.json": '{"name": "quick_test", "value": 456, "items": ["x", "y", "z"]}',
        "quick_test.csv": "name,value,type\nquick_test,456,number\nsample,789,string",
    }
    
    project_root = Path(__file__).parent
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã
    for filename, content in test_files.items():
        filepath = project_root / filename
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {filename}")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å {filename}: {e}")
            return 0, 0
    
    convert_commands = [
        ("sdb.py utils convert quick_test.json quick_test.yaml", "JSON –≤ YAML"),
        ("sdb.py utils convert quick_test.csv quick_test_output.json --format json", "CSV –≤ JSON"),
    ]
    
    success_count = 0
    total_count = len(convert_commands)
    
    for command, description in convert_commands:
        if run_command(command, description):
            success_count += 1
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    for filename in test_files.keys():
        filepath = project_root / filename
        try:
            if filepath.exists():
                filepath.unlink()
            # –£–¥–∞–ª—è–µ–º —Ç–∞–∫–∂–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for ext in ['.yaml', '.json']:
                converted_file = project_root / f"quick_test{ext}"
                if converted_file.exists():
                    converted_file.unlink()
                output_file = project_root / f"quick_test_output{ext}"
                if output_file.exists():
                    output_file.unlink()
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {filename}")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {filename}: {e}")
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {success_count}/{total_count} —É—Å–ø–µ—à–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")
    return success_count, total_count

def test_encrypt_commands():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
    print("\n" + "="*60)
    print("üîê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ê–ù–î –®–ò–§–†–û–í–ê–ù–ò–Ø")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_content = "–≠—Ç–æ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"
    test_file = Path(__file__).parent / "quick_secret.txt"
    
    try:
        with open(test_file, 'w', encoding='utf-8') as f:
            f.write(test_content)
        print("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: quick_secret.txt")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {e}")
        return 0, 0
    
    encrypt_commands = [
        ("sdb.py utils encrypt quick_secret.txt quick_secret.enc --password testpass", "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"),
        ("sdb.py utils decrypt quick_secret.enc quick_secret_decrypted.txt --password testpass", "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞"),
    ]
    
    success_count = 0
    total_count = len(encrypt_commands)
    
    for command, description in encrypt_commands:
        if run_command(command, description):
            success_count += 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
    try:
        with open(test_file, 'r', encoding='utf-8') as f:
            original_content = f.read()
        with open(Path(__file__).parent / "quick_secret_decrypted.txt", 'r', encoding='utf-8') as f:
            decrypted_content = f.read()
        
        if original_content == decrypted_content:
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–¥–µ–Ω—Ç–∏—á–Ω—ã")
            success_count += 1
        else:
            print("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: —Ñ–∞–π–ª—ã —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è")
        total_count += 1
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ: {e}")
        total_count += 1
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    test_files_to_remove = ["quick_secret.txt", "quick_secret.enc", "quick_secret_decrypted.txt"]
    for filename in test_files_to_remove:
        filepath = Path(__file__).parent / filename
        try:
            if filepath.exists():
                filepath.unlink()
            # –£–¥–∞–ª—è–µ–º —Ç–∞–∫–∂–µ —Ñ–∞–π–ª—ã –∫–ª—é—á–µ–π
            key_file = Path(__file__).parent / f"{filename}.key"
            if key_file.exists():
                key_file.unlink()
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {filename}")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {filename}: {e}")
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {success_count}/{total_count} —É—Å–ø–µ—à–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")
    return success_count, total_count

def test_help_commands():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã —Å–ø—Ä–∞–≤–∫–∏"""
    print("\n" + "="*60)
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ê–ù–î –°–ü–†–ê–í–ö–ò")
    print("="*60)
    
    help_commands = [
        ("sdb.py --help", "–û—Å–Ω–æ–≤–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞"),
        ("sdb.py monitor --help", "–°–ø—Ä–∞–≤–∫–∞ monitor"),
        ("sdb.py utils --help", "–°–ø—Ä–∞–≤–∫–∞ utils"),
        ("sdb.py monitor status --help", "–°–ø—Ä–∞–≤–∫–∞ monitor status"),
        ("sdb.py utils diagnose --help", "–°–ø—Ä–∞–≤–∫–∞ utils diagnose"),
    ]
    
    success_count = 0
    total_count = len(help_commands)
    
    for command, description in help_commands:
        if run_command(command, description):
            success_count += 1
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–ø—Ä–∞–≤–∫–∏: {success_count}/{total_count} —É—Å–ø–µ—à–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")
    return success_count, total_count

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ë–´–°–¢–†–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ê–ù–î MONITOR –ò UTILS")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    project_root = Path(__file__).parent
    if not (project_root / "sdb.py").exists():
        print("‚ùå –û—à–∏–±–∫–∞: sdb.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        return 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    venv_path = project_root / ".venv"
    if not venv_path.exists():
        print("‚ùå –û—à–∏–±–∫–∞: –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ .venv –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return 1
    
    print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    total_success = 0
    total_commands = 0
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø—Ä–∞–≤–∫—É
    success, total = test_help_commands()
    total_success += success
    total_commands += total
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º monitor
    success, total = test_monitor_commands()
    total_success += success
    total_commands += total
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º utils
    success, total = test_utils_commands()
    total_success += success
    total_commands += total
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
    success, total = test_convert_commands()
    total_success += success
    total_commands += total
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
    success, total = test_encrypt_commands()
    total_success += success
    total_commands += total
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*60)
    print(f"–í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {total_commands}")
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {total_success}")
    print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {total_commands - total_success}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(total_success/total_commands*100):.1f}%")
    
    if total_success == total_commands:
        print("\nüéâ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –Ω–µ—É–¥–∞—á–Ω–æ.")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 