#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏ SwiftDevBot –≤ –∞—Ä—Ö–∏–≤ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ
–°–æ–∑–¥–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π –∫ –∑–∞–ø—É—Å–∫—É –ø–∞–∫–µ—Ç –±–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∫–µ—à–∞
"""

import os
import sys
import shutil
import zipfile
import tarfile
from pathlib import Path
from datetime import datetime
import json
import yaml

class BotPackager:
    """–£–ø–∞–∫–æ–≤—â–∏–∫ –±–æ—Ç–∞ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
    
    def __init__(self, project_root: str = None):
        self.project_root = Path(project_root or os.getcwd())
        self.package_name = f"SwiftDevBot_deploy_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        self.temp_dir = self.project_root / "temp_package"
        self.output_dir = self.project_root / "deploy_packages"
        
        # –§–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        self.exclude_patterns = {
            # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Ñ–∏–≥–∏
            'config.yaml',
            'config.yml', 
            '.env',
            '*.env',
            
            # –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
            'project_data/',
            'project_data/*',
            
            # –ö–µ—à –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            '__pycache__/',
            '*.pyc',
            '*.pyo',
            '.pytest_cache/',
            'temp_package/',
            'deploy_packages/',
            'nohup.out',
            
            # Git –∏ IDE
            '.git/',
            '.gitignore',
            '.vscode/',
            '.idea/',
            '*.swp',
            '*.swo',
            
            # –õ–æ–≥–∏
            '*.log',
            'logs/',
            
            # –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            '.venv/',
            'venv/',
            'env/',
            
            # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
            '*.bak',
            '*.backup',
            '*~',
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ –∏ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã
            'test_*.py',
            '*_test.py',
            'debug_*.py',
            'demo_*.py',
            'quick_test.py',
            'check_*.py',
            'fix_*.py',
            'sync_*.py',
            'create_table.py',
            'simple_rbac_test.py',
            'test_integration.py',
            'test_web_server.py',
            'tests/',
            
            # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é)
            '*_REPORT.md',
            '*_GUIDE.md',
            '*_ADDED.md',
            '*_CHANGES.md',
            '*_FIXES.md',
            '*_IMPROVEMENTS.md',
            '*_COMPLETE.md',
            '*_UPDATE.md',
            '*_STATUS*.md',
            '*_RESULTS.md',
            'FINAL_*.md',
            'FIXES_*.md',
            'IMPROVEMENTS_*.md',
            'DEVELOPMENT_*.md',
            '–ú–û–î–£–õ–ò_*.md',
            'YOUTUBE_*.md',
            'CALLBACK_*.md',
            'CLI_*.md',
            'PROJECT_*.md',
            'TEST_*.md',
            'Docs/',
            'docs/',
            
            # –î—Ä—É–≥–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            '.DS_Store',
            'Thumbs.db',
            '*.tmp',
            '*.temp',
            '.python-version'
        }
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.required_files = [
            'run_bot.py',
            'sdb.py', 
            'requirements.txt',
            'README.md',
            'alembic.ini',
            'babel.cfg'
        ]
        
        # –§–∞–π–ª—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤
        self.template_files = {
            'config.yaml': 'config.template.yaml',
            '.env': '.env.template'
        }
    
    def create_package(self, format_type: str = 'zip') -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–∫–µ—Ç –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        print(f"üöÄ –ù–∞—á–∏–Ω–∞—é —É–ø–∞–∫–æ–≤–∫—É SwiftDevBot...")
        print(f"üìÅ –ü—Ä–æ–µ–∫—Ç: {self.project_root}")
        print(f"üì¶ –ü–∞–∫–µ—Ç: {self.package_name}")
        
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
            self._prepare_directories()
            self._check_required_files()
            
            # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            self._copy_project_files()
            self._create_template_configs()
            self._create_deployment_scripts()
            self._create_readme()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
            archive_path = self._create_archive(format_type)
            
            # –û—á–∏—Å—Ç–∫–∞
            self._cleanup()
            
            print(f"‚úÖ –ü–∞–∫–µ—Ç –≥–æ—Ç–æ–≤: {archive_path}")
            print(f"üìä –†–∞–∑–º–µ—Ä: {self._get_file_size(archive_path)}")
            
            return str(archive_path)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–ø–∞–∫–æ–≤–∫–∏: {e}")
            self._cleanup()
            return None
    
    def _prepare_directories(self):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        if self.temp_dir.exists():
            shutil.rmtree(self.temp_dir)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.temp_dir.mkdir(exist_ok=True)
        self.output_dir.mkdir(exist_ok=True)
        
        print(f"üìÅ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {self.temp_dir}")
    
    def _check_required_files(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        missing = []
        for file in self.required_files:
            if not (self.project_root / file).exists():
                missing.append(file)
        
        if missing:
            raise FileNotFoundError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã: {missing}")
        
        print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    
    def _should_exclude(self, path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª/–ø–∞–ø–∫—É"""
        rel_path = path.relative_to(self.project_root)
        
        for pattern in self.exclude_patterns:
            if self._match_pattern(str(rel_path), pattern):
                return True
        
        return False
    
    def _match_pattern(self, path: str, pattern: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—É—Ç–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—É"""
        import fnmatch
        
        # –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if path == pattern or path == pattern.rstrip('/'):
            return True
        
        # Wildcard –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        if '*' in pattern:
            if fnmatch.fnmatch(path, pattern):
                return True
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        if pattern.endswith('/'):
            if path.startswith(pattern) or path.startswith(pattern.rstrip('/')):
                return True
        
        return False
    
    def _copy_project_files(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        print("üìã –ö–æ–ø–∏—Ä—É—é —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞...")
        
        copied_count = 0
        excluded_count = 0
        
        for root, dirs, files in os.walk(self.project_root):
            root_path = Path(root)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            if self._should_exclude(root_path):
                dirs.clear()  # –ù–µ –æ–±—Ö–æ–¥–∏–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                excluded_count += 1
                continue
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            rel_dir = root_path.relative_to(self.project_root)
            target_dir = self.temp_dir / rel_dir
            target_dir.mkdir(parents=True, exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
            for file in files:
                file_path = root_path / file
                
                if self._should_exclude(file_path):
                    excluded_count += 1
                    continue
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π
                if file_path.name.endswith('.py') and 'alembic_migrations/versions' in str(file_path):
                    if file_path.stat().st_size == 0:  # –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª
                        excluded_count += 1
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ revision –≤ —Ñ–∞–π–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            content = f.read()
                            if content and 'revision:' not in content and 'revision =' not in content:
                                excluded_count += 1
                                continue
                    except:
                        excluded_count += 1
                        continue
                
                target_path = target_dir / file
                shutil.copy2(file_path, target_path)
                copied_count += 1
        
        print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {copied_count}")
        print(f"üö´ –ò—Å–∫–ª—é—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {excluded_count}")
    
    def _create_template_configs(self):
        """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        print("‚öôÔ∏è –°–æ–∑–¥–∞—é —à–∞–±–ª–æ–Ω—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...")
        
        # –®–∞–±–ª–æ–Ω config.yaml
        config_template = {
            'bot': {
                'token': 'YOUR_BOT_TOKEN_HERE',
                'username': 'your_bot_username'
            },
            'admin': {
                'super_admin_telegram_id': 123456789,  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û! –í–∞—à Telegram ID
                'auto_create_super_admin': True
            },
            'database': {
                'url': 'sqlite:///project_data/Database_files/sdb.db',
                'echo': False
            },
            'cache': {
                'backend': 'memory',
                'ttl': 3600
            },
            'logging': {
                'level': 'INFO',
                'file_logging': True,
                'console_logging': True
            },
            'features': {
                'web_download_server': {
                    'enabled': True,
                    'host': '0.0.0.0',
                    'port': 8080,
                    'external_host': 'YOUR_EXTERNAL_IP_HERE',
                    'external_port': 8080
                }
            }
        }
        
        config_path = self.temp_dir / 'config.template.yaml'
        with open(config_path, 'w', encoding='utf-8') as f:
            yaml.dump(config_template, f, default_flow_style=False, allow_unicode=True)
        
        # –®–∞–±–ª–æ–Ω .env
        env_template = """# SwiftDevBot Environment Variables
# –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è

# –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç—å —É @BotFather)
BOT_TOKEN=your_bot_token_here

# –°–£–ü–ï–† –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–† (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!)
SUPER_ADMIN_TELEGRAM_ID=123456789

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è SQLite)
DATABASE_URL=sqlite:///project_data/Database_files/sdb.db

# –í–Ω–µ—à–Ω–∏–π IP –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–≤–∞—à –ø—É–±–ª–∏—á–Ω—ã–π IP –∏–ª–∏ –¥–æ–º–µ–Ω)
EXTERNAL_HOST=your_external_ip_here

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
DEBUG=False
LOG_LEVEL=INFO
"""
        
        env_path = self.temp_dir / '.env.template'
        with open(env_path, 'w', encoding='utf-8') as f:
            f.write(env_template)
        
        print("‚úÖ –®–∞–±–ª–æ–Ω—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å–æ–∑–¥–∞–Ω—ã")
    
    def _create_deployment_scripts(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        print("üìú –°–æ–∑–¥–∞—é —Å–∫—Ä–∏–ø—Ç—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...")
        
        # –°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è Linux
        install_script = """#!/bin/bash
# SwiftDevBot Installation Script

set -e

echo "üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SwiftDevBot..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python 3 –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.8+"
    exit 1
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
python3 -m venv .venv
source .venv/bin/activate

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip
pip install --upgrade pip

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo "‚¨áÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
pip install -r requirements.txt

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞..."
mkdir -p project_data/{Database_files,Logs,Cache_data,core_backups,module_backups}

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if [ ! -f config.yaml ]; then
    if [ -f config.template.yaml ]; then
        cp config.template.yaml config.yaml
        echo "‚öôÔ∏è –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω config.template.yaml -> config.yaml"
        echo "‚ùó –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ config.yaml —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏!"
    fi
fi

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo "üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
python -m alembic upgrade head

echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo ""
echo "üìã –ß—Ç–æ –¥–∞–ª—å—à–µ:"
echo "1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ config.yaml - —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
echo "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python run_bot.py"
echo ""
echo "üìñ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ README.md"
"""
        
        install_path = self.temp_dir / 'install.sh'
        with open(install_path, 'w', encoding='utf-8') as f:
            f.write(install_script)
        os.chmod(install_path, 0o755)
        
        # –°–∫—Ä–∏–ø—Ç –¥–ª—è Windows
        install_bat = """@echo off
REM SwiftDevBot Installation Script for Windows

echo üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SwiftDevBot...

REM –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
python --version >nul 2>&1
if errorlevel 1 (
    echo ‚ùå Python –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.8+
    pause
    exit /b 1
)

REM –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...
python -m venv .venv
call .venv\\Scripts\\activate.bat

REM –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip
python -m pip install --upgrade pip

REM –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo ‚¨áÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...
pip install -r requirements.txt

REM –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
echo üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...
if not exist "project_data" mkdir project_data
if not exist "project_data\\Database_files" mkdir project_data\\Database_files
if not exist "project_data\\Logs" mkdir project_data\\Logs
if not exist "project_data\\Cache_data" mkdir project_data\\Cache_data
if not exist "project_data\\core_backups" mkdir project_data\\core_backups
if not exist "project_data\\module_backups" mkdir project_data\\module_backups

REM –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if not exist "config.yaml" (
    if exist "config.template.yaml" (
        copy config.template.yaml config.yaml
        echo ‚öôÔ∏è –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω config.template.yaml -^> config.yaml
        echo ‚ùó –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ config.yaml —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏!
    )
)

REM –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...
python -m alembic upgrade head

echo ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
echo.
echo üìã –ß—Ç–æ –¥–∞–ª—å—à–µ:
echo 1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ config.yaml - —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
echo 2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python run_bot.py
echo.
echo üìñ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ README.md
pause
"""
        
        install_bat_path = self.temp_dir / 'install.bat'
        with open(install_bat_path, 'w', encoding='utf-8') as f:
            f.write(install_bat)
        
        # –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞
        start_script = """#!/bin/bash
# SwiftDevBot Start Script

cd "$(dirname "$0")"

if [ ! -d ".venv" ]; then
    echo "‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ install.sh"
    exit 1
fi

echo "üöÄ –ó–∞–ø—É—Å–∫ SwiftDevBot..."
source .venv/bin/activate
python run_bot.py
"""
        
        start_path = self.temp_dir / 'start.sh'
        with open(start_path, 'w', encoding='utf-8') as f:
            f.write(start_script)
        os.chmod(start_path, 0o755)
        
        # –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –¥–ª—è Windows
        start_bat = """@echo off
cd /d "%~dp0"

if not exist ".venv" (
    echo ‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ install.bat
    pause
    exit /b 1
)

echo üöÄ –ó–∞–ø—É—Å–∫ SwiftDevBot...
call .venv\\Scripts\\activate.bat
python run_bot.py
pause
"""
        
        start_bat_path = self.temp_dir / 'start.bat'
        with open(start_bat_path, 'w', encoding='utf-8') as f:
            f.write(start_bat)
        
        print("‚úÖ –°–∫—Ä–∏–ø—Ç—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã")
    
    def _create_readme(self):
        """–°–æ–∑–¥–∞–µ—Ç README –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        readme_content = f"""# SwiftDevBot - –ì–æ—Ç–æ–≤—ã–π –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –ø–∞–∫–µ—Ç

–≠—Ç–æ—Ç –ø–∞–∫–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤—ã–π –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é SwiftDevBot.

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

### Linux/macOS:
```bash
# –†–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤
unzip {self.package_name}.zip
cd {self.package_name}

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
chmod +x install.sh
./install.sh

# –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
nano config.yaml

# –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
./start.sh
```

### Windows:
```cmd
REM –†–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤ –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–ø–∫—É
cd {self.package_name}

REM –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
install.bat

REM –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å config.yaml –≤ –ª—é–±–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ

REM –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
start.bat
```

## ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞

### 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
1. –ù–∞–ø–∏—à–∏—Ç–µ @BotFather –≤ Telegram
2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π `/newbot`
3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω

### 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ config.yaml
–û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª `config.yaml` –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ:
- `bot.token` - —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
- `features.web_download_server.external_host` - –≤–∞—à –≤–Ω–µ—à–Ω–∏–π IP –∞–¥—Ä–µ—Å

### 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
–ï—Å–ª–∏ –Ω—É–∂–µ–Ω –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:
- –ò–∑–º–µ–Ω–∏—Ç–µ `features.web_download_server.port` –≤ config.yaml
- –û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ—Ä—Ç –≤ —Ñ–∞–π—Ä–≤–æ–ª–µ

## üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

- Python 3.8 –∏–ª–∏ –≤—ã—à–µ
- 500+ –ú–ë —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
- –î–æ—Å—Ç—É–ø –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
- –û—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç 8080 (–∏–ª–∏ –¥—Ä—É–≥–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π) –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

- `core/` - –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞
- `modules/` - –ú–æ–¥—É–ª–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (YouTube downloader –∏ –¥—Ä.)
- `project_data/` - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ (–ë–î, –ª–æ–≥–∏, –∫–µ—à)
- `config.yaml` - –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
- `requirements.txt` - Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

## üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

- ‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å YouTube
- ‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
- ‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π  
- ‚úÖ –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
- ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
- ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

## üõ†Ô∏è –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –±–æ—Ç–µ:
- `/admin` - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
- `/modules` - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏
- `/users` - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

## üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ `project_data/Logs/`
2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–æ–≤

## üìã Changelog

–í–µ—Ä—Å–∏—è –ø–∞–∫–µ—Ç–∞: {datetime.now().strftime('%Y.%m.%d')}
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}

---
ü§ñ SwiftDevBot - Telegram –±–æ—Ç –¥–ª—è YouTube —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
"""
        
        readme_path = self.temp_dir / 'DEPLOY_README.md'
        with open(readme_path, 'w', encoding='utf-8') as f:
            f.write(readme_content)
        
        print("‚úÖ README –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω")
    
    def _create_archive(self, format_type: str) -> Path:
        """–°–æ–∑–¥–∞–µ—Ç –∞—Ä—Ö–∏–≤"""
        print(f"üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {format_type}...")
        
        if format_type == 'zip':
            archive_path = self.output_dir / f"{self.package_name}.zip"
            with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for root, dirs, files in os.walk(self.temp_dir):
                    for file in files:
                        file_path = Path(root) / file
                        arc_name = file_path.relative_to(self.temp_dir)
                        zipf.write(file_path, arc_name)
        
        elif format_type == 'tar.gz':
            archive_path = self.output_dir / f"{self.package_name}.tar.gz"
            with tarfile.open(archive_path, 'w:gz') as tarf:
                tarf.add(self.temp_dir, arcname=self.package_name)
        
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {format_type}")
        
        return archive_path
    
    def _cleanup(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        if self.temp_dir.exists():
            shutil.rmtree(self.temp_dir)
    
    def _get_file_size(self, file_path: Path) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        size = file_path.stat().st_size
        for unit in ['–ë', '–ö–ë', '–ú–ë', '–ì–ë']:
            if size < 1024:
                return f"{size:.1f} {unit}"
            size /= 1024
        return f"{size:.1f} –¢–ë"


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–£–ø–∞–∫–æ–≤–∫–∞ SwiftDevBot –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è')
    parser.add_argument('--format', choices=['zip', 'tar.gz'], default='zip',
                       help='–§–æ—Ä–º–∞—Ç –∞—Ä—Ö–∏–≤–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: zip)')
    parser.add_argument('--project-root', type=str,
                       help='–ü—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞)')
    
    args = parser.parse_args()
    
    try:
        packager = BotPackager(args.project_root)
        result = packager.create_package(args.format)
        
        if result:
            print("\nüéâ –£–ø–∞–∫–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üì¶ –§–∞–π–ª: {result}")
            print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é:")
            print("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞—Ä—Ö–∏–≤ –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Å–µ—Ä–≤–µ—Ä")
            print("2. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –∞—Ä—Ö–∏–≤")
            print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ install.sh (Linux/macOS) –∏–ª–∏ install.bat (Windows)")
            print("4. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ config.yaml")
            print("5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ start.sh –∏–ª–∏ start.bat")
        else:
            print("\n‚ùå –£–ø–∞–∫–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –£–ø–∞–∫–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main()
