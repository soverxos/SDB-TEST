#!/usr/bin/env python3
# scripts/validate_environment.py

import sys
import os
import subprocess
from pathlib import Path
from typing import List, Tuple, Optional
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich import box

console = Console()

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
PYTHON_MIN_VERSION = (3, 10)
REQUIRED_PACKAGES = [
    ("aiogram", "3.0.0"),
    ("pydantic", "2.0.0"),
    ("sqlalchemy", "2.0.0"),
    ("loguru", "0.6.0"),
    ("typer", "0.9.0"),
    ("rich", "13.0.0"),
]

OPTIONAL_PACKAGES = [
    ("redis", "4.5.0"),
    ("psycopg", "3.1.0"),
    ("aiomysql", "0.1.0"),
    ("pytest", "7.0.0"),
]


def check_python_version() -> Tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python."""
    current_version = sys.version_info[:2]
    if current_version >= PYTHON_MIN_VERSION:
        return True, f"‚úÖ Python {sys.version.split()[0]}"
    else:
        return False, f"‚ùå Python {sys.version.split()[0]} (—Ç—Ä–µ–±—É–µ—Ç—Å—è >= {'.'.join(map(str, PYTHON_MIN_VERSION))})"


def check_package_version(package_name: str, min_version: str) -> Tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é –ø–∞–∫–µ—Ç–∞."""
    try:
        result = subprocess.run(
            [sys.executable, "-c", f"import {package_name}; print({package_name}.__version__)"],
            capture_output=True,
            text=True,
            timeout=5
        )
        
        if result.returncode == 0:
            installed_version = result.stdout.strip()
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å packaging.version)
            return True, f"‚úÖ {package_name} {installed_version}"
        else:
            return False, f"‚ùå {package_name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
    except subprocess.TimeoutExpired:
        return False, f"‚è±Ô∏è {package_name} –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç"
    except Exception as e:
        return False, f"‚ùå {package_name} –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}"


def check_environment_variables() -> List[Tuple[bool, str]]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    checks = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ BOT_TOKEN
    bot_token = os.getenv("BOT_TOKEN")
    if bot_token:
        if len(bot_token) > 10 and ":" in bot_token:
            checks.append((True, "‚úÖ BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"))
        else:
            checks.append((False, "‚ö†Ô∏è BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"))
    else:
        checks.append((False, "‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
    env_file = Path(".env")
    if env_file.exists():
        checks.append((True, "‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω"))
    else:
        checks.append((False, "‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω"))
    
    return checks


def check_project_structure() -> List[Tuple[bool, str]]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞."""
    checks = []
    
    required_dirs = [
        "core",
        "modules", 
        "cli_commands",
        "project_data",
        "locales"
    ]
    
    required_files = [
        "config.yaml",
        "requirements.txt",
        "run_bot.py",
        "sdb.py"
    ]
    
    for dir_name in required_dirs:
        if Path(dir_name).is_dir():
            checks.append((True, f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name}/"))
        else:
            checks.append((False, f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name}/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"))
    
    for file_name in required_files:
        if Path(file_name).is_file():
            checks.append((True, f"‚úÖ –§–∞–π–ª {file_name}"))
        else:
            checks.append((False, f"‚ùå –§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"))
    
    return checks


def check_database() -> Tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        sys.path.insert(0, str(Path.cwd()))
        from core.app_settings import settings
        
        # settings —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
        db_path = settings.core.project_data_path / settings.db.sqlite_path
        
        if db_path.exists():
            return True, f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞: {db_path}"
        else:
            return False, f"‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}"
            
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}"


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
    console.print(Panel(
        "[bold cyan]üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è SwiftDevBot[/bold cyan]",
        box=box.DOUBLE
    ))
    
    all_checks_passed = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    python_ok, python_msg = check_python_version()
    console.print(python_msg)
    if not python_ok:
        all_checks_passed = False
    
    console.print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    console.print("[bold]–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:[/bold]")
    for package, min_ver in REQUIRED_PACKAGES:
        package_ok, package_msg = check_package_version(package, min_ver)
        console.print(f"  {package_msg}")
        if not package_ok:
            all_checks_passed = False
    
    console.print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    console.print("[bold]–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:[/bold]")
    for package, min_ver in OPTIONAL_PACKAGES:
        package_ok, package_msg = check_package_version(package, min_ver)
        console.print(f"  {package_msg}")
    
    console.print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.print("[bold]–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:[/bold]")
    env_checks = check_environment_variables()
    for env_ok, env_msg in env_checks:
        console.print(f"  {env_msg}")
        if not env_ok and "BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" in env_msg:
            all_checks_passed = False
    
    console.print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    console.print("[bold]–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:[/bold]")
    structure_checks = check_project_structure()
    for struct_ok, struct_msg in structure_checks:
        console.print(f"  {struct_msg}")
        if not struct_ok and any(critical in struct_msg for critical in ["core/", "config.yaml", "sdb.py"]):
            all_checks_passed = False
    
    console.print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.print("[bold]–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:[/bold]")
    db_ok, db_msg = check_database()
    console.print(f"  {db_msg}")
    
    console.print()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if all_checks_passed:
        console.print(Panel(
            "[bold green]‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! SwiftDevBot –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.[/bold green]",
            style="green"
        ))
    else:
        console.print(Panel(
            "[bold red]‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.[/bold red]",
            style="red"
        ))
        
        console.print("\n[yellow]–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:[/yellow]")
        console.print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Python >= 3.10")
        console.print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        console.print("3. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å BOT_TOKEN")
        console.print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./sdb.py config init")
        console.print("5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./sdb.py db upgrade head")
    
    return 0 if all_checks_passed else 1


if __name__ == "__main__":
    sys.exit(main())
