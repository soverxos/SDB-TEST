#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –¥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –¥–ª—è Telegram
"""

import sys
import os
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent))

from modules.youtube_downloader.utils import YouTubeDownloader
from loguru import logger

async def compress_video_file(input_path: str, max_size_mb: int = 45):
    """–°–∂–∏–º–∞–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä downloader –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–∞ —Å–∂–∞—Ç–∏—è
    downloader = YouTubeDownloader()
    
    input_file = Path(input_path)
    if not input_file.exists():
        logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_path}")
        return False
    
    file_size_mb = input_file.stat().st_size / (1024*1024)
    logger.info(f"üé¨ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {input_file.name}")
    logger.info(f"üì¶ –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} –ú–ë")
    
    if file_size_mb <= max_size_mb:
        logger.info(f"‚úÖ –§–∞–π–ª —É–∂–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è Telegram ({file_size_mb:.1f} –ú–ë <= {max_size_mb} –ú–ë)")
        return True
    
    logger.info(f"üîß –ù–∞—á–∏–Ω–∞–µ–º —Å–∂–∞—Ç–∏–µ –¥–æ {max_size_mb} –ú–ë...")
    
    result = await downloader.compress_video_for_telegram(input_path, max_size_mb)
    
    if result["success"]:
        compressed_size_mb = result["file_size"] / (1024*1024)
        compression_ratio = result["compression_ratio"]
        
        logger.info(f"‚úÖ –°–∂–∞—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        logger.info(f"üìÅ –°–∂–∞—Ç—ã–π —Ñ–∞–π–ª: {result['file_path']}")
        logger.info(f"üì¶ –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {compressed_size_mb:.1f} –ú–ë")
        logger.info(f"üìâ –°–∂–∞—Ç–æ –Ω–∞: {compression_ratio:.1f}%")
        
        if compressed_size_mb <= 50:
            logger.info(f"üéØ –§–∞–π–ª –≥–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram!")
        else:
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –≤—Å–µ –µ—â–µ –±–æ–ª—å—à–æ–π –¥–ª—è Telegram: {compressed_size_mb:.1f} –ú–ë")
        
        return True
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è: {result['error']}")
        return False

async def compress_all_videos_in_directory(directory: str, max_size_mb: int = 45):
    """–°–∂–∏–º–∞–µ—Ç –≤—Å–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    
    dir_path = Path(directory)
    if not dir_path.exists():
        logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {directory}")
        return
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã
    video_extensions = ['.mp4', '.mkv', '.webm', '.avi', '.mov']
    
    video_files = []
    for ext in video_extensions:
        video_files.extend(dir_path.glob(f"*{ext}"))
    
    if not video_files:
        logger.info(f"üìÅ –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {directory} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤")
        return
    
    logger.info(f"üé¨ –ù–∞–π–¥–µ–Ω–æ {len(video_files)} –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤")
    
    success_count = 0
    for video_file in video_files:
        logger.info(f"\n{'='*60}")
        logger.info(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {video_file.name}")
        
        if await compress_video_file(str(video_file), max_size_mb):
            success_count += 1
    
    logger.info(f"\n{'='*60}")
    logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: {success_count}/{len(video_files)} —Ñ–∞–π–ª–æ–≤")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    if len(sys.argv) < 2:
        print("üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print(f"  {sys.argv[0]} <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É_–∏–ª–∏_–ø–∞–ø–∫–µ> [–º–∞–∫—Å_—Ä–∞–∑–º–µ—Ä_–ú–ë]")
        print()
        print("üéØ –ü—Ä–∏–º–µ—Ä—ã:")
        print(f"  {sys.argv[0]} /path/to/video.mp4")
        print(f"  {sys.argv[0]} /path/to/video.mp4 40")
        print(f"  {sys.argv[0]} /path/to/directory/")
        print()
        print("üìù –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 45 –ú–ë")
        sys.exit(1)
    
    target_path = sys.argv[1]
    max_size_mb = int(sys.argv[2]) if len(sys.argv) > 2 else 45
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–∂–∞—Ç–∏—è –¥–ª—è: {target_path}")
    logger.info(f"üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size_mb} –ú–ë")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ffmpeg –¥–æ—Å—Ç—É–ø–µ–Ω
    import subprocess
    try:
        subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True)
        logger.info(f"‚úÖ FFmpeg –Ω–∞–π–¥–µ–Ω")
    except (subprocess.CalledProcessError, FileNotFoundError):
        logger.error(f"‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg –¥–ª—è —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ")
        sys.exit(1)
    
    if Path(target_path).is_file():
        # –°–∂–∏–º–∞–µ–º –æ–¥–∏–Ω —Ñ–∞–π–ª
        asyncio.run(compress_video_file(target_path, max_size_mb))
    elif Path(target_path).is_dir():
        # –°–∂–∏–º–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        asyncio.run(compress_all_videos_in_directory(target_path, max_size_mb))
    else:
        logger.error(f"‚ùå –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {target_path}")
        sys.exit(1)

if __name__ == "__main__":
    main()
