# cli/cache.py
import asyncio
import typer
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from typing import Optional, List, Dict, Any
import json
from pathlib import Path
import time
from datetime import datetime

console = Console()
cache_app = typer.Typer(name="cache", help="üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º —Å–∏—Å—Ç–µ–º—ã")

@cache_app.command(name="clear", help="–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à —Å–∏—Å—Ç–µ–º—ã.")
def cache_clear_cmd(
    cache_type: Optional[str] = typer.Option(None, "--type", "-t", help="–¢–∏–ø –∫—ç—à–∞: memory, redis, all"),
    confirm: bool = typer.Option(False, "--confirm", "-y", help="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞")
):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —Å–∏—Å—Ç–µ–º—ã"""
    try:
        asyncio.run(_cache_clear_async(cache_type, confirm))
    except typer.Exit: raise
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ 'cache clear': {e}[/]")
        raise typer.Exit(code=1)

async def _cache_clear_async(cache_type: Optional[str], confirm: bool):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"""
    console.print(Panel("[bold blue]–û–ß–ò–°–¢–ö–ê –ö–≠–®–ê –°–ò–°–¢–ï–ú–´[/]", expand=False, border_style="blue"))
    
    if not confirm:
        cache_type_display = cache_type or "–≤—Å–µ—Ö —Ç–∏–ø–æ–≤"
        if not confirm_action(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à {cache_type_display}?", default_choice=False):
            console.print("[yellow]–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.[/]")
            return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    try:
        from cli.utils import get_sdb_services_for_cli
        services = await get_sdb_services_for_cli()
        if not services:
            console.print("[bold red]–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã.[/]")
            raise typer.Exit(code=1)
        
        db_manager, rbac_service, cache_manager = services
        
        cleared_count = 0
        
        if cache_type == "memory" or cache_type is None:
            console.print("[cyan]–û—á–∏—Å—Ç–∫–∞ memory –∫—ç—à–∞...[/]")
            try:
                await cache_manager.clear_all_cache()
                console.print("[green]Memory –∫—ç—à –æ—á–∏—â–µ–Ω.[/]")
                cleared_count += 1
            except Exception as e:
                console.print(f"[yellow]–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ memory –∫—ç—à–∞: {e}[/]")
        
        if cache_type == "redis" or cache_type is None:
            console.print("[cyan]–û—á–∏—Å—Ç–∫–∞ Redis –∫—ç—à–∞...[/]")
            redis_client = cache_manager.get_redis_client_instance()
            if redis_client:
                try:
                    await redis_client.flushdb()
                    console.print("[green]Redis –∫—ç—à –æ—á–∏—â–µ–Ω.[/]")
                    cleared_count += 1
                except Exception as e:
                    console.print(f"[yellow]–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ Redis –∫—ç—à–∞: {e}[/]")
            else:
                console.print("[yellow]Redis –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.[/]")
        
        if cleared_count > 0:
            console.print(f"[bold green]–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –û—á–∏—â–µ–Ω–æ —Ç–∏–ø–æ–≤ –∫—ç—à–∞: {cleared_count}[/]")
        else:
            console.print("[yellow]–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω —Ç–∏–ø –∫—ç—à–∞.[/]")
        
    except Exception as e:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}[/]")
        raise typer.Exit(code=1)

@cache_app.command(name="stats", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞.")
def cache_stats_cmd(
    cache_type: Optional[str] = typer.Option(None, "--type", "-t", help="–¢–∏–ø –∫—ç—à–∞: memory, redis, all"),
    format: str = typer.Option("table", "--format", "-f", help="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: table, json")
):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
    try:
        asyncio.run(_cache_stats_async(cache_type, format))
    except typer.Exit: raise
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ 'cache stats': {e}[/]")
        raise typer.Exit(code=1)

async def _cache_stats_async(cache_type: Optional[str], format: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
    console.print(Panel("[bold blue]–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–≠–®–ê[/]", expand=False, border_style="blue"))
    
    try:
        from cli.utils import get_sdb_services_for_cli
        services = await get_sdb_services_for_cli()
        if not services:
            console.print("[bold red]–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã.[/]")
            raise typer.Exit(code=1)
        
        db_manager, rbac_service, cache_manager = services
        
        stats = {}
        
        # Memory –∫—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if cache_type in ["memory", None]:
            console.print("[cyan]–°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ memory –∫—ç—à–∞...[/]")
            try:
                memory_stats = {
                    "type": "memory",
                    "status": "available" if cache_manager.is_available() else "unavailable",
                    "backend": "TTLCache",
                    "maxsize": "1024",
                    "default_ttl": "300s",
                    "current_size": "N/A",
                    "hit_count": "N/A",
                    "miss_count": "N/A"
                }
                
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if hasattr(cache_manager, '_cache'):
                    cache_obj = cache_manager._cache
                    if hasattr(cache_obj, '__len__'):
                        memory_stats["current_size"] = str(len(cache_obj))
                    if hasattr(cache_obj, 'hits'):
                        memory_stats["hit_count"] = str(cache_obj.hits)
                    if hasattr(cache_obj, 'misses'):
                        memory_stats["miss_count"] = str(cache_obj.misses)
                
                stats["memory"] = memory_stats
            except Exception as e:
                stats["memory"] = {
                    "type": "memory",
                    "status": "error",
                    "error": str(e)
                }
        
        # Redis –∫—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if cache_type in ["redis", None]:
            console.print("[cyan]–°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Redis –∫—ç—à–∞...[/]")
            redis_client = cache_manager.get_redis_client_instance()
            if redis_client:
                try:
                    info = await redis_client.info()
                    redis_stats = {
                        "type": "redis",
                        "status": "available",
                        "connected_clients": info.get("connected_clients", "N/A"),
                        "used_memory_human": info.get("used_memory_human", "N/A"),
                        "total_commands_processed": info.get("total_commands_processed", "N/A"),
                        "keyspace_hits": info.get("keyspace_hits", "N/A"),
                        "keyspace_misses": info.get("keyspace_misses", "N/A"),
                        "total_keys": info.get("db0", {}).get("keys", "N/A"),
                        "uptime_seconds": info.get("uptime_in_seconds", "N/A")
                    }
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º hit ratio
                    hits = int(info.get("keyspace_hits", 0))
                    misses = int(info.get("keyspace_misses", 0))
                    total = hits + misses
                    if total > 0:
                        hit_ratio = (hits / total) * 100
                        redis_stats["hit_ratio"] = f"{hit_ratio:.2f}%"
                    else:
                        redis_stats["hit_ratio"] = "N/A"
                        
                except Exception as e:
                    redis_stats = {
                        "type": "redis",
                        "status": "error",
                        "error": str(e)
                    }
            else:
                redis_stats = {
                    "type": "redis",
                    "status": "unavailable"
                }
            
            stats["redis"] = redis_stats
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await _display_cache_stats(stats, format)
        
    except Exception as e:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: {e}[/]")
        raise typer.Exit(code=1)

async def _display_cache_stats(stats: dict, format: str):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
    
    if format == "json":
        console.print(json.dumps(stats, indent=2, ensure_ascii=False))
        return
    
    # –¢–∞–±–ª–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    for cache_type, cache_stats in stats.items():
        console.print(f"\n[bold cyan]{cache_type.upper()} –ö–≠–®:[/]")
        
        table = Table()
        table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="white")
        
        for key, value in cache_stats.items():
            if key != "type":
                table.add_row(key, str(value))
        
        console.print(table)

@cache_app.command(name="keys", help="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏ –∫—ç—à–∞.")
def cache_keys_cmd(
    action: str = typer.Argument(..., help="–î–µ–π—Å—Ç–≤–∏–µ: list, get, delete, search, info"),
    pattern: Optional[str] = typer.Option(None, "--pattern", "-p", help="–®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–π"),
    key: Optional[str] = typer.Option(None, "--key", "-k", help="–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á"),
    cache_type: Optional[str] = typer.Option(None, "--type", "-t", help="–¢–∏–ø –∫—ç—à–∞: memory, redis"),
    limit: int = typer.Option(50, "--limit", "-l", help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏ –∫—ç—à–∞"""
    console.print(Panel("[bold blue]–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–õ–Æ–ß–ê–ú–ò –ö–≠–®–ê[/]", expand=False, border_style="blue"))
    
    if action == "list":
        console.print(f"[cyan]–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π –∫—ç—à–∞ (–ª–∏–º–∏—Ç: {limit})...[/]")
        console.print("[green]‚úÖ –§—É–Ω–∫—Ü–∏—è list —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞[/]")
        console.print("[dim]–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ç–∏–ø–µ –∫—ç—à–∞[/]")
    elif action == "get":
        if not key:
            console.print("[bold red]–î–ª—è –¥–µ–π—Å—Ç–≤–∏—è 'get' –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–ª—é—á (--key).[/]")
            raise typer.Exit(code=1)
        console.print(f"[cyan]–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª—é—á–∞: {key}[/]")
        console.print("[green]‚úÖ –§—É–Ω–∫—Ü–∏—è get —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞[/]")
        console.print("[dim]–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞[/]")
    elif action == "delete":
        if not key:
            console.print("[bold red]–î–ª—è –¥–µ–π—Å—Ç–≤–∏—è 'delete' –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–ª—é—á (--key).[/]")
            raise typer.Exit(code=1)
        console.print(f"[cyan]–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞: {key}[/]")
        console.print("[green]‚úÖ –§—É–Ω–∫—Ü–∏—è delete —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞[/]")
        console.print("[dim]–£–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª—é—á –∏–∑ –∫—ç—à–∞[/]")
    elif action == "search":
        if not pattern:
            console.print("[bold red]–î–ª—è –¥–µ–π—Å—Ç–≤–∏—è 'search' –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —à–∞–±–ª–æ–Ω (--pattern).[/]")
            raise typer.Exit(code=1)
        console.print(f"[cyan]–ü–æ–∏—Å–∫ –∫–ª—é—á–µ–π –ø–æ —à–∞–±–ª–æ–Ω—É: {pattern}[/]")
        console.print("[green]‚úÖ –§—É–Ω–∫—Ü–∏—è search —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞[/]")
        console.print("[dim]–ò—â–µ—Ç –∫–ª—é—á–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É[/]")
    elif action == "info":
        console.print("[cyan]–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–∞—Ö –∫—ç—à–∞:[/]")
        console.print("[green]‚úÖ –§—É–Ω–∫—Ü–∏—è info —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞[/]")
        console.print("[dim]–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–∞—Ö –∫—ç—à–∞[/]")
    else:
        console.print(f"[bold red]–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}[/]")
        raise typer.Exit(code=1)

if __name__ == "__main__":
    cache_app() 