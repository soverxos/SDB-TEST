# cli_commands/backup_cmd.py

import typer
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
import shutil
import subprocess
from pathlib import Path
import sys
from datetime import datetime
import tarfile
import os
from typing import Optional, List, Tuple as TypingTuple 
from urllib.parse import urlparse 

console = Console()
backup_app = typer.Typer( name="backup", help="üíæ –°–æ–∑–¥–∞–Ω–∏–µ, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤ SwiftDevBot.", rich_markup_mode="rich")

DB_BACKUP_DIR_NAME = "database"
DATA_FILES_BACKUP_DIR_NAME = "project_data_files"
DATA_ARCHIVE_EXTENSION = ".tar.gz"
POSTGRES_BACKUP_FILENAME = "sdb_postgres_backup.dump" 
MYSQL_BACKUP_FILENAME = "sdb_mysql_backup.sql"       
USER_CONFIG_DIR_NAME_FOR_BACKUP_DEFAULT = "Config"

def _get_backup_base_dir() -> Optional[Path]:
    try:
        from core.app_settings import settings
        backup_dir = settings.core.project_data_path / "sdb_backups" 
        backup_dir.mkdir(parents=True, exist_ok=True)
        return backup_dir
    except ImportError:
        console.print("[bold red]–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –±—ç–∫–∞–ø–∞–º.[/]")
        return None
    except Exception as e:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–¥–æ—Å—Ç—É–ø–µ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±—ç–∫–∞–ø–æ–≤: {e}[/]")
        return None

def _find_system_utility(name: str) -> Optional[str]:
    return shutil.which(name)

def _execute_system_command(command: List[str], env_vars: Optional[dict] = None, input_data: Optional[str] = None, show_stdout_on_success: bool = False) -> bool:
    full_env = os.environ.copy()
    if env_vars:
        full_env.update(env_vars)
    
    try:
        process = subprocess.run(
            command,
            capture_output=True,
            text=True,
            encoding='utf-8',
            env=full_env,
            input=input_data, 
            check=False 
        )
        if process.returncode == 0:
            if show_stdout_on_success and process.stdout:
                 console.print(f"[dim cyan]  --- STDOUT ---[/]\n{process.stdout.strip()}")
            return True
        else:
            console.print(f"[bold red]  ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã (–∫–æ–¥: {process.returncode}): {' '.join(command)}[/]")
            if process.stdout:
                console.print(f"[yellow]  --- STDOUT ---[/]\n{process.stdout.strip()}")
            if process.stderr:
                console.print(f"[red]  --- STDERR ---[/]\n{process.stderr.strip()}")
            return False
    except FileNotFoundError:
        console.print(f"[bold red]  ‚ùå –û—à–∏–±–∫–∞: –ö–æ–º–∞–Ω–¥–∞ '{command[0]}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Ç–∏–ª–∏—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ PATH.[/]")
        return False
    except Exception as e:
        console.print(f"[bold red]  ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã '{command[0]}': {e}[/]")
        return False

@backup_app.command(name="create", help="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö –∏/–∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SDB.")
def create_backup_cmd(
    name: Optional[str] = typer.Option( None, "--name", "-n", help="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏–º—è –¥–ª—è —ç—Ç–æ–≥–æ –±—ç–∫–∞–ø–∞ (–∏–Ω–∞—á–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏)."),
    include_db: bool = typer.Option(True, "--db/--no-db", help="–í–∫–ª—é—á–∏—Ç—å –ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –±—ç–∫–∞–ø."),
    include_data_dirs: Optional[List[str]] = typer.Option( None, "--data-dir", "-dd", help=(f"–ö–∞–∫–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–∑ 'project_data/' –≤–∫–ª—é—á–∏—Ç—å –≤ –±—ç–∫–∞–ø (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ 'project_data/'). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: ['{USER_CONFIG_DIR_NAME_FOR_BACKUP_DEFAULT}'] (–ø–∞–ø–∫–∞ Config). –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –æ–ø—Ü–∏—é. –ü—Ä–∏–º–µ—Ä: -dd Config -dd ModulesData")),
    compress_data: bool = typer.Option(True, "--compress/--no-compress", help="–°–∂–∏–º–∞—Ç—å –ª–∏ –±—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö –≤ –∞—Ä—Ö–∏–≤ (.tar.gz).")
):
    from core.app_settings import settings 

    if include_data_dirs is None: 
        include_data_dirs = [USER_CONFIG_DIR_NAME_FOR_BACKUP_DEFAULT]

    backup_base_dir = _get_backup_base_dir()
    if not backup_base_dir: 
        raise typer.Exit(code=1)

    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_name = name if name else f"sdb_backup_{timestamp}"
    
    current_backup_path = backup_base_dir / backup_name
    if current_backup_path.exists():
        console.print(f"[bold red]–û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è/—Ñ–∞–π–ª –±—ç–∫–∞–ø–∞ —Å –∏–º–µ–Ω–µ–º '{backup_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.[/]")
        raise typer.Exit(code=1)
    
    try:
        current_backup_path.mkdir(parents=True)
    except Exception as e_mkdir:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–∞ '{current_backup_path}': {e_mkdir}[/]")
        raise typer.Exit(code=1)
        
    console.print(Panel(f"[bold cyan]–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞: {backup_name}[/]", expand=False, border_style="cyan", subtitle=f"–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {current_backup_path}"))

    db_backup_successful = False
    data_backup_successful = False

    if include_db:
        console.print("\n[bold blue]1. –ë—ç–∫–∞–ø –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö[/]")
        db_settings = settings.db
        db_backup_target_dir = current_backup_path / DB_BACKUP_DIR_NAME
        db_backup_target_dir.mkdir()

        if db_settings.type == "sqlite":
            sqlite_file_path = Path(db_settings.sqlite_path) 
            if sqlite_file_path.exists() and sqlite_file_path.is_file():
                try:
                    backup_db_file = db_backup_target_dir / sqlite_file_path.name
                    shutil.copy2(sqlite_file_path, backup_db_file)
                    console.print(f"[green]  ‚úÖ –ë—ç–∫–∞–ø SQLite –ë–î —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: '{backup_db_file}'[/]")
                    db_backup_successful = True
                except Exception as e_sqlite:
                    console.print(f"[bold red]  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ SQLite –ë–î: {e_sqlite}[/]")
            else:
                console.print(f"[bold red]  ‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª SQLite –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ '{sqlite_file_path}'[/]")
        
        elif db_settings.type == "postgresql":
            pg_dump_path = _find_system_utility("pg_dump")
            if not pg_dump_path: console.print("[bold red]  ‚ùå –£—Ç–∏–ª–∏—Ç–∞ 'pg_dump' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ë—ç–∫–∞–ø PostgreSQL –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.[/]")
            elif not db_settings.pg_dsn: console.print("[bold red]  ‚ùå DSN –¥–ª—è PostgreSQL (pg_dsn) –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ë—ç–∫–∞–ø –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.[/]")
            else:
                parsed_url = urlparse(str(db_settings.pg_dsn))
                pg_host = parsed_url.hostname if parsed_url.hostname else "localhost"
                pg_port = str(parsed_url.port) if parsed_url.port is not None else "5432"
                pg_user = parsed_url.username if parsed_url.username else ""
                pg_password = parsed_url.password if parsed_url.password else ""
                pg_database = parsed_url.path.lstrip('/') if parsed_url.path else ""
                backup_file = db_backup_target_dir / POSTGRES_BACKUP_FILENAME
                cmd = [ pg_dump_path ]
                if pg_host: cmd.extend(["-h", pg_host])
                if pg_port: cmd.extend(["-p", pg_port])
                if pg_user: cmd.extend(["-U", pg_user])
                if not pg_database: console.print("[bold red]  ‚ùå –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ DSN PostgreSQL. –ë—ç–∫–∞–ø –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.[/]")
                else:
                    cmd.extend(["-d", pg_database, "-F", "c", "-f", str(backup_file)])
                    env = {}
                    if pg_password: env["PGPASSWORD"] = pg_password
                    console.print(f"  –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ pg_dump –¥–ª—è PostgreSQL –≤ '{backup_file}'...")
                    if _execute_system_command(cmd, env_vars=env):
                        console.print(f"[green]  ‚úÖ –ë—ç–∫–∞–ø PostgreSQL —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: '{backup_file}'[/]")
                        db_backup_successful = True
                    else: console.print(f"[bold red]  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞ PostgreSQL.[/]")
        
        elif db_settings.type == "mysql":
            mysqldump_path = _find_system_utility("mysqldump")
            if not mysqldump_path: console.print("[bold red]  ‚ùå –£—Ç–∏–ª–∏—Ç–∞ 'mysqldump' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ë—ç–∫–∞–ø MySQL –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.[/]")
            elif not db_settings.mysql_dsn: console.print("[bold red]  ‚ùå DSN –¥–ª—è MySQL (mysql_dsn) –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ë—ç–∫–∞–ø –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.[/]")
            else:
                parsed_url = urlparse(str(db_settings.mysql_dsn))
                mysql_host = parsed_url.hostname if parsed_url.hostname else "localhost"
                mysql_port = str(parsed_url.port) if parsed_url.port is not None else "3306"
                mysql_user = parsed_url.username if parsed_url.username else ""
                mysql_password = parsed_url.password if parsed_url.password else ""
                mysql_database = parsed_url.path.lstrip('/') if parsed_url.path else ""
                backup_file = db_backup_target_dir / MYSQL_BACKUP_FILENAME
                cmd = [ mysqldump_path ]
                if mysql_host: cmd.extend(["-h", mysql_host])
                if mysql_port: cmd.extend(["-P", mysql_port])
                if mysql_user: cmd.extend(["-u", mysql_user])
                cmd.append("--column-statistics=0") 
                if not mysql_database: console.print("[bold red]  ‚ùå –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ DSN MySQL. –ë—ç–∫–∞–ø –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.[/]")
                else:
                    cmd.extend(["--databases", mysql_database]) # –≠—Ç–∞ –æ–ø—Ü–∏—è –≤–∫–ª—é—á–∞–µ—Ç CREATE DATABASE IF NOT EXISTS
                    cmd.append(f"--result-file={backup_file}")
                    env = {}
                    if mysql_password: env["MYSQL_PWD"] = mysql_password
                    console.print(f"  –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ mysqldump –¥–ª—è MySQL –≤ '{backup_file}'...")
                    if _execute_system_command(cmd, env_vars=env):
                        console.print(f"[green]  ‚úÖ –ë—ç–∫–∞–ø MySQL —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: '{backup_file}'[/]")
                        db_backup_successful = True
                    else: console.print(f"[bold red]  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞ MySQL.[/]")
        else: console.print(f"[bold red]  ‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ë–î –¥–ª—è –±—ç–∫–∞–ø–∞: {db_settings.type}[/]")
    else: console.print("\n[dim blue]1. –ë—ç–∫–∞–ø –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—â–µ–Ω (—Å–æ–≥–ª–∞—Å–Ω–æ –æ–ø—Ü–∏–∏).[/dim]")

    if include_data_dirs: 
        console.print(f"\n[bold blue]2. –ë—ç–∫–∞–ø –î–∞–Ω–Ω—ã—Ö –ü—Ä–æ–µ–∫—Ç–∞ (–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {', '.join(include_data_dirs)})[/]")
        project_data_root_path = settings.core.project_data_path
        data_to_archive_paths: List[TypingTuple[Path, str]] = []
        for dir_name_rel in include_data_dirs:
            source_dir_abs = (project_data_root_path / dir_name_rel).resolve()
            if source_dir_abs.exists() and source_dir_abs.is_dir(): data_to_archive_paths.append((source_dir_abs, dir_name_rel))
            else: console.print(f"[yellow]  ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö '{source_dir_abs}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π. –ü—Ä–æ–ø—É—â–µ–Ω–∞.[/]")
        if data_to_archive_paths:
            data_backup_target_dir = current_backup_path / DATA_FILES_BACKUP_DIR_NAME
            data_backup_target_dir.mkdir(exist_ok=True)
            archive_filename_stem = f"project_data_backup_{timestamp}"
            archive_file_path = data_backup_target_dir / (archive_filename_stem + (DATA_ARCHIVE_EXTENSION if compress_data else ".tar"))
            try:
                mode = "w:gz" if compress_data else "w"
                with tarfile.open(archive_file_path, mode) as tar:
                    for source_path, arcname_prefix in data_to_archive_paths:
                        tar.add(str(source_path), arcname=arcname_prefix) 
                        console.print(f"[green]    –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{source_path.relative_to(project_data_root_path.parent)}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤.[/]")
                console.print(f"[green]  ‚úÖ –ë—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: '{archive_file_path}'[/]")
                data_backup_successful = True
            except Exception as e_tar: console.print(f"[bold red]  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞: {e_tar}[/]")
        elif not include_data_dirs: console.print("[yellow]  –ù–µ —É–∫–∞–∑–∞–Ω—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–∞ –¥–∞–Ω–Ω—ã—Ö.[/]")
        else: console.print("[yellow]  –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—ç–∫–∞–ø–∞ (–≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã).[/]")
    else: console.print("\n[dim blue]2. –ë—ç–∫–∞–ø –î–∞–Ω–Ω—ã—Ö –ü—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω (–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã).[/dim]")
    
    console.print("\n[bold underline]–ò—Ç–æ–≥–∏ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞:[/]")
    if include_db:
        if db_backup_successful: console.print("[bold green]  –ë–î: –£–°–ü–ï–®–ù–û[/]")
        else: console.print("[bold red]  –ë–î: –û–®–ò–ë–ö–ê[/]")
    if include_data_dirs: 
        if data_backup_successful: console.print("[bold green]  –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞: –£–°–ü–ï–®–ù–û[/]")
        elif data_to_archive_paths: console.print("[bold red]  –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞: –û–®–ò–ë–ö–ê[/]") 
    if not (include_db or (include_data_dirs and data_to_archive_paths)):
        console.print("[yellow]  –ù–µ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ –∏–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –±—ç–∫–∞–ø–∞.[/]")
        try:
            if current_backup_path.is_dir(): shutil.rmtree(current_backup_path)
            console.print(f"[dim]–ü—É—Å—Ç–∞—è/–Ω–µ–ø–æ–ª–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–∞ '{current_backup_path}' —É–¥–∞–ª–µ–Ω–∞.[/dim]")
        except Exception as e_rm: console.print(f"[yellow]–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—É—Å—Ç—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±—ç–∫–∞–ø–∞: {e_rm}[/yellow]")
    elif not db_backup_successful and include_db or (include_data_dirs and data_to_archive_paths and not data_backup_successful):
        console.print("[bold red]–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.[/]")
    else: console.print(f"\n[bold green]üéâ –ë—ç–∫–∞–ø '{backup_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.[/]")

@backup_app.command(name="list", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤ SDB.")
def list_backups_cmd():
    backup_base_dir = _get_backup_base_dir()
    if not backup_base_dir: return typer.Exit(code=1)
    backups = [d for d in backup_base_dir.iterdir() if d.is_dir()] 
    if not backups:
        console.print(f"[yellow]–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{backup_base_dir}'.[/]")
        return
    table = Table(title="[bold cyan]–î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã SwiftDevBot[/]", show_header=True, header_style="bold magenta")
    table.add_column("–ò–º—è –ë—ç–∫–∞–ø–∞", style="cyan", min_width=25)
    table.add_column("–î–∞—Ç–∞ –°–æ–∑–¥–∞–Ω–∏—è (–∏–∑ –∏–º–µ–Ω–∏)", min_width=20)
    table.add_column("–°–æ–¥–µ—Ä–∂–∏—Ç –ë–î?", justify="center")
    table.add_column("–°–æ–¥–µ—Ä–∂–∏—Ç –î–∞–Ω–Ω—ã–µ?", justify="center")
    table.add_column("–†–∞–∑–º–µ—Ä (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)", justify="right")
    for backup_dir_path in sorted(backups, key=lambda p: p.name, reverse=True):
        backup_name = backup_dir_path.name
        date_from_name = "N/A"
        if backup_name.startswith("sdb_backup_") and len(backup_name.split("_")[-1]) == 15: 
            try:
                ts_str = backup_name.split("_")[-1]
                dt_obj = datetime.strptime(ts_str, '%Y%m%d_%H%M%S')
                date_from_name = dt_obj.strftime('%Y-%m-%d %H:%M:%S')
            except ValueError: pass
        has_db_backup_dir = (backup_dir_path / DB_BACKUP_DIR_NAME).is_dir()
        db_files_exist = any((backup_dir_path / DB_BACKUP_DIR_NAME).iterdir()) if has_db_backup_dir else False
        has_data_backup_dir = (backup_dir_path / DATA_FILES_BACKUP_DIR_NAME).is_dir()
        data_files_exist = any((backup_dir_path / DATA_FILES_BACKUP_DIR_NAME).iterdir()) if has_data_backup_dir else False
        total_size = 0
        try:
            for f_item in backup_dir_path.rglob('*'):
                if f_item.is_file(): total_size += f_item.stat().st_size
            size_str = f"{total_size / (1024*1024):.2f} MB" if total_size > (1024*512) else f"{total_size / 1024:.1f} KB"
        except Exception: size_str = "N/A"
        table.add_row(backup_name, date_from_name, "‚úÖ" if db_files_exist else "‚ùå" if has_db_backup_dir else "-", "‚úÖ" if data_files_exist else "‚ùå" if has_data_backup_dir else "-", size_str)
    console.print(table)

@backup_app.command(name="restore", help="[–û–ü–ê–°–ù–û!] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É SDB –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞.")
def restore_backup_cmd(
    backup_name: str = typer.Argument(..., help="–ò–º—è –±—ç–∫–∞–ø–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–∏–∑ –∫–æ–º–∞–Ω–¥—ã 'sdb backup list')."),
    restore_db: bool = typer.Option(True, "--db/--no-db", help="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—ç–∫–∞–ø–∞."),
    restore_data_dirs: bool = typer.Option(True, "--data/--no-data", help="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –±—ç–∫–∞–ø–∞.")
):
    from core.app_settings import settings 

    console.print(Panel(f"[bold red]–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ò–ó –ë–≠–ö–ê–ü–ê: {backup_name}[/]", expand=False, border_style="red"))
    console.print("[bold red]–í–ù–ò–ú–ê–ù–ò–ï: –≠–¢–ê –û–ü–ï–†–ê–¶–ò–Ø –ü–ï–†–ï–ó–ê–ü–ò–®–ï–¢ –¢–ï–ö–£–©–£–Æ –ë–ê–ó–£ –î–ê–ù–ù–´–• –ò/–ò–õ–ò –î–ê–ù–ù–´–ï –ü–†–û–ï–ö–¢–ê![/]")
    console.print("[bold yellow]–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Telegram-–±–æ—Ç SDB –û–°–¢–ê–ù–û–í–õ–ï–ù –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.[/]")
    
    if not (restore_db or restore_data_dirs):
        console.print("[yellow]–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–∏ –ë–î, –Ω–∏ –¥–∞–Ω–Ω—ã–µ). –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.[/yellow]")
        raise typer.Exit()

    base_backup_dir = _get_backup_base_dir()
    if not base_backup_dir: raise typer.Exit(code=1)
    
    target_backup_path = base_backup_dir / backup_name
    if not target_backup_path.is_dir():
        console.print(f"[bold red]–û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–∞ '{target_backup_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.[/]")
        raise typer.Exit(code=1)

    if not typer.confirm(f"–í—ã –ê–ë–°–û–õ–Æ–¢–ù–û —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∏–∑ –±—ç–∫–∞–ø–∞ '{backup_name}'?", abort=True):
        return 
    if not typer.confirm(f"–ü–û–°–õ–ï–î–ù–ï–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –≠—Ç–æ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ?", default=False, abort=True):
        return

    db_restore_successful = False
    data_restore_successful = False
    timestamp_for_files = datetime.now().strftime('%Y%m%d%H%M%S')

    if restore_db:
        console.print("\n[bold blue]1. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö[/]")
        db_settings = settings.db
        backup_db_content_path = target_backup_path / DB_BACKUP_DIR_NAME
        
        if not backup_db_content_path.is_dir() or not any(backup_db_content_path.iterdir()):
            console.print(f"[yellow]  –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –±—ç–∫–∞–ø–∞ –ë–î –≤ '{backup_db_content_path}'. –ü—Ä–æ–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î.[/yellow]")
        else:
            if db_settings.type == "sqlite":
                sqlite_backup_files = list(backup_db_content_path.glob("*.db")) or \
                                      list(backup_db_content_path.glob("*.sqlite")) or \
                                      list(backup_db_content_path.glob("*.sqlite3"))
                if sqlite_backup_files:
                    source_db_file_in_backup = sqlite_backup_files[0]
                    target_current_db_file = Path(db_settings.sqlite_path)
                    console.print(f"  –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é SQLite –∏–∑ '{source_db_file_in_backup}' –≤ '{target_current_db_file}'...")
                    if target_current_db_file.exists():
                        current_db_backup_path = target_current_db_file.with_suffix(f"{target_current_db_file.suffix}.before_restore_{timestamp_for_files}")
                        try:
                            shutil.copy2(target_current_db_file, current_db_backup_path)
                            console.print(f"[dim]    –¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª –ë–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: '{current_db_backup_path}'[/dim]")
                        except Exception as e_backup_current: console.print(f"[yellow]    –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞ –ë–î: {e_backup_current}[/yellow]")
                    try:
                        shutil.copy2(source_db_file_in_backup, target_current_db_file)
                        console.print(f"[green]  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –±—ç–∫–∞–ø–∞.[/]")
                        db_restore_successful = True
                    except Exception as e_restore_sqlite: console.print(f"[bold red]  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ SQLite: {e_restore_sqlite}[/]")
                else: console.print(f"[yellow]  –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞ SQLite (.db, .sqlite, .sqlite3) –≤ '{backup_db_content_path}'.[/yellow]")

            elif db_settings.type == "postgresql":
                pg_restore_path = _find_system_utility("pg_restore")
                backup_file_in_archive = backup_db_content_path / POSTGRES_BACKUP_FILENAME
                if not pg_restore_path: console.print("[bold red]  ‚ùå –£—Ç–∏–ª–∏—Ç–∞ 'pg_restore' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ PostgreSQL –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.[/]")
                elif not db_settings.pg_dsn: console.print("[bold red]  ‚ùå DSN –¥–ª—è PostgreSQL (pg_dsn) –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.[/]")
                elif not backup_file_in_archive.is_file(): console.print(f"[bold red]  ‚ùå –§–∞–π–ª –±—ç–∫–∞–ø–∞ '{POSTGRES_BACKUP_FILENAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ '{backup_db_content_path}'.[/]")
                else:
                    parsed_url = urlparse(str(db_settings.pg_dsn))
                    pg_host = parsed_url.hostname if parsed_url.hostname else "localhost"
                    pg_port = str(parsed_url.port) if parsed_url.port is not None else "5432"
                    pg_user = parsed_url.username if parsed_url.username else ""
                    pg_password = parsed_url.password if parsed_url.password else ""
                    pg_database = parsed_url.path.lstrip('/') if parsed_url.path else ""
                    cmd = [ pg_restore_path ]
                    if pg_host: cmd.extend(["-h", pg_host])
                    if pg_port: cmd.extend(["-p", pg_port])
                    if pg_user: cmd.extend(["-U", pg_user])
                    if not pg_database: console.print("[bold red]  ‚ùå –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ DSN PostgreSQL. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.[/]")
                    else:
                        cmd.extend(["-d", pg_database, "--clean", "--if-exists", str(backup_file_in_archive)])
                        env = {}
                        if pg_password: env["PGPASSWORD"] = pg_password
                        console.print(f"  –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ pg_restore –¥–ª—è PostgreSQL –∏–∑ '{backup_file_in_archive}' –≤ –ë–î '{pg_database}'...")
                        if _execute_system_command(cmd, env_vars=env, show_stdout_on_success=True):
                            console.print(f"[green]  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.[/]")
                            db_restore_successful = True
                        else: console.print(f"[bold red]  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ PostgreSQL.[/]")
            
            elif db_settings.type == "mysql":
                mysql_path = _find_system_utility("mysql")
                backup_file_in_archive = backup_db_content_path / MYSQL_BACKUP_FILENAME
                if not mysql_path: console.print("[bold red]  ‚ùå –£—Ç–∏–ª–∏—Ç–∞ 'mysql' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ MySQL –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.[/]")
                elif not db_settings.mysql_dsn: console.print("[bold red]  ‚ùå DSN –¥–ª—è MySQL (mysql_dsn) –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.[/]")
                elif not backup_file_in_archive.is_file(): console.print(f"[bold red]  ‚ùå –§–∞–π–ª –±—ç–∫–∞–ø–∞ '{MYSQL_BACKUP_FILENAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ '{backup_db_content_path}'.[/]")
                else:
                    parsed_url = urlparse(str(db_settings.mysql_dsn))
                    mysql_host = parsed_url.hostname if parsed_url.hostname else "localhost"
                    mysql_port = str(parsed_url.port) if parsed_url.port is not None else "3306"
                    mysql_user = parsed_url.username if parsed_url.username else ""
                    mysql_password = parsed_url.password if parsed_url.password else ""
                    mysql_database = parsed_url.path.lstrip('/') if parsed_url.path else ""
                    cmd = [ mysql_path ]
                    if mysql_host: cmd.extend(["-h", mysql_host])
                    if mysql_port: cmd.extend(["-P", mysql_port])
                    if mysql_user: cmd.extend(["-u", mysql_user])
                    if not mysql_database: console.print("[bold red]  ‚ùå –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ DSN MySQL. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.[/]")
                    else:
                        cmd.append(mysql_database) 
                        env = {}
                        if mysql_password: env["MYSQL_PWD"] = mysql_password
                        try:
                            sql_dump_content = backup_file_in_archive.read_text(encoding='utf-8')
                            console.print(f"  –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è MySQL –∏–∑ '{backup_file_in_archive}' –≤ –ë–î '{mysql_database}'...")
                            if _execute_system_command(cmd, env_vars=env, input_data=sql_dump_content, show_stdout_on_success=True):
                                console.print(f"[green]  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö MySQL —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.[/]")
                                db_restore_successful = True
                            else: console.print(f"[bold red]  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ MySQL.[/]")
                        except Exception as e_read_sql: console.print(f"[bold red]  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è SQL-–¥–∞–º–ø–∞ '{backup_file_in_archive}': {e_read_sql}[/]")
            else:
                console.print(f"[bold red]  ‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ë–î –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {db_settings.type}[/]")
    else:
        console.print("\n[dim blue]1. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—â–µ–Ω–æ.[/dim]")

    if restore_data_dirs:
        console.print(f"\n[bold blue]2. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –î–∞–Ω–Ω—ã—Ö –ü—Ä–æ–µ–∫—Ç–∞[/]")
        backup_data_archive_dir = target_backup_path / DATA_FILES_BACKUP_DIR_NAME
        target_project_data_dir = settings.core.project_data_path
        if not backup_data_archive_dir.is_dir() or not any(backup_data_archive_dir.iterdir()):
            console.print(f"[yellow]  –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∞—Ä—Ö–∏–≤—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ '{backup_data_archive_dir}'. –ü—Ä–æ–ø—É—Å–∫.[/yellow]")
        else:
            data_archives = list(backup_data_archive_dir.glob(f"*{DATA_ARCHIVE_EXTENSION}")) or list(backup_data_archive_dir.glob("*.tar"))
            if data_archives:
                source_data_archive = data_archives[0] 
                console.print(f"  –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞ –¥–∞–Ω–Ω—ã—Ö '{source_data_archive}' –≤ '{target_project_data_dir}'...")
                try:
                    temp_extract_path = target_project_data_dir.parent / f"__{target_project_data_dir.name}_restore_temp_{timestamp_for_files}"
                    temp_extract_path.mkdir(parents=True, exist_ok=True)
                    with tarfile.open(source_data_archive, "r:*") as tar: tar.extractall(path=str(temp_extract_path))
                    console.print(f"[dim]    –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É: {temp_extract_path}[/dim]")
                    console.print(f"[dim]    –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ/–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {target_project_data_dir} ...[/dim]")
                    for item_in_temp in temp_extract_path.iterdir():
                        target_item_path = target_project_data_dir / item_in_temp.name
                        if item_in_temp.is_dir():
                            if target_item_path.exists(): shutil.rmtree(target_item_path)
                            shutil.move(str(item_in_temp), str(target_item_path))
                        elif item_in_temp.is_file(): shutil.move(str(item_in_temp), str(target_item_path)) 
                    shutil.rmtree(temp_extract_path) 
                    console.print(f"[green]  ‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –∞—Ä—Ö–∏–≤–∞.[/]")
                    data_restore_successful = True
                except tarfile.ReadError as e_tar_read: console.print(f"[bold red]  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ –¥–∞–Ω–Ω—ã—Ö '{source_data_archive}': {e_tar_read}[/]")
                except Exception as e_restore_data:
                    console.print(f"[bold red]  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞: {e_restore_data}[/]")
                    if 'temp_extract_path' in locals() and temp_extract_path.exists():
                         try: shutil.rmtree(temp_extract_path)
                         except Exception: pass
            else: console.print(f"[yellow]  –ù–µ –Ω–∞–π–¥–µ–Ω –∞—Ä—Ö–∏–≤ –¥–∞–Ω–Ω—ã—Ö (.tar.gz –∏–ª–∏ .tar) –≤ '{backup_data_archive_dir}'.[/yellow]")
    else: console.print("\n[dim blue]2. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –î–∞–Ω–Ω—ã—Ö –ü—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ.[/dim]")

    console.print("\n[bold underline]–ò—Ç–æ–≥–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:[/]")
    if restore_db:
        if db_restore_successful: console.print("[bold green]  –ë–î: –£–°–ü–ï–®–ù–û[/]")
        else: console.print("[bold red]  –ë–î: –û–®–ò–ë–ö–ê –∏–ª–∏ –ù–ï –í–´–ü–û–õ–ù–ï–ù–û[/]")
    if restore_data_dirs:
        if data_restore_successful: console.print("[bold green]  –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞: –£–°–ü–ï–®–ù–û[/]")
        else: console.print("[bold red]  –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞: –û–®–ò–ë–ö–ê –∏–ª–∏ –ù–ï –í–´–ü–û–õ–ù–ï–ù–û[/]")
    if not db_restore_successful and restore_db or (not data_restore_successful and restore_data_dirs):
        console.print("[bold red]–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.[/]")
    elif not restore_db and not restore_data_dirs: pass 
    else:
        console.print(f"\n[bold green]üéâ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞ '{backup_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.[/]")
        console.print("[yellow]–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–ø—É—â–µ–Ω –≤–æ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.[/yellow]")
        console.print("[yellow]–ï—Å–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–∞—Å—å –ë–î, –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è `alembic stamp head` –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π.[/yellow]")