# --- –ù–ê–ß–ê–õ–û –§–ê–ô–õ–ê cli/backup.py ---
import os
import shutil
import subprocess
import tarfile
from datetime import datetime
from pathlib import Path
from typing import List, Optional, Tuple as TypingTuple
from urllib.parse import urlparse

import typer
from rich.console import Console
from rich.panel import Panel
from rich.table import Table

# –£—Ç–∏–ª–∏—Ç—ã –∏ Typer-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
from .utils import sdb_console, confirm_action

backup_app = typer.Typer(
    name="backup",
    help="üíæ –°–æ–∑–¥–∞–Ω–∏–µ, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤ SwiftDevBot.",
    rich_markup_mode="rich",
    no_args_is_help=True
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DB_BACKUP_DIR_NAME = "database"
DATA_FILES_BACKUP_DIR_NAME = "project_data_files"
DATA_ARCHIVE_EXTENSION = ".tar.gz"
POSTGRES_BACKUP_FILENAME = "sdb_postgres_backup.dump"
MYSQL_BACKUP_FILENAME = "sdb_mysql_backup.sql"
USER_CONFIG_DIR_NAME_FOR_BACKUP_DEFAULT = "Config"

def _get_backup_base_dir() -> Optional[Path]:
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É backup –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
        project_root = Path(__file__).resolve().parent.parent
        backup_dir = project_root / "backup"
        backup_dir.mkdir(parents=True, exist_ok=True)
        return backup_dir
    except Exception as e:
        sdb_console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–¥–æ—Å—Ç—É–ø–µ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±—ç–∫–∞–ø–æ–≤: {e}[/]")
        return None

def _find_system_utility(name: str) -> Optional[str]:
    return shutil.which(name)

def _execute_system_command(command: List[str], env_vars: Optional[dict] = None, input_data: Optional[str] = None, show_stdout_on_success: bool = False) -> bool:
    full_env = os.environ.copy()
    if env_vars:
        full_env.update(env_vars)
    
    try:
        process = subprocess.run(
            command,
            capture_output=True,
            text=True,
            encoding='utf-8',
            env=full_env,
            input=input_data,
            check=False
        )
        if process.returncode == 0:
            if show_stdout_on_success and process.stdout:
                 sdb_console.print(f"[dim cyan]  --- STDOUT ---[/]\n{process.stdout.strip()}")
            return True
        else:
            sdb_console.print(f"[bold red]  ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã (–∫–æ–¥: {process.returncode}): {' '.join(command)}[/]")
            if process.stdout:
                sdb_console.print(f"[yellow]  --- STDOUT ---[/]\n{process.stdout.strip()}")
            if process.stderr:
                sdb_console.print(f"[red]  --- STDERR ---[/]\n{process.stderr.strip()}")
            return False
    except FileNotFoundError:
        sdb_console.print(f"[bold red]  ‚ùå –û—à–∏–±–∫–∞: –ö–æ–º–∞–Ω–¥–∞ '{command[0]}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Ç–∏–ª–∏—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ PATH.[/]")
        return False
    except Exception as e:
        sdb_console.print(f"[bold red]  ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã '{command[0]}': {e}[/]")
        return False

@backup_app.command(name="create", help="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö –∏/–∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SDB.")
def create_backup_cmd(
    name: Optional[str] = typer.Option(None, "--name", "-n", help="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏–º—è –¥–ª—è –±—ç–∫–∞–ø–∞."),
    include_db: bool = typer.Option(True, "--db/--no-db", help="–í–∫–ª—é—á–∏—Ç—å –ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –±—ç–∫–∞–ø."),
    include_data_dirs: Optional[List[str]] = typer.Option(None, "--data-dir", "-dd", help=f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–∑ 'project_data/' –¥–ª—è –±—ç–∫–∞–ø–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: ['{USER_CONFIG_DIR_NAME_FOR_BACKUP_DEFAULT}']."),
    compress_data: bool = typer.Option(True, "--compress/--no-compress", help="–°–∂–∏–º–∞—Ç—å –ª–∏ –±—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö –≤ –∞—Ä—Ö–∏–≤."),
    path: Optional[Path] = typer.Option(None, "--path", help="–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ, –∫—É–¥–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ./backup/<–∏–º—è_–±—ç–∫–∞–ø–∞>)"),
    exclude: Optional[List[str]] = typer.Option(None, "--exclude", help="–°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –±—ç–∫–∞–ø–µ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: logs, temp)")
):
    from core.app_settings import settings

    if include_data_dirs is None:
        include_data_dirs = [USER_CONFIG_DIR_NAME_FOR_BACKUP_DEFAULT]
    elif include_data_dirs == [""]:
        include_data_dirs = []

    backup_base_dir = _get_backup_base_dir()
    if not backup_base_dir and not path:
        raise typer.Exit(code=1)

    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±—ç–∫–∞–ø–∞ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏
    backup_types = []
    if include_db:
        from core.app_settings import settings
        backup_types.append(f"db_{settings.db.type}")
    if include_data_dirs:
        backup_types.append("data")
    
    backup_type_name = "_".join(backup_types) if backup_types else "full"
    backup_name = name if name else f"{backup_type_name}_{timestamp}"
    
    if path:
        current_backup_path = Path(path).expanduser().resolve()
    else:
        current_backup_path = backup_base_dir / backup_name
    if current_backup_path.exists():
        sdb_console.print(f"[bold red]–û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–∞ —Å –∏–º–µ–Ω–µ–º '{current_backup_path}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.[/]")
        raise typer.Exit(code=1)
    
    current_backup_path.mkdir(parents=True)
    sdb_console.print(Panel(f"[bold cyan]–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞: {backup_name}[/]", expand=False, subtitle=f"–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {current_backup_path}"))

    db_backup_successful = False
    data_backup_successful = False

    if include_db:
        sdb_console.print("\n[bold blue]1. –ë—ç–∫–∞–ø –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö[/]")
        db_settings = settings.db
        db_backup_target_dir = current_backup_path / DB_BACKUP_DIR_NAME
        db_backup_target_dir.mkdir()

        if db_settings.type == "sqlite":
            sqlite_file_path = Path(db_settings.sqlite_path)
            if sqlite_file_path.is_file():
                backup_db_file = db_backup_target_dir / sqlite_file_path.name
                shutil.copy2(sqlite_file_path, backup_db_file)
                sdb_console.print(f"[green]  ‚úÖ –ë—ç–∫–∞–ø SQLite –ë–î —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: '{backup_db_file}'[/]")
                db_backup_successful = True
            else:
                sdb_console.print(f"[bold red]  ‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª SQLite –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ '{sqlite_file_path}'[/]")
        
        elif db_settings.type == "postgresql":
            pg_dump_path = _find_system_utility("pg_dump")
            if not pg_dump_path: sdb_console.print("[bold red]  ‚ùå –£—Ç–∏–ª–∏—Ç–∞ 'pg_dump' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.[/]")
            elif not db_settings.pg_dsn: sdb_console.print("[bold red]  ‚ùå DSN –¥–ª—è PostgreSQL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.[/]")
            else:
                parsed_url = urlparse(str(db_settings.pg_dsn))
                backup_file = db_backup_target_dir / POSTGRES_BACKUP_FILENAME
                cmd = [pg_dump_path, "-F", "c", "-f", str(backup_file), str(db_settings.pg_dsn)]
                env = {"PGPASSWORD": parsed_url.password} if parsed_url.password else {}
                sdb_console.print(f"  –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ pg_dump –¥–ª—è PostgreSQL –≤ '{backup_file}'...")
                if _execute_system_command(cmd, env_vars=env):
                    sdb_console.print(f"[green]  ‚úÖ –ë—ç–∫–∞–ø PostgreSQL —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.[/]")
                    db_backup_successful = True
        
        elif db_settings.type == "mysql":
            mysqldump_path = _find_system_utility("mysqldump")
            if not mysqldump_path: sdb_console.print("[bold red]  ‚ùå –£—Ç–∏–ª–∏—Ç–∞ 'mysqldump' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.[/]")
            elif not db_settings.mysql_dsn: sdb_console.print("[bold red]  ‚ùå DSN –¥–ª—è MySQL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.[/]")
            else:
                parsed_url = urlparse(str(db_settings.mysql_dsn))
                backup_file = db_backup_target_dir / MYSQL_BACKUP_FILENAME
                cmd = [
                    mysqldump_path,
                    f"--host={parsed_url.hostname or 'localhost'}",
                    f"--port={parsed_url.port or 3306}",
                    f"--user={parsed_url.username}",
                    "--column-statistics=0",
                    "--databases",
                    parsed_url.path.lstrip('/'),
                    f"--result-file={backup_file}"
                ]
                env = {"MYSQL_PWD": parsed_url.password} if parsed_url.password else {}
                sdb_console.print(f"  –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ mysqldump –¥–ª—è MySQL –≤ '{backup_file}'...")
                if _execute_system_command(cmd, env_vars=env):
                    sdb_console.print(f"[green]  ‚úÖ –ë—ç–∫–∞–ø MySQL —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.[/]")
                    db_backup_successful = True
        else:
            sdb_console.print(f"[bold red]  ‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ë–î: {db_settings.type}[/]")
    
    if include_data_dirs:
        sdb_console.print(f"\n[bold blue]2. –ë—ç–∫–∞–ø –î–∞–Ω–Ω—ã—Ö –ü—Ä–æ–µ–∫—Ç–∞[/]")
        if exclude:
            sdb_console.print(f"[yellow]  –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –ø—É—Ç–∏: {', '.join(exclude)}[/]")
        project_data_root_path = settings.core.project_data_path
        data_to_archive_paths: List[TypingTuple[Path, str]] = []
        for dir_name_rel in include_data_dirs:
            source_dir_abs = (project_data_root_path / dir_name_rel).resolve()
            if source_dir_abs.is_dir():
                data_to_archive_paths.append((source_dir_abs, dir_name_rel))
            else:
                sdb_console.print(f"[yellow]  ‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{source_dir_abs}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–ø—É—â–µ–Ω–∞.[/]")
        
        if data_to_archive_paths:
            data_backup_target_dir = current_backup_path / DATA_FILES_BACKUP_DIR_NAME
            data_backup_target_dir.mkdir(exist_ok=True)
            archive_filename_stem = f"project_data_backup_{timestamp}"
            archive_file_path = data_backup_target_dir / (archive_filename_stem + (DATA_ARCHIVE_EXTENSION if compress_data else ".tar"))
            mode = "w:gz" if compress_data else "w"
            
            def filter_function(tarinfo):
                """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∞—Ä—Ö–∏–≤."""
                if exclude:
                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –∞—Ä—Ö–∏–≤–∞
                    arcname = tarinfo.name
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–∫–ª—é—á—ë–Ω –ª–∏ –ø—É—Ç—å
                    for exclude_path in exclude:
                        if arcname.startswith(exclude_path + "/") or arcname == exclude_path:
                            return None
                return tarinfo
            
            with tarfile.open(archive_file_path, mode) as tar:
                for source_path, arcname_prefix in data_to_archive_paths:
                    tar.add(str(source_path), arcname=arcname_prefix, filter=filter_function)
            sdb_console.print(f"[green]  ‚úÖ –ë—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: '{archive_file_path}'[/]")
            data_backup_successful = True

    sdb_console.print("\n[bold underline]–ò—Ç–æ–≥–∏ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞:[/]")
    if include_db:
        sdb_console.print(f"[bold green]  –ë–î: –£–°–ü–ï–®–ù–û[/]" if db_backup_successful else "[bold red]  –ë–î: –û–®–ò–ë–ö–ê[/]")
    if include_data_dirs:
        sdb_console.print(f"[bold green]  –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞: –£–°–ü–ï–®–ù–û[/]" if data_backup_successful else "[bold red]  –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞: –û–®–ò–ë–ö–ê[/]")

@backup_app.command(name="list", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤ SDB.")
def list_backups_cmd():
    backup_base_dir = _get_backup_base_dir()
    if not backup_base_dir: raise typer.Exit(code=1)
    
    backups = [d for d in backup_base_dir.iterdir() if d.is_dir()]
    if not backups:
        sdb_console.print(f"[yellow]–ù–µ –Ω–∞–π–¥–µ–Ω–æ –±—ç–∫–∞–ø–æ–≤ –≤ '{backup_base_dir}'.[/]"); return

    table = Table(title="[bold cyan]–î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã[/]")
    table.add_column("–ò–º—è –ë—ç–∫–∞–ø–∞", style="cyan")
    table.add_column("–î–∞—Ç–∞ –°–æ–∑–¥–∞–Ω–∏—è")
    table.add_column("–°–æ–¥–µ—Ä–∂–∏—Ç –ë–î?")
    table.add_column("–°–æ–¥–µ—Ä–∂–∏—Ç –î–∞–Ω–Ω—ã–µ?")
    
    for backup_dir in sorted(backups, key=lambda p: p.name, reverse=True):
        date_str = "N/A"
        try:
            ts_str = backup_dir.name.split('_')[-1]
            dt_obj = datetime.strptime(ts_str, '%Y%m%d_%H%M%S')
            date_str = dt_obj.strftime('%Y-%m-%d %H:%M:%S')
        except (ValueError, IndexError): pass
        
        has_db = (backup_dir / DB_BACKUP_DIR_NAME).is_dir() and any((backup_dir / DB_BACKUP_DIR_NAME).iterdir())
        has_data = (backup_dir / DATA_FILES_BACKUP_DIR_NAME).is_dir() and any((backup_dir / DATA_FILES_BACKUP_DIR_NAME).iterdir())
        table.add_row(backup_dir.name, date_str, "‚úÖ" if has_db else "‚ùå", "‚úÖ" if has_data else "‚ùå")
    sdb_console.print(table)

@backup_app.command(name="restore", help="[–û–ü–ê–°–ù–û!] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É SDB –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞.")
def restore_backup_cmd(
    backup_name: str = typer.Argument(..., help="–ò–º—è –±—ç–∫–∞–ø–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è."),
    restore_db: bool = typer.Option(True, "--db/--no-db", help="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."),
    restore_data_dirs: bool = typer.Option(True, "--data/--no-data", help="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞.")
):
    from core.app_settings import settings
    sdb_console.print(Panel(f"[bold red]–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ò–ó –ë–≠–ö–ê–ü–ê: {backup_name}[/]", expand=False))
    sdb_console.print("[bold red]–í–ù–ò–ú–ê–ù–ò–ï: –≠–¢–ê –û–ü–ï–†–ê–¶–ò–Ø –ü–ï–†–ï–ó–ê–ü–ò–®–ï–¢ –¢–ï–ö–£–©–ò–ï –î–ê–ù–ù–´–ï![/]")
    if not confirm_action("–í—ã –∞–±—Å–æ–ª—é—Ç–Ω–æ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", default_choice=False):
        raise typer.Abort()

    base_backup_dir = _get_backup_base_dir()
    if not base_backup_dir: raise typer.Exit(code=1)
    
    target_backup_path = base_backup_dir / backup_name
    if not target_backup_path.is_dir():
        sdb_console.print(f"[bold red]–û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–∞ '{target_backup_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.[/]")
        raise typer.Exit(code=1)

    db_restore_successful = False
    data_restore_successful = False
    
    if restore_db:
        sdb_console.print("\n[bold blue]1. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö[/]")
        db_settings = settings.db
        backup_db_content_path = target_backup_path / DB_BACKUP_DIR_NAME
        if not backup_db_content_path.is_dir() or not any(backup_db_content_path.iterdir()):
            sdb_console.print(f"[yellow]  –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –±—ç–∫–∞–ø–∞ –ë–î –≤ '{backup_db_content_path}'. –ü—Ä–æ–ø—É—Å–∫.[/yellow]")
        else:
            if db_settings.type == "sqlite":
                backup_file = next(backup_db_content_path.glob("*.db"), None)
                if backup_file:
                    shutil.copy2(backup_file, db_settings.sqlite_path)
                    sdb_console.print(f"[green]  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.[/]")
                    db_restore_successful = True
                else:
                    sdb_console.print(f"[yellow]  –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞ SQLite (.db) –≤ '{backup_db_content_path}'.[/yellow]")
            elif db_settings.type == "postgresql":
                pg_restore = _find_system_utility("pg_restore")
                backup_file = backup_db_content_path / POSTGRES_BACKUP_FILENAME
                if pg_restore and backup_file.is_file() and db_settings.pg_dsn:
                    parsed_url = urlparse(str(db_settings.pg_dsn))
                    cmd = [pg_restore, "--clean", "--if-exists", "-d", str(db_settings.pg_dsn), str(backup_file)]
                    env = {"PGPASSWORD": parsed_url.password} if parsed_url.password else {}
                    if _execute_system_command(cmd, env_vars=env):
                        sdb_console.print("[green]  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.[/]")
                        db_restore_successful = True
                else:
                    sdb_console.print("[red]  ‚ùå –£—Ç–∏–ª–∏—Ç–∞ pg_restore, —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞ –∏–ª–∏ DSN –Ω–µ –Ω–∞–π–¥–µ–Ω—ã/–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.[/red]")
            elif db_settings.type == "mysql":
                mysql_client = _find_system_utility("mysql")
                backup_file = backup_db_content_path / MYSQL_BACKUP_FILENAME
                if mysql_client and backup_file.is_file() and db_settings.mysql_dsn:
                    parsed_url = urlparse(str(db_settings.mysql_dsn))
                    cmd = [
                        mysql_client,
                        f"--host={parsed_url.hostname or 'localhost'}",
                        f"--port={parsed_url.port or 3306}",
                        f"--user={parsed_url.username}",
                        parsed_url.path.lstrip('/')
                    ]
                    env = {"MYSQL_PWD": parsed_url.password} if parsed_url.password else {}
                    sql_dump_content = backup_file.read_text(encoding='utf-8')
                    if _execute_system_command(cmd, env_vars=env, input_data=sql_dump_content):
                        sdb_console.print("[green]  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö MySQL —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.[/]")
                        db_restore_successful = True
                else:
                    sdb_console.print("[red]  ‚ùå –£—Ç–∏–ª–∏—Ç–∞ mysql, —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞ –∏–ª–∏ DSN –Ω–µ –Ω–∞–π–¥–µ–Ω—ã/–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.[/red]")

    if restore_data_dirs:
        sdb_console.print(f"\n[bold blue]2. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –î–∞–Ω–Ω—ã—Ö –ü—Ä–æ–µ–∫—Ç–∞[/]")
        backup_data_archive_dir = target_backup_path / DATA_FILES_BACKUP_DIR_NAME
        archive_file = next(backup_data_archive_dir.glob(f"*{DATA_ARCHIVE_EXTENSION}"), None)
        if archive_file and archive_file.is_file():
            target_project_data_dir = settings.core.project_data_path
            with tarfile.open(archive_file, "r:*") as tar:
                tar.extractall(path=str(target_project_data_dir))
            sdb_console.print(f"[green]  ‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –∞—Ä—Ö–∏–≤–∞.[/]")
            data_restore_successful = True
        else:
            sdb_console.print(f"[yellow]  –ù–µ –Ω–∞–π–¥–µ–Ω –∞—Ä—Ö–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ '{backup_data_archive_dir}'. –ü—Ä–æ–ø—É—Å–∫.[/yellow]")

    sdb_console.print("\n[bold underline]–ò—Ç–æ–≥–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:[/]")
    sdb_console.print(f"  –ë–î: {'[green]–£–°–ü–ï–®–ù–û[/]' if db_restore_successful else '[yellow]–ü–†–û–ü–£–©–ï–ù–û/–û–®–ò–ë–ö–ê[/]'}")
    sdb_console.print(f"  –î–∞–Ω–Ω—ã–µ: {'[green]–£–°–ü–ï–®–ù–û[/]' if data_restore_successful else '[yellow]–ü–†–û–ü–£–©–ï–ù–û/–û–®–ò–ë–ö–ê[/]'}")
# --- –ö–û–ù–ï–¶ –§–ê–ô–õ–ê cli/backup.py ---