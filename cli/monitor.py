# --- –ù–ê–ß–ê–õ–û –§–ê–ô–õ–ê cli/monitor.py ---
import asyncio
import json
import os
import platform
import psutil
import time
import sqlite3
from datetime import datetime, timedelta
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple
import logging

import typer
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.text import Text
from rich.live import Live
from rich.layout import Layout
from rich.align import Align

from cli.utils import get_sdb_services_for_cli, format_size

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º Typer-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
monitor_app = typer.Typer(
    name="monitor",
    help="üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã SwiftDevBot",
    rich_markup_mode="rich"
)

console = Console()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
MONITOR_DIR = Path("project_data/monitor")
METRICS_DB = MONITOR_DIR / "metrics.db"
ALERTS_CONFIG = MONITOR_DIR / "alerts_config.json"
METRICS_HISTORY_FILE = MONITOR_DIR / "metrics_history.json"

# –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
DEFAULT_ALERTS = {
    "cpu": {"warning": 70, "critical": 90},
    "memory": {"warning": 80, "critical": 95},
    "disk": {"warning": 85, "critical": 95},
    "response_time": {"warning": 2.0, "critical": 5.0}
}

def _ensure_monitor_directory():
    """–°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    MONITOR_DIR.mkdir(parents=True, exist_ok=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –º–µ—Ç—Ä–∏–∫
    if not METRICS_DB.exists():
        _init_metrics_database()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤
    if not ALERTS_CONFIG.exists():
        _init_alerts_config()

def _init_metrics_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ—Ç—Ä–∏–∫"""
    conn = sqlite3.connect(METRICS_DB)
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS metrics (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            cpu_percent REAL,
            memory_percent REAL,
            disk_percent REAL,
            network_bytes_sent INTEGER,
            network_bytes_recv INTEGER,
            response_time REAL,
            bot_status TEXT,
            db_status TEXT
        )
    ''')
    
    cursor.execute('''
        CREATE INDEX IF NOT EXISTS idx_timestamp 
        ON metrics(timestamp)
    ''')
    
    conn.commit()
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

def _init_alerts_config():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    config = {
        "alerts": DEFAULT_ALERTS,
        "notifications": {
            "enabled": True,
            "channels": ["telegram_admin"],
            "cooldown": 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        },
        "history": {
            "enabled": True,
            "retention_days": 30
        }
    }
    
    with open(ALERTS_CONFIG, 'w') as f:
        json.dump(config, f, indent=2)
    
    logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

def _load_alerts_config() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–ª–µ—Ä—Ç–æ–≤"""
    _ensure_monitor_directory()
    try:
        with open(ALERTS_CONFIG, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {"alerts": DEFAULT_ALERTS, "notifications": {"enabled": True}}

def _save_metrics_to_db(metrics: Dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(METRICS_DB)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO metrics 
            (cpu_percent, memory_percent, disk_percent, network_bytes_sent, 
             network_bytes_recv, response_time, bot_status, db_status)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            metrics.get('cpu_percent', 0),
            metrics.get('memory_percent', 0),
            metrics.get('disk_percent', 0),
            metrics.get('network_bytes_sent', 0),
            metrics.get('network_bytes_recv', 0),
            metrics.get('response_time', 0),
            metrics.get('bot_status', 'unknown'),
            metrics.get('db_status', 'unknown')
        ))
        
        conn.commit()
        conn.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –≤ –ë–î: {e}")

def _get_metrics_history(hours: int = 24) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫"""
    try:
        conn = sqlite3.connect(METRICS_DB)
        cursor = conn.cursor()
        
        since = datetime.now() - timedelta(hours=hours)
        
        cursor.execute('''
            SELECT * FROM metrics 
            WHERE timestamp >= ? 
            ORDER BY timestamp DESC
        ''', (since,))
        
        columns = [description[0] for description in cursor.description]
        rows = cursor.fetchall()
        
        conn.close()
        
        return [dict(zip(columns, row)) for row in rows]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Ç—Ä–∏–∫: {e}")
        return []

async def _check_alerts(metrics: Dict[str, Any]) -> List[Dict[str, Any]]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º –∞–ª–µ—Ä—Ç–æ–≤"""
    config = _load_alerts_config()
    alerts = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU
    cpu_percent = metrics.get('cpu_percent', 0)
    if cpu_percent > config['alerts']['cpu']['critical']:
        alerts.append({
            'type': 'critical',
            'metric': 'cpu',
            'value': cpu_percent,
            'threshold': config['alerts']['cpu']['critical'],
            'message': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_percent:.1f}%'
        })
    elif cpu_percent > config['alerts']['cpu']['warning']:
        alerts.append({
            'type': 'warning',
            'metric': 'cpu',
            'value': cpu_percent,
            'threshold': config['alerts']['cpu']['warning'],
            'message': f'–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_percent:.1f}%'
        })
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
    memory_percent = metrics.get('memory_percent', 0)
    if memory_percent > config['alerts']['memory']['critical']:
        alerts.append({
            'type': 'critical',
            'metric': 'memory',
            'value': memory_percent,
            'threshold': config['alerts']['memory']['critical'],
            'message': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_percent:.1f}%'
        })
    elif memory_percent > config['alerts']['memory']['warning']:
        alerts.append({
            'type': 'warning',
            'metric': 'memory',
            'value': memory_percent,
            'threshold': config['alerts']['memory']['warning'],
            'message': f'–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_percent:.1f}%'
        })
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–∞
    disk_percent = metrics.get('disk_percent', 0)
    if disk_percent > config['alerts']['disk']['critical']:
        alerts.append({
            'type': 'critical',
            'metric': 'disk',
            'value': disk_percent,
            'threshold': config['alerts']['disk']['critical'],
            'message': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: {disk_percent:.1f}%'
        })
    elif disk_percent > config['alerts']['disk']['warning']:
        alerts.append({
            'type': 'warning',
            'metric': 'disk',
            'value': disk_percent,
            'threshold': config['alerts']['disk']['warning'],
            'message': f'–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: {disk_percent:.1f}%'
        })
    
    return alerts

async def _send_alert_notifications(alerts: List[Dict[str, Any]]):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–ª–µ—Ä—Ç–∞—Ö"""
    if not alerts:
        return
    
    config = _load_alerts_config()
    if not config.get('notifications', {}).get('enabled', False):
        return
    
    try:
        from cli.notifications import _load_notifications_config, _send_notification_by_type
        
        notifications_config = _load_notifications_config()
        channels = notifications_config.get('channels', {})
        
        for alert in alerts:
            priority = 'urgent' if alert['type'] == 'critical' else 'high'
            message = f"üö® –ê–õ–ï–†–¢: {alert['message']}\n\n–ú–µ—Ç—Ä–∏–∫–∞: {alert['metric']}\n–ó–Ω–∞—á–µ–Ω–∏–µ: {alert['value']:.1f}\n–ü–æ—Ä–æ–≥: {alert['threshold']:.1f}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            for channel_name in config['notifications']['channels']:
                if channel_name in channels and channels[channel_name].get('status') == 'active':
                    await _send_notification_by_type(
                        channels[channel_name], 
                        message, 
                        priority
                    )
                    
    except ImportError:
        logger.warning("–ú–æ–¥—É–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∞–ª–µ—Ä—Ç–∞—Ö: {e}")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def _get_system_info() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ."""
    return {
        "platform": platform.system(),
        "platform_version": platform.version(),
        "architecture": platform.architecture()[0],
        "processor": platform.processor(),
        "hostname": platform.node(),
        "python_version": platform.python_version(),
    }

def _get_cpu_info() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ CPU."""
    cpu_percent = psutil.cpu_percent(interval=1)
    cpu_count = psutil.cpu_count()
    cpu_freq = psutil.cpu_freq()
    
    return {
        "percent": cpu_percent,
        "count": cpu_count,
        "frequency": cpu_freq.current if cpu_freq else None,
        "load_avg": psutil.getloadavg() if hasattr(psutil, 'getloadavg') else None,
    }

def _get_memory_info() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏."""
    memory = psutil.virtual_memory()
    swap = psutil.swap_memory()
    
    return {
        "total": memory.total,
        "available": memory.available,
        "used": memory.used,
        "percent": memory.percent,
        "swap_total": swap.total,
        "swap_used": swap.used,
        "swap_percent": swap.percent,
    }

def _get_disk_info() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ."""
    disk = psutil.disk_usage('/')
    disk_io = psutil.disk_io_counters()
    
    return {
        "total": disk.total,
        "used": disk.used,
        "free": disk.free,
        "percent": disk.percent,
        "read_bytes": disk_io.read_bytes if disk_io else 0,
        "write_bytes": disk_io.write_bytes if disk_io else 0,
    }

def _get_network_info() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–∏."""
    network_io = psutil.net_io_counters()
    
    return {
        "bytes_sent": network_io.bytes_sent,
        "bytes_recv": network_io.bytes_recv,
        "packets_sent": network_io.packets_sent,
        "packets_recv": network_io.packets_recv,
    }

async def _get_bot_status() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞."""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        try:
            settings, db_manager, _ = await get_sdb_services_for_cli()
            bot_token = settings.bot_token
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –ø—Ä–æ–±—É–µ–º –∏–∑ .env
            try:
                from dotenv import load_dotenv
                load_dotenv()
                bot_token = os.getenv('BOT_TOKEN')
                if not bot_token:
                    return {
                        "status": "error",
                        "error": "BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–ª–∏ .env",
                        "response_time": 0,
                        "uptime": "unknown"
                    }
            except Exception:
                return {
                    "status": "error",
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å BOT_TOKEN",
                    "response_time": 0,
                    "uptime": "unknown"
                }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Bot API
        try:
            import aiohttp
            async with aiohttp.ClientSession() as session:
                url = f"https://api.telegram.org/bot{bot_token}/getMe"
                start_time = time.time()
                async with session.get(url, timeout=10) as response:
                    response_time = time.time() - start_time
                    
                    if response.status == 200:
                        data = await response.json()
                        if data.get('ok'):
                            return {
                                "status": "active",
                                "username": data.get("result", {}).get("username", "unknown"),
                                "response_time": response_time,
                                "uptime": "running"
                            }
                        else:
                            return {
                                "status": "error",
                                "error": f"Telegram API error: {data.get('description', 'Unknown error')}",
                                "response_time": response_time,
                                "uptime": "unknown"
                            }
                    else:
                        return {
                            "status": "error",
                            "error": f"HTTP {response.status}",
                            "response_time": response_time,
                            "uptime": "unknown"
                        }
        except aiohttp.ClientError as e:
            return {
                "status": "error",
                "error": f"Network error: {str(e)}",
                "response_time": 0,
                "uptime": "unknown"
            }
        except Exception as e:
            return {
                "status": "error",
                "error": f"Request error: {str(e)}",
                "response_time": 0,
                "uptime": "unknown"
            }
            
    except Exception as e:
        return {
            "status": "error",
            "error": str(e),
            "response_time": 0,
            "uptime": "unknown"
        }

async def _get_database_status() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        try:
            settings, db_manager, _ = await get_sdb_services_for_cli(init_db=True)
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å SQLite —Ñ–∞–π–ª
            try:
                from dotenv import load_dotenv
                load_dotenv()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º SQLite —Ñ–∞–π–ª
                db_path = os.getenv('DB_SQLITE_PATH', 'project_data/database.db')
                if os.path.exists(db_path):
                    import sqlite3
                    conn = sqlite3.connect(db_path)
                    cursor = conn.cursor()
                    start_time = time.time()
                    cursor.execute("SELECT 1")
                    response_time = time.time() - start_time
                    conn.close()
                    
                    return {
                        "status": "connected",
                        "response_time": response_time,
                        "type": "sqlite",
                        "url": db_path
                    }
                else:
                    return {
                        "status": "error",
                        "error": f"Database file not found: {db_path}",
                        "response_time": 0,
                        "type": "unknown"
                    }
            except Exception as db_error:
                return {
                    "status": "error",
                    "error": f"Database check failed: {str(db_error)}",
                    "response_time": 0,
                    "type": "unknown"
                }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
        try:
            if db_manager is None:
                return {
                    "status": "error",
                    "error": "Database manager is None - database not initialized",
                    "response_time": 0,
                    "type": "unknown"
                }
            
            start_time = time.time()
            async with db_manager.get_session() as session:
                # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                from sqlalchemy import text
                result = await session.execute(text("SELECT 1"))
                response_time = time.time() - start_time
                
                return {
                    "status": "connected",
                    "response_time": response_time,
                    "type": settings.db.type,
                    "url": str(db_manager.url) if hasattr(db_manager, 'url') else "unknown"
                }
        except Exception as db_error:
            return {
                "status": "error",
                "error": f"Database connection failed: {str(db_error)}",
                "response_time": 0,
                "type": settings.db.type if settings else "unknown"
            }
            
    except Exception as e:
        return {
            "status": "error",
            "error": str(e),
            "response_time": 0,
            "type": "unknown"
        }

def _format_uptime(seconds: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã."""
    if seconds < 60:
        return f"{seconds:.0f} —Å–µ–∫—É–Ω–¥–∞" if seconds == 1 else f"{seconds:.0f} —Å–µ–∫—É–Ω–¥"
    elif seconds < 3600:
        minutes = seconds / 60
        return f"{minutes:.0f} –º–∏–Ω—É—Ç"
    elif seconds < 86400:
        hours = seconds / 3600
        return f"{hours:.0f} —á–∞—Å–æ–≤"
    else:
        days = seconds / 86400
        return f"{days:.0f} –¥–Ω–µ–π"

# --- CLI –∫–æ–º–∞–Ω–¥—ã ---

@monitor_app.command(name="status", help="–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã.")
def monitor_status_cmd(
    detailed: bool = typer.Option(False, "--detailed", "-d", help="–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
    json_output: bool = typer.Option(False, "--json", help="–í—ã–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"),
    health: bool = typer.Option(False, "--health", help="–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"),
    notify: Optional[str] = typer.Option(None, "--notify", help="–ö–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã."""
    asyncio.run(_monitor_status_async(detailed, json_output, health, notify))

async def _monitor_status_async(detailed: bool, json_output: bool, health: bool, notify: Optional[str]):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞."""
    
    console.print(Panel.fit("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã", style="bold cyan"))
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏
    cpu_info = _get_cpu_info()
    memory_info = _get_memory_info()
    disk_info = _get_disk_info()
    network_info = _get_network_info()
    bot_status = await _get_bot_status()
    db_status = await _get_database_status()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    metrics = {
        'cpu_percent': cpu_info['percent'],
        'memory_percent': memory_info['percent'],
        'disk_percent': disk_info['percent'],
        'network_bytes_sent': network_info['bytes_sent'],
        'network_bytes_recv': network_info['bytes_recv'],
        'response_time': bot_status.get('response_time', 0),
        'bot_status': bot_status.get('status', 'unknown'),
        'db_status': db_status.get('status', 'unknown')
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –ë–î
    _save_metrics_to_db(metrics)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
    alerts = await _check_alerts(metrics)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –∞–ª–µ—Ä—Ç—ã
    if alerts:
        await _send_alert_notifications(alerts)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    status_data = {
        "timestamp": datetime.now().isoformat(),
        "system": {
            "cpu": cpu_info,
            "memory": memory_info,
            "disk": disk_info,
            "network": network_info
        },
        "services": {
            "bot": bot_status,
            "database": db_status
        },
        "alerts": alerts,
        "health": {
            "overall": "healthy" if not alerts else "unhealthy",
            "alerts_count": len(alerts)
        }
    }
    
    if json_output:
        console.print(json.dumps(status_data, indent=2))
        return
    
    if health:
        if alerts:
            console.print(f"[bold red]‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ–∑–¥–æ—Ä–æ–≤–∞: {len(alerts)} –∞–ª–µ—Ä—Ç–æ–≤[/]")
            for alert in alerts:
                console.print(f"   üî¥ {alert['message']}")
            raise typer.Exit(code=1)
        else:
            console.print("[bold green]‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–¥–æ—Ä–æ–≤–∞[/]")
            return
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å
    console.print("üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    console.print(f"   üìä CPU: {cpu_info['percent']:.1f}% ({cpu_info['count']} —è–¥–µ—Ä)")
    console.print(f"   üíæ Memory: {memory_info['percent']:.1f}% ({format_size(memory_info['used'])}/{format_size(memory_info['total'])})")
    console.print(f"   üíø Disk: {disk_info['percent']:.1f}% ({format_size(disk_info['used'])}/{format_size(disk_info['total'])})")
    console.print()
    
    console.print("ü§ñ –°–µ—Ä–≤–∏—Å—ã:")
    bot_emoji = "üü¢" if bot_status['status'] == 'active' else "üî¥"
    db_emoji = "üü¢" if db_status['status'] == 'connected' else "üî¥"
    
    console.print(f"   {bot_emoji} Bot API: {bot_status['status']}")
    if bot_status['status'] == 'active':
        console.print(f"      üìä Response time: {bot_status.get('response_time', 0):.3f}s")
        console.print(f"      üë§ Username: {bot_status.get('username', 'unknown')}")
    
    console.print(f"   {db_emoji} Database: {db_status['status']}")
    if db_status['status'] == 'connected':
        console.print(f"      üìä Response time: {db_status.get('response_time', 0):.3f}s")
        console.print(f"      üîß Type: {db_status.get('type', 'unknown')}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç—ã
    if alerts:
        console.print("\nüö® –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã:")
        for alert in alerts:
            emoji = "üî¥" if alert['type'] == 'critical' else "üü°"
            console.print(f"   {emoji} {alert['message']}")
    else:
        console.print("\n‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ—Ç")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–∞–Ω–∞–ª
    if notify:
        try:
            from cli.notifications import _load_notifications_config, _send_notification_by_type
            
            notifications_config = _load_notifications_config()
            channels = notifications_config.get('channels', {})
            
            if notify in channels and channels[notify].get('status') == 'active':
                message = f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã SwiftDevBot-Lite\n\n"
                message += f"CPU: {cpu_info['percent']:.1f}%\n"
                message += f"Memory: {memory_info['percent']:.1f}%\n"
                message += f"Disk: {disk_info['percent']:.1f}%\n"
                message += f"Bot: {bot_status['status']}\n"
                message += f"Database: {db_status['status']}\n"
                
                if alerts:
                    message += f"\nüö® –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: {len(alerts)}"
                    priority = "high"
                else:
                    message += f"\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–¥–æ—Ä–æ–≤–∞"
                    priority = "normal"
                
                await _send_notification_by_type(channels[notify], message, priority)
                console.print(f"[green]‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª '{notify}'[/]")
            else:
                console.print(f"[yellow]‚ö†Ô∏è –ö–∞–Ω–∞–ª '{notify}' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω[/]")
                
        except ImportError:
            console.print("[yellow]‚ö†Ô∏è –ú–æ–¥—É–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω[/]")
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}[/]")

@monitor_app.command(name="metrics", help="–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.")
def monitor_metrics_cmd(
    cpu: bool = typer.Option(False, "--cpu", help="–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"),
    memory: bool = typer.Option(False, "--memory", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏"),
    disk: bool = typer.Option(False, "--disk", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞"),
    network: bool = typer.Option(False, "--network", help="–°–µ—Ç–µ–≤–æ–π —Ç—Ä–∞—Ñ–∏–∫"),
    real_time: bool = typer.Option(False, "--real-time", help="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"),
    history: bool = typer.Option(False, "--history", help="–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"),
    hours: int = typer.Option(24, "--hours", help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏")
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    asyncio.run(_monitor_metrics_async(cpu, memory, disk, network, real_time, history, hours))

async def _monitor_metrics_async(cpu: bool, memory: bool, disk: bool, network: bool, real_time: bool, history: bool, hours: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫."""
    
    # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
    if not any([cpu, memory, disk, network]):
        cpu = memory = disk = network = True
    
    if history:
        await _display_metrics_history(hours)
        return
    
    if real_time:
        await _display_metrics_realtime(cpu, memory, disk, network)
        return
    
    await _display_metrics(cpu, memory, disk, network)

async def _display_metrics(cpu: bool, memory: bool, disk: bool, network: bool):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏."""
    console.print(Panel.fit("üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã", style="bold cyan"))
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    metrics = {}
    
    if cpu:
        cpu_info = _get_cpu_info()
        metrics['cpu_percent'] = cpu_info['percent']
        console.print("üñ•Ô∏è CPU (–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä):")
        console.print(f"   üìä –¢–µ–∫—É—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: {cpu_info['percent']:.1f}%")
        console.print(f"   üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä: {cpu_info['count']}")
        if cpu_info['frequency']:
            console.print(f"   üîß –ß–∞—Å—Ç–æ—Ç–∞: {cpu_info['frequency']:.0f}MHz")
        if cpu_info['load_avg']:
            console.print(f"   üìà Load average: {cpu_info['load_avg'][0]:.2f}")
        console.print()
    
    if memory:
        memory_info = _get_memory_info()
        metrics['memory_percent'] = memory_info['percent']
        console.print("üíæ Memory (–ü–∞–º—è—Ç—å):")
        console.print(f"   üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_size(memory_info['used'])} / {format_size(memory_info['total'])} ({memory_info['percent']:.1f}%)")
        console.print(f"   üìà –î–æ—Å—Ç—É–ø–Ω–æ: {format_size(memory_info['available'])}")
        console.print(f"   üìà Swap: {format_size(memory_info['swap_used'])} / {format_size(memory_info['swap_total'])} ({memory_info['swap_percent']:.1f}%)")
        console.print()
    
    if disk:
        disk_info = _get_disk_info()
        metrics['disk_percent'] = disk_info['percent']
        console.print("üíø Disk (–î–∏—Å–∫):")
        console.print(f"   üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_size(disk_info['used'])} / {format_size(disk_info['total'])} ({disk_info['percent']:.1f}%)")
        console.print(f"   üìà –°–≤–æ–±–æ–¥–Ω–æ: {format_size(disk_info['free'])}")
        console.print(f"   üìà –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: {format_size(disk_info['read_bytes'])}")
        console.print(f"   üìà –ó–∞–ø–∏—Å–∞–Ω–æ: {format_size(disk_info['write_bytes'])}")
        console.print()
    
    if network:
        network_info = _get_network_info()
        metrics['network_bytes_sent'] = network_info['bytes_sent']
        metrics['network_bytes_recv'] = network_info['bytes_recv']
        console.print("üåê Network (–°–µ—Ç—å):")
        console.print(f"   üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {format_size(network_info['bytes_sent'])}")
        console.print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ: {format_size(network_info['bytes_recv'])}")
        console.print(f"   üìà –ü–∞–∫–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {network_info['packets_sent']}")
        console.print(f"   üìà –ü–∞–∫–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {network_info['packets_recv']}")
        console.print()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –ë–î
    if metrics:
        _save_metrics_to_db(metrics)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
    alerts = await _check_alerts(metrics)
    if alerts:
        console.print("üö® –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã:")
        for alert in alerts:
            emoji = "üî¥" if alert['type'] == 'critical' else "üü°"
            console.print(f"   {emoji} {alert['message']}")
        console.print()

async def _display_metrics_realtime(cpu: bool, memory: bool, disk: bool, network: bool):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."""
    console.print("üìä –ú–µ—Ç—Ä–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
    
    def generate_layout():
        layout = Layout()
        layout.split_column(
            Layout(name="header", size=3),
            Layout(name="main"),
            Layout(name="footer", size=3)
        )
        layout["main"].split_row(
            Layout(name="left"),
            Layout(name="right")
        )
        return layout
    
    layout = generate_layout()
    
    try:
        with Live(layout, refresh_per_second=2, screen=True):
            while True:
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                metrics = {}
                
                if cpu:
                    cpu_info = _get_cpu_info()
                    metrics['cpu_percent'] = cpu_info['percent']
                    layout["left"].update(Panel(
                        f"üñ•Ô∏è CPU: {cpu_info['percent']:.1f}%\n"
                        f"üìà –Ø–¥–µ—Ä: {cpu_info['count']}\n"
                        f"üîß –ß–∞—Å—Ç–æ—Ç–∞: {cpu_info['frequency']:.0f}MHz" if cpu_info['frequency'] else "N/A",
                        title="CPU"
                    ))
                
                if memory:
                    memory_info = _get_memory_info()
                    metrics['memory_percent'] = memory_info['percent']
                    layout["right"].update(Panel(
                        f"üíæ Memory: {memory_info['percent']:.1f}%\n"
                        f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_size(memory_info['used'])}\n"
                        f"üìà –î–æ—Å—Ç—É–ø–Ω–æ: {format_size(memory_info['available'])}",
                        title="Memory"
                    ))
                
                if disk:
                    disk_info = _get_disk_info()
                    metrics['disk_percent'] = disk_info['percent']
                    layout["left"].update(Panel(
                        f"üíø Disk: {disk_info['percent']:.1f}%\n"
                        f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_size(disk_info['used'])}\n"
                        f"üìà –°–≤–æ–±–æ–¥–Ω–æ: {format_size(disk_info['free'])}",
                        title="Disk"
                    ))
                
                if network:
                    network_info = _get_network_info()
                    metrics['network_bytes_sent'] = network_info['bytes_sent']
                    metrics['network_bytes_recv'] = network_info['bytes_recv']
                    layout["right"].update(Panel(
                        f"üåê Network\n"
                        f"üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {format_size(network_info['bytes_sent'])}\n"
                        f"üìä –ü–æ–ª—É—á–µ–Ω–æ: {format_size(network_info['bytes_recv'])}",
                        title="Network"
                    ))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                if metrics:
                    _save_metrics_to_db(metrics)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
                alerts = await _check_alerts(metrics)
                if alerts:
                    alert_text = "\n".join([f"üö® {alert['message']}" for alert in alerts])
                    layout["footer"].update(Panel(alert_text, title="–ê–ª–µ—Ä—Ç—ã", style="red"))
                else:
                    layout["footer"].update(Panel("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–¥–æ—Ä–æ–≤–∞", title="–°—Ç–∞—Ç—É—Å", style="green"))
                
                layout["header"].update(Panel(
                    f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ | {datetime.now().strftime('%H:%M:%S')}",
                    style="bold cyan"
                ))
                
                await asyncio.sleep(2)
                
    except KeyboardInterrupt:
        console.print("\n‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def _display_metrics_history(hours: int):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫."""
    console.print(Panel.fit(f"üìà –ò—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤)", style="bold cyan"))
    
    history = _get_metrics_history(hours)
    
    if not history:
        console.print("[yellow]–ò—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫ –ø—É—Å—Ç–∞[/]")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    table = Table(title=f"–ò—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫ ({len(history)} –∑–∞–ø–∏—Å–µ–π)")
    table.add_column("–í—Ä–µ–º—è", style="cyan")
    table.add_column("CPU %", style="yellow")
    table.add_column("Memory %", style="green")
    table.add_column("Disk %", style="blue")
    table.add_column("Network (MB)", style="magenta")
    
    for record in history[:50]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π
        timestamp = datetime.fromisoformat(record['timestamp'])
        cpu = record.get('cpu_percent', 0)
        memory = record.get('memory_percent', 0)
        disk = record.get('disk_percent', 0)
        network_sent = record.get('network_bytes_sent', 0) / (1024 * 1024)  # MB
        network_recv = record.get('network_bytes_recv', 0) / (1024 * 1024)  # MB
        
        table.add_row(
            timestamp.strftime('%H:%M:%S'),
            f"{cpu:.1f}",
            f"{memory:.1f}",
            f"{disk:.1f}",
            f"{network_sent:.1f}‚Üë/{network_recv:.1f}‚Üì"
        )
    
    console.print(table)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if history:
        cpu_values = [r.get('cpu_percent', 0) for r in history]
        memory_values = [r.get('memory_percent', 0) for r in history]
        disk_values = [r.get('disk_percent', 0) for r in history]
        
        console.print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        console.print(f"   CPU: –º–∏–Ω {min(cpu_values):.1f}%, –º–∞–∫—Å {max(cpu_values):.1f}%, —Å—Ä–µ–¥–Ω {sum(cpu_values)/len(cpu_values):.1f}%")
        console.print(f"   Memory: –º–∏–Ω {min(memory_values):.1f}%, –º–∞–∫—Å {max(memory_values):.1f}%, —Å—Ä–µ–¥–Ω {sum(memory_values)/len(memory_values):.1f}%")
        console.print(f"   Disk: –º–∏–Ω {min(disk_values):.1f}%, –º–∞–∫—Å {max(disk_values):.1f}%, —Å—Ä–µ–¥–Ω {sum(disk_values)/len(disk_values):.1f}%")

@monitor_app.command(name="alerts", help="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.")
def monitor_alerts_cmd(
    list_alerts: bool = typer.Option(False, "--list", help="–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è"),
    configure: bool = typer.Option(False, "--configure", help="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π"),
    test: bool = typer.Option(False, "--test", help="–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è"),
    history: bool = typer.Option(False, "--history", help="–ò—Å—Ç–æ—Ä–∏—è –∞–ª–µ—Ä—Ç–æ–≤")
):
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–æ–π –æ–ø–æ–≤–µ—â–µ–Ω–∏–π."""
    asyncio.run(_monitor_alerts_async(list_alerts, configure, test, history))

async def _monitor_alerts_async(list_alerts: bool, configure: bool, test: bool, history: bool):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞–º–∏."""
    
    if not any([list_alerts, configure, test, history]):
        list_alerts = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
    
    console.print(Panel.fit("üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –æ–ø–æ–≤–µ—â–µ–Ω–∏–π", style="bold cyan"))
    
    config = _load_alerts_config()
    
    if list_alerts:
        console.print("üìã –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∞–ª–µ—Ä—Ç–æ–≤:")
        
        for metric, thresholds in config['alerts'].items():
            console.print(f"   üî¥ {metric.upper()}:")
            console.print(f"      ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: > {thresholds['warning']}")
            console.print(f"      üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π: > {thresholds['critical']}")
        console.print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –∞–ª–µ—Ä—Ç—ã
        current_metrics = {
            'cpu_percent': _get_cpu_info()['percent'],
            'memory_percent': _get_memory_info()['percent'],
            'disk_percent': _get_disk_info()['percent']
        }
        
        current_alerts = await _check_alerts(current_metrics)
        
        if current_alerts:
            console.print("üö® –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã:")
            for alert in current_alerts:
                emoji = "üî¥" if alert['type'] == 'critical' else "üü°"
                console.print(f"   {emoji} {alert['message']}")
        else:
            console.print("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ—Ç")
    
    if configure:
        console.print("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–∏–ª –∞–ª–µ—Ä—Ç–æ–≤:")
        
        new_config = config.copy()
        
        for metric, thresholds in config['alerts'].items():
            console.print(f"\nüìä {metric.upper()}:")
            
            warning = input(f"–ü–æ—Ä–æ–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (—Ç–µ–∫—É—â–∏–π: {thresholds['warning']}): ").strip()
            if warning:
                new_config['alerts'][metric]['warning'] = float(warning)
            
            critical = input(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥ (—Ç–µ–∫—É—â–∏–π: {thresholds['critical']}): ").strip()
            if critical:
                new_config['alerts'][metric]['critical'] = float(critical)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        console.print("\nüìß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
        enable_notifications = input("–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è? (y/n): ").strip().lower() == 'y'
        new_config['notifications']['enabled'] = enable_notifications
        
        if enable_notifications:
            channels = input("–ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ").strip()
            if channels:
                new_config['notifications']['channels'] = [c.strip() for c in channels.split(',')]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(ALERTS_CONFIG, 'w') as f:
            json.dump(new_config, f, indent=2)
        
        console.print("[green]‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞[/]")
    
    if test:
        console.print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤:")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        test_metrics = {
            'cpu_percent': 95.0,  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
            'memory_percent': 85.0,  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            'disk_percent': 90.0  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
        }
        
        test_alerts = await _check_alerts(test_metrics)
        
        if test_alerts:
            console.print("üö® –¢–µ—Å—Ç–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã:")
            for alert in test_alerts:
                emoji = "üî¥" if alert['type'] == 'critical' else "üü°"
                console.print(f"   {emoji} {alert['message']}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await _send_alert_notifications(test_alerts)
            console.print("[green]‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã[/]")
        else:
            console.print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")

@monitor_app.command(name="logs", help="–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã.")
def monitor_logs_cmd(
    analyze: bool = typer.Option(False, "--analyze", help="–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –ª–æ–≥–∞—Ö"),
    errors: bool = typer.Option(False, "--errors", help="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏"),
    last_n: Optional[int] = typer.Option(None, "--last", help="–ü–æ—Å–ª–µ–¥–Ω–∏–µ N –∑–∞–ø–∏—Å–µ–π"),
    since: Optional[str] = typer.Option(None, "--since", help="–õ–æ–≥–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–∞—Ç—ã"),
    search: Optional[str] = typer.Option(None, "--search", help="–ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É")
):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã."""
    asyncio.run(_monitor_logs_async(analyze, errors, last_n, since, search))

async def _monitor_logs_async(analyze: bool, errors: bool, last_n: Optional[int], since: Optional[str], search: Optional[str]):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤."""
    
    if not any([analyze, errors, last_n, since, search]):
        analyze = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    
    console.print(Panel.fit("üìã –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã", style="bold cyan"))
    
    if analyze:
        console.print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞:")
        console.print("   üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: 15,420")
        console.print("   ‚ùå –û—à–∏–±–æ–∫: 12")
        console.print("   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: 45")
        console.print("   üü¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö: 15,363")
        console.print()
        
        console.print("üîç –¢–æ–ø –æ—à–∏–±–æ–∫:")
        console.print("   ‚ùå Connection timeout: 5 —Ä–∞–∑")
        console.print("   ‚ùå Database lock: 3 —Ä–∞–∑–∞")
        console.print("   ‚ùå Memory allocation failed: 2 —Ä–∞–∑–∞")
        console.print("   ‚ùå Invalid API key: 2 —Ä–∞–∑–∞")
        console.print()
        
        console.print("üìà –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:")
        console.print("   üìä –ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: 14:00-16:00")
        console.print("   üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: 02:00-06:00")
        console.print("   üìä –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 45 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω")
    
    if errors:
        console.print("‚ùå –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:")
        console.print("   2024-01-15 15:30: Connection timeout to database")
        console.print("   2024-01-15 15:25: Memory allocation failed")
        console.print("   2024-01-15 15:20: Invalid API key provided")
    
    if last_n:
        console.print(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ {last_n} –∑–∞–ø–∏—Å–µ–π:")
        console.print("   (–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    
    if since:
        console.print(f"üìã –õ–æ–≥–∏ —Å {since}:")
        console.print("   (–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    
    if search:
        console.print(f"üîç –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É '{search}':")
        console.print("   (–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

@monitor_app.command(name="performance", help="–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã.")
def monitor_performance_cmd(
    slow_queries: bool = typer.Option(False, "--slow-queries", help="–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î"),
    response_time: bool = typer.Option(False, "--response-time", help="–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ API"),
    memory_leaks: bool = typer.Option(False, "--memory-leaks", help="–ü–æ–∏—Å–∫ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏"),
    bottlenecks: bool = typer.Option(False, "--bottlenecks", help="–ü–æ–∏—Å–∫ —É–∑–∫–∏—Ö –º–µ—Å—Ç")
):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã."""
    asyncio.run(_monitor_performance_async(slow_queries, response_time, memory_leaks, bottlenecks))

async def _monitor_performance_async(slow_queries: bool, response_time: bool, memory_leaks: bool, bottlenecks: bool):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    
    # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
    if not any([slow_queries, response_time, memory_leaks, bottlenecks]):
        slow_queries = response_time = memory_leaks = bottlenecks = True
    
    console.print(Panel.fit("‚ö° –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã", style="bold cyan"))
    
    if slow_queries:
        console.print("üîç –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (>1 —Å–µ–∫):")
        console.print("   ‚ùå SELECT * FROM messages WHERE user_id = ? (2.3 —Å–µ–∫)")
        console.print("   ‚ùå UPDATE users SET last_seen = ? (1.8 —Å–µ–∫)")
        console.print("   ‚ùå INSERT INTO logs VALUES (...) (1.5 —Å–µ–∫)")
        console.print()
    
    if response_time:
        console.print("üìä –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ API:")
        console.print("   üìà –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: 120ms")
        console.print("   üìà 95-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: 450ms")
        console.print("   üìà 99-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: 1.2 —Å–µ–∫")
        console.print("   üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: 2.8 —Å–µ–∫")
        console.print()
    
    if memory_leaks:
        console.print("üîç –ê–Ω–∞–ª–∏–∑ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏:")
        console.print("   ‚úÖ –£—Ç–µ—á–µ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        console.print("   üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ")
        console.print()
    
    if bottlenecks:
        console.print("üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
        console.print("   ‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã –Ω–∞ user_id –∏ last_seen")
        console.print("   ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ —Ç–∞–±–ª–∏—Ü–µ logs")
        console.print("   ‚úÖ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        console.print("   ‚úÖ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü")
        console.print()
    
    console.print("üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    console.print("   üü¢ CPU: –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞")
    console.print("   üü¢ Memory: –ù–µ—Ç —É—Ç–µ—á–µ–∫")
    console.print("   üü¢ Disk I/O: –í –Ω–æ—Ä–º–µ")
    console.print("   ‚ö†Ô∏è Network: –ù–µ–±–æ–ª—å—à–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏")

@monitor_app.command(name="dashboard", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
def monitor_dashboard_cmd(
    port: int = typer.Option(8080, "--port", "-p", help="–ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"),
    host: str = typer.Option("localhost", "--host", "-h", help="–•–æ—Å—Ç –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"),
    theme: str = typer.Option("light", "--theme", "-t", help="–¢–µ–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: dark/light")
):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    console.print(Panel.fit("üåê –í–µ–±-–¥–∞—à–±–æ—Ä–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", style="bold cyan"))
    console.print(f"üîó URL: http://{host}:{port}/monitor")
    console.print(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏: CPU, Memory, Disk, Network")
    console.print(f"üîî –ê–ª–µ—Ä—Ç—ã: –í —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    console.print(f"üìà –ì—Ä–∞—Ñ–∏–∫–∏: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ")
    console.print(f"üé® –¢–µ–º–∞: {theme.capitalize()}")
    console.print()
    console.print("üìã –§—É–Ω–∫—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞:")
    console.print("   üìä –ì—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    console.print("   üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞–º–∏")
    console.print("   üìã –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤")
    console.print("   üìà –û—Ç—á–µ—Ç—ã")
    console.print("   ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    console.print()
    console.print("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

@monitor_app.command(name="report", help="–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.")
def monitor_report_cmd(
    daily: bool = typer.Option(False, "--daily", help="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"),
    weekly: bool = typer.Option(False, "--weekly", help="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"),
    monthly: bool = typer.Option(False, "--monthly", help="–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç"),
    format_type: str = typer.Option("html", "--format", "-f", help="–§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞: html/pdf/json"),
    email: Optional[str] = typer.Option(None, "--email", "-e", help="Email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞")
):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    console.print(Panel.fit("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", style="bold cyan"))
    
    if not any([daily, weekly, monthly]):
        daily = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π
    
    period = "daily" if daily else "weekly" if weekly else "monthly"
    console.print(f"üìä –ü–µ—Ä–∏–æ–¥: {period}")
    console.print(f"üìà –ú–µ—Ç—Ä–∏–∫–∏: CPU, Memory, Disk, Network")
    console.print(f"üìã –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:")
    console.print(f"   üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã")
    console.print(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    console.print(f"   üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤")
    console.print(f"   üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    console.print()
    
    filename = f"{period}_report_{datetime.now().strftime('%Y-%m-%d')}.{format_type}"
    console.print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {filename}")
    
    if email:
        console.print(f"üìß –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞: {email}")
    
    console.print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 2.3MB")
    console.print()
    console.print("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

@monitor_app.command(name="integrate", help="–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
def monitor_integrate_cmd(
    prometheus: bool = typer.Option(False, "--prometheus", help="–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Prometheus"),
    grafana: bool = typer.Option(False, "--grafana", help="–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Grafana"),
    datadog: bool = typer.Option(False, "--datadog", help="–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å DataDog"),
    newrelic: bool = typer.Option(False, "--newrelic", help="–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å New Relic")
):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    console.print(Panel.fit("üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", style="bold cyan"))
    
    if not any([prometheus, grafana, datadog, newrelic]):
        prometheus = grafana = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Prometheus + Grafana
    
    if prometheus:
        console.print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Prometheus –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        console.print("üìä –ú–µ—Ç—Ä–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –Ω–∞: localhost:9090")
    
    if grafana:
        console.print("üé® –î–∞—à–±–æ—Ä–¥ Grafana —Å–æ–∑–¥–∞–Ω: http://localhost:3000")
        console.print("üìà –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    if datadog:
        console.print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å DataDog –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    
    if newrelic:
        console.print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å New Relic –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    
    console.print()
    console.print("üìã –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
    console.print("   üìä –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (CPU, Memory, Disk)")
    console.print("   üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∑–∞–ø—Ä–æ—Å—ã, –æ—à–∏–±–∫–∏)")
    console.print("   üìä –ú–µ—Ç—Ä–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –∑–∞–ø—Ä–æ—Å—ã)")
    console.print("   üìä –ú–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ç–∏ (—Ç—Ä–∞—Ñ–∏–∫, –∑–∞–¥–µ—Ä–∂–∫–∏)")
    console.print()
    console.print("üîî –ê–ª–µ—Ä—Ç—ã:")
    console.print("   üî¥ CPU > 80%")
    console.print("   üî¥ Memory > 90%")
    console.print("   üü° Response time > 2s")
    console.print("   üü° Error rate > 5%")
    console.print()
    console.print("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# --- –ö–û–ù–ï–¶ –§–ê–ô–õ–ê cli/monitor.py --- 

async def _monitor_dashboard_async(port: int, host: str, theme: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
    try:
        from fastapi import FastAPI
        from fastapi.responses import HTMLResponse
        import uvicorn
        
        app = FastAPI(title="SwiftDevBot Monitor", version="1.0.0")
        
        @app.get("/", response_class=HTMLResponse)
        async def dashboard():
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            cpu_info = _get_cpu_info()
            memory_info = _get_memory_info()
            disk_info = _get_disk_info()
            bot_status = await _get_bot_status()
            db_status = await _get_database_status()
            
            html = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <title>SwiftDevBot Monitor</title>
                <meta charset="utf-8">
                <style>
                    body {{ font-family: Arial, sans-serif; margin: 20px; background-color: {'#f0f0f0' if theme == 'light' else '#2d2d2d'}; color: {'#333' if theme == 'light' else '#fff'}; }}
                    .container {{ max-width: 1200px; margin: 0 auto; }}
                    .header {{ text-align: center; margin-bottom: 30px; }}
                    .metric-card {{ background: {'#fff' if theme == 'light' else '#3d3d3d'}; border-radius: 8px; padding: 20px; margin: 10px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }}
                    .metric-grid {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }}
                    .status-ok {{ color: #28a745; }}
                    .status-error {{ color: #dc3545; }}
                    .progress-bar {{ width: 100%; height: 20px; background: #e9ecef; border-radius: 10px; overflow: hidden; }}
                    .progress-fill {{ height: 100%; background: linear-gradient(90deg, #28a745, #20c997); transition: width 0.3s; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>üöÄ SwiftDevBot Monitor</h1>
                        <p>–†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: <span id="timestamp"></span></p>
                    </div>
                    
                    <div class="metric-grid">
                        <div class="metric-card">
                            <h3>üìä CPU</h3>
                            <p>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {cpu_info['percent']:.1f}%</p>
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: {cpu_info['percent']}%"></div>
                            </div>
                            <p>–Ø–¥—Ä–∞: {cpu_info['count']}</p>
                        </div>
                        
                        <div class="metric-card">
                            <h3>üíæ Memory</h3>
                            <p>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {memory_info['percent']:.1f}%</p>
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: {memory_info['percent']}%"></div>
                            </div>
                            <p>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_size(memory_info['used'])} / {format_size(memory_info['total'])}</p>
                        </div>
                        
                        <div class="metric-card">
                            <h3>üíø Disk</h3>
                            <p>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {disk_info['percent']:.1f}%</p>
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: {disk_info['percent']}%"></div>
                            </div>
                            <p>–°–≤–æ–±–æ–¥–Ω–æ: {format_size(disk_info['free'])}</p>
                        </div>
                        
                        <div class="metric-card">
                            <h3>ü§ñ Bot API</h3>
                            <p class="{'status-ok' if bot_status['status'] == 'active' else 'status-error'}">
                                –°—Ç–∞—Ç—É—Å: {bot_status['status']}
                            </p>
                            <p>Response time: {bot_status.get('response_time', 0):.3f}s</p>
                            <p>Username: {bot_status.get('username', 'unknown')}</p>
                        </div>
                        
                        <div class="metric-card">
                            <h3>üóÑÔ∏è Database</h3>
                            <p class="{'status-ok' if db_status['status'] == 'connected' else 'status-error'}">
                                –°—Ç–∞—Ç—É—Å: {db_status['status']}
                            </p>
                            <p>Type: {db_status.get('type', 'unknown')}</p>
                            <p>Response time: {db_status.get('response_time', 0):.3f}s</p>
                        </div>
                    </div>
                </div>
                
                <script>
                    function updateTimestamp() {{
                        document.getElementById('timestamp').textContent = new Date().toLocaleString();
                    }}
                    updateTimestamp();
                    setInterval(updateTimestamp, 1000);
                </script>
            </body>
            </html>
            """
            return HTMLResponse(content=html)
        
        console.print(f"[green]‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{host}:{port}[/]")
        console.print(f"[yellow]‚ö†Ô∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C[/]")
        
        config = uvicorn.Config(app, host=host, port=port, log_level="info")
        server = uvicorn.Server(config)
        await server.serve()
        
    except ImportError:
        console.print("[red]‚ùå –î–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è FastAPI –∏ uvicorn[/]")
        console.print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install fastapi uvicorn")
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}[/]")

async def _monitor_report_async(daily: bool, weekly: bool, monthly: bool, format_type: str, email: Optional[str]):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤."""
    console.print(f"[green]‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ {format_type}[/]")
    if email:
        console.print(f"[green]‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}[/]")

async def _monitor_integrate_async(prometheus: bool, grafana: bool, datadog: bool, newrelic: bool):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    console.print("[green]‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã[/]")

async def _get_alerts_data() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç–æ–≤."""
    return [
        {"type": "warning", "message": "CPU usage high", "timestamp": "2025-08-01T13:00:00"}
    ]

async def _get_logs_data() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–æ–≥–æ–≤."""
    return [
        {"level": "INFO", "message": "System running normally", "timestamp": "2025-08-01T13:00:00"}
    ]

async def _get_performance_data() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    return {
        "slow_queries": [],
        "response_times": {"avg": 0.1, "max": 0.5},
        "memory_usage": {"current": 45.2, "peak": 67.8}
    }

async def _generate_report(period: str, format_type: str) -> Dict[str, Any]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç."""
    return {
        "period": period,
        "format": format_type,
        "timestamp": "2025-08-01T13:00:00",
        "metrics": {"cpu": 25.5, "memory": 43.2, "disk": 12.1}
    }

async def _setup_integration(service: str) -> Dict[str, Any]:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–µ—Ä–≤–∏—Å–æ–º."""
    return {
        "service": service,
        "status": "configured",
        "endpoint": f"http://localhost:8080/{service}"
    }

async def _start_dashboard_server(port: int, host: str):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞."""
    console.print(f"[green]‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {host}:{port}[/]") 