# cli/api.py
import asyncio
import typer
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from typing import Optional, List, Dict, Any
import json
from pathlib import Path
from datetime import datetime, timedelta
import secrets
import hashlib
import requests
import socket
import psutil
from dataclasses import dataclass

console = Console()
api_app = typer.Typer(name="api", help="üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è API
API_DIR = Path("project_data/api")
API_CONFIG_FILE = API_DIR / "api_config.json"
API_KEYS_FILE = API_DIR / "api_keys.json"
API_RATE_LIMITS_FILE = API_DIR / "rate_limits.json"
API_DOCS_DIR = API_DIR / "docs"

@dataclass
class APIEndpoint:
    path: str
    method: str
    description: str
    status: str
    rate_limit: Optional[int] = None
    auth_required: bool = True

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ API endpoints
DEFAULT_ENDPOINTS = [
    APIEndpoint("/api/v1/health", "GET", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã", "active", 100, False),
    APIEndpoint("/api/v1/status", "GET", "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", "active", 60),
    APIEndpoint("/api/v1/users", "GET", "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "active", 30),
    APIEndpoint("/api/v1/users", "POST", "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "active", 10),
    APIEndpoint("/api/v1/users/{id}", "GET", "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "active", 60),
    APIEndpoint("/api/v1/users/{id}", "PUT", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "active", 30),
    APIEndpoint("/api/v1/users/{id}", "DELETE", "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "active", 10),
    APIEndpoint("/api/v1/modules", "GET", "–°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π", "active", 60),
    APIEndpoint("/api/v1/modules", "POST", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è", "active", 10),
    APIEndpoint("/api/v1/modules/{id}", "GET", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ", "active", 60),
    APIEndpoint("/api/v1/modules/{id}", "DELETE", "–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è", "active", 10),
    APIEndpoint("/api/v1/system", "GET", "–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "active", 30),
    APIEndpoint("/api/v1/logs", "GET", "–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã", "active", 20),
    APIEndpoint("/api/v1/backup", "POST", "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏", "active", 5),
    APIEndpoint("/api/v1/restore", "POST", "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏", "active", 5),
]

def _ensure_api_directory():
    """–°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è API –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    API_DIR.mkdir(parents=True, exist_ok=True)
    API_DOCS_DIR.mkdir(parents=True, exist_ok=True)
    
    if not API_CONFIG_FILE.exists():
        default_config = {
            "server": {
                "host": "localhost",
                "port": 8000,
                "debug": False,
                "ssl_enabled": False
            },
            "endpoints": {f"{ep.method}:{ep.path}": {
                "path": ep.path,
                "method": ep.method,
                "description": ep.description,
                "status": ep.status,
                "rate_limit": ep.rate_limit,
                "auth_required": ep.auth_required
            } for ep in DEFAULT_ENDPOINTS},
            "rate_limits": {
                "default": 60,
                "authenticated": 120,
                "admin": 300
            }
        }
        with open(API_CONFIG_FILE, 'w') as f:
            json.dump(default_config, f, indent=2)
    
    if not API_KEYS_FILE.exists():
        with open(API_KEYS_FILE, 'w') as f:
            json.dump({"keys": {}}, f, indent=2)
    
    if not API_RATE_LIMITS_FILE.exists():
        with open(API_RATE_LIMITS_FILE, 'w') as f:
            json.dump({"limits": {}, "usage": {}}, f, indent=2)

def _load_api_config() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API"""
    _ensure_api_directory()
    try:
        with open(API_CONFIG_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {"server": {}, "endpoints": {}, "rate_limits": {}}

def _save_api_config(config: Dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API"""
    _ensure_api_directory()
    with open(API_CONFIG_FILE, 'w') as f:
        json.dump(config, f, indent=2)

def _load_api_keys() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å API –∫–ª—é—á–∏"""
    _ensure_api_directory()
    try:
        with open(API_KEYS_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {"keys": {}}

def _save_api_keys(keys_data: Dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å API –∫–ª—é—á–∏"""
    _ensure_api_directory()
    with open(API_KEYS_FILE, 'w') as f:
        json.dump(keys_data, f, indent=2)

def _load_rate_limits() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    _ensure_api_directory()
    try:
        with open(API_RATE_LIMITS_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {"limits": {}, "usage": {}}

def _save_rate_limits(rate_data: Dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    _ensure_api_directory()
    with open(API_RATE_LIMITS_FILE, 'w') as f:
        json.dump(rate_data, f, indent=2)

def _generate_api_key() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å API –∫–ª—é—á"""
    return f"sk-{secrets.token_urlsafe(32)}"

def _check_api_server_status() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å API —Å–µ—Ä–≤–µ—Ä–∞"""
    config = _load_api_config()
    server_config = config.get("server", {})
    
    host = server_config.get("host", "localhost")
    port = server_config.get("port", 8000)
    
    status_info = {
        "host": host,
        "port": port,
        "ssl_enabled": server_config.get("ssl_enabled", False),
        "debug": server_config.get("debug", False),
        "status": "unknown",
        "uptime": None,
        "memory_usage": None,
        "cpu_usage": None
    }
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–ª—É—à–∞–µ—Ç –ª–∏ –ø–æ—Ä—Ç
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(2)
        result = sock.connect_ex((host, port))
        sock.close()
        
        if result == 0:
            status_info["status"] = "running"
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            try:
                for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'create_time']):
                    try:
                        cmdline = proc.info['cmdline']
                        if cmdline and any('uvicorn' in cmd or 'gunicorn' in cmd for cmd in cmdline):
                            status_info["uptime"] = datetime.now().timestamp() - proc.info['create_time']
                            status_info["memory_usage"] = proc.memory_info().rss / 1024 / 1024  # MB
                            status_info["cpu_usage"] = proc.cpu_percent()
                            break
                    except (psutil.NoSuchProcess, psutil.AccessDenied):
                        continue
            except Exception:
                pass
        else:
            status_info["status"] = "stopped"
            
    except Exception as e:
        status_info["status"] = "error"
        status_info["error"] = str(e)
    
    return status_info

@api_app.command(name="status", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å API.")
def api_status_cmd(
    detailed: bool = typer.Option(False, "--detailed", "-d", help="–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
    format: str = typer.Option("table", "--format", "-f", help="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: table, json")
):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å API"""
    try:
        asyncio.run(_api_status_async(detailed, format))
    except typer.Exit: raise
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ 'api status': {e}[/]")
        raise typer.Exit(code=1)

async def _api_status_async(detailed: bool, format: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å API"""
    console.print(Panel("[bold blue]–°–¢–ê–¢–£–° API[/]", expand=False, border_style="blue"))
    
    config = _load_api_config()
    server_status = _check_api_server_status()
    
    if format == "json":
        status_data = {
            "server": server_status,
            "endpoints": config.get("endpoints", {}),
            "rate_limits": config.get("rate_limits", {})
        }
        console.print(json.dumps(status_data, indent=2, ensure_ascii=False))
        return
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
    console.print(f"[cyan]–°–µ—Ä–≤–µ—Ä:[/] {server_status['host']}:{server_status['port']}")
    console.print(f"[cyan]–°—Ç–∞—Ç—É—Å:[/] {server_status['status']}")
    console.print(f"[cyan]SSL:[/] {'–í–∫–ª—é—á–µ–Ω' if server_status['ssl_enabled'] else '–û—Ç–∫–ª—é—á–µ–Ω'}")
    console.print(f"[cyan]Debug:[/] {'–í–∫–ª—é—á–µ–Ω' if server_status['debug'] else '–û—Ç–∫–ª—é—á–µ–Ω'}")
    
    if server_status['uptime']:
        uptime_seconds = int(server_status['uptime'])
        uptime_str = str(timedelta(seconds=uptime_seconds))
        console.print(f"[cyan]–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:[/] {uptime_str}")
    
    if server_status['memory_usage']:
        console.print(f"[cyan]–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:[/] {server_status['memory_usage']:.1f} MB")
    
    if server_status['cpu_usage']:
        console.print(f"[cyan]–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU:[/] {server_status['cpu_usage']:.1f}%")
    
    # –°—Ç–∞—Ç—É—Å endpoints
    endpoints = config.get("endpoints", {})
    if endpoints:
        console.print(f"\n[bold cyan]API Endpoints ({len(endpoints)}):[/]")
        
        table = Table()
        table.add_column("Endpoint", style="cyan")
        table.add_column("–ú–µ—Ç–æ–¥", style="blue")
        table.add_column("–°—Ç–∞—Ç—É—Å", style="green")
        table.add_column("–õ–∏–º–∏—Ç", style="yellow")
        table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="white")
        
        for endpoint_key, endpoint_info in endpoints.items():
            status = endpoint_info.get("status", "unknown")
            status_color = {
                "active": "green",
                "planned": "yellow",
                "deprecated": "red",
                "maintenance": "orange"
            }.get(status, "white")
            
            rate_limit = endpoint_info.get("rate_limit", "N/A")
            if rate_limit:
                rate_limit = f"{rate_limit}/min"
            
            table.add_row(
                endpoint_info.get("path", "N/A"),
                endpoint_info.get("method", "N/A"),
                f"[{status_color}]{status}[/{status_color}]",
                str(rate_limit),
                endpoint_info.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
            )
        
        console.print(table)
    
    # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if detailed:
        console.print(f"\n[bold cyan]–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:[/]")
        console.print(f"[dim]–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª:[/] {API_CONFIG_FILE}")
        console.print(f"[dim]–§–∞–π–ª –∫–ª—é—á–µ–π:[/] {API_KEYS_FILE}")
        console.print(f"[dim]–§–∞–π–ª –ª–∏–º–∏—Ç–æ–≤:[/] {API_RATE_LIMITS_FILE}")

@api_app.command(name="keys", help="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏.")
def api_keys_cmd(
    action: str = typer.Argument(..., help="–î–µ–π—Å—Ç–≤–∏–µ: list, generate, revoke, info"),
    key_name: Optional[str] = typer.Option(None, "--name", "-n", help="–ò–º—è –∫–ª—é—á–∞"),
    permissions: Optional[str] = typer.Option(None, "--permissions", "-p", help="–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (read,write,admin)"),
    expires_in_days: Optional[int] = typer.Option(None, "--expires", "-e", help="–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ –¥–Ω—è—Ö")
):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏"""
    try:
        asyncio.run(_api_keys_async(action, key_name, permissions, expires_in_days))
    except typer.Exit: raise
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ 'api keys': {e}[/]")
        raise typer.Exit(code=1)

async def _api_keys_async(action: str, key_name: Optional[str], permissions: Optional[str], expires_in_days: Optional[int]):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞–º–∏"""
    console.print(Panel("[bold blue]–£–ü–†–ê–í–õ–ï–ù–ò–ï API –ö–õ–Æ–ß–ê–ú–ò[/]", expand=False, border_style="blue"))
    
    keys_data = _load_api_keys()
    keys = keys_data.get("keys", {})
    
    if action == "list":
        _list_api_keys(keys)
    elif action == "generate":
        if not key_name:
            console.print("[bold red]–î–ª—è –¥–µ–π—Å—Ç–≤–∏—è 'generate' –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∫–ª—é—á–∞ (--name).[/]")
            raise typer.Exit(code=1)
        _generate_api_key_cmd(key_name, permissions, expires_in_days, keys_data)
    elif action == "revoke":
        if not key_name:
            console.print("[bold red]–î–ª—è –¥–µ–π—Å—Ç–≤–∏—è 'revoke' –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∫–ª—é—á–∞ (--name).[/]")
            raise typer.Exit(code=1)
        _revoke_api_key(key_name, keys_data)
    elif action == "info":
        if not key_name:
            console.print("[bold red]–î–ª—è –¥–µ–π—Å—Ç–≤–∏—è 'info' –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∫–ª—é—á–∞ (--name).[/]")
            raise typer.Exit(code=1)
        _show_api_key_info(key_name, keys)
    else:
        console.print(f"[bold red]–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}[/]")
        raise typer.Exit(code=1)

def _list_api_keys(keys: Dict[str, Any]):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ API –∫–ª—é—á–µ–π"""
    if not keys:
        console.print("[yellow]API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/]")
        return
    
    table = Table(title="API –ö–ª—é—á–∏")
    table.add_column("–ò–º—è", style="cyan")
    table.add_column("–°–æ–∑–¥–∞–Ω", style="blue")
    table.add_column("–ü—Ä–∞–≤–∞", style="green")
    table.add_column("–ò—Å—Ç–µ–∫–∞–µ—Ç", style="yellow")
    table.add_column("–°—Ç–∞—Ç—É—Å", style="red")
    
    for key_name, key_info in keys.items():
        created_at = key_info.get("created_at", "")
        if created_at:
            try:
                dt = datetime.fromisoformat(created_at)
                created_str = dt.strftime("%Y-%m-%d %H:%M")
            except:
                created_str = created_at
        else:
            created_str = "N/A"
        
        expires_at = key_info.get("expires_at")
        if expires_at:
            try:
                dt = datetime.fromisoformat(expires_at)
                if dt < datetime.now():
                    expires_str = "–ò—Å—Ç–µ–∫"
                    status = "expired"
                    status_color = "red"
                else:
                    expires_str = dt.strftime("%Y-%m-%d %H:%M")
                    status = "active"
                    status_color = "green"
            except:
                expires_str = "N/A"
                status = "unknown"
                status_color = "white"
        else:
            expires_str = "–ë–µ—Å—Å—Ä–æ—á–Ω–æ"
            status = "active"
            status_color = "green"
        
        permissions = key_info.get("permissions", "read")
        
        table.add_row(
            key_name,
            created_str,
            permissions,
            expires_str,
            f"[{status_color}]{status}[/{status_color}]"
        )
    
    console.print(table)

def _generate_api_key_cmd(key_name: str, permissions: Optional[str], expires_in_days: Optional[int], keys_data: Dict[str, Any]):
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π API –∫–ª—é—á"""
    keys = keys_data.get("keys", {})
    
    if key_name in keys:
        from cli.utils import confirm_action
        if not confirm_action(f"API –∫–ª—é—á '{key_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å?"):
            return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á
    api_key = _generate_api_key()
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ
    now = datetime.now()
    expires_at = now + timedelta(days=expires_in_days) if expires_in_days else None
    
    keys[key_name] = {
        "key": api_key,
        "permissions": permissions or "read",
        "created_at": now.isoformat(),
        "expires_at": expires_at.isoformat() if expires_at else None,
        "last_used": None,
        "usage_count": 0
    }
    
    _save_api_keys(keys_data)
    
    console.print(f"[green]‚úÖ API –∫–ª—é—á '{key_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω[/]")
    console.print(f"[dim]–ö–ª—é—á:[/] {api_key}")
    console.print(f"[dim]–ü—Ä–∞–≤–∞:[/] {permissions or 'read'}")
    if expires_at:
        console.print(f"[dim]–ò—Å—Ç–µ–∫–∞–µ—Ç:[/] {expires_at.strftime('%Y-%m-%d %H:%M')}")

def _revoke_api_key(key_name: str, keys_data: Dict[str, Any]):
    """–û—Ç–æ–∑–≤–∞—Ç—å API –∫–ª—é—á"""
    keys = keys_data.get("keys", {})
    
    if key_name not in keys:
        console.print(f"[bold red]API –∫–ª—é—á '{key_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω[/]")
        raise typer.Exit(code=1)
    
    from cli.utils import confirm_action
    if not confirm_action(f"–û—Ç–æ–∑–≤–∞—Ç—å API –∫–ª—é—á '{key_name}'?"):
        return
    
    del keys[key_name]
    _save_api_keys(keys_data)
    
    console.print(f"[green]‚úÖ API –∫–ª—é—á '{key_name}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω[/]")

def _show_api_key_info(key_name: str, keys: Dict[str, Any]):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± API –∫–ª—é—á–µ"""
    if key_name not in keys:
        console.print(f"[bold red]API –∫–ª—é—á '{key_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω[/]")
        raise typer.Exit(code=1)
    
    key_info = keys[key_name]
    
    console.print(f"[cyan]–ò–º—è:[/] {key_name}")
    console.print(f"[cyan]–ö–ª—é—á:[/] {key_info.get('key', 'N/A')}")
    console.print(f"[cyan]–ü—Ä–∞–≤–∞:[/] {key_info.get('permissions', 'N/A')}")
    console.print(f"[cyan]–°–æ–∑–¥–∞–Ω:[/] {key_info.get('created_at', 'N/A')}")
    console.print(f"[cyan]–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:[/] {key_info.get('last_used', '–ù–∏–∫–æ–≥–¥–∞')}")
    console.print(f"[cyan]–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:[/] {key_info.get('usage_count', 0)}")
    
    expires_at = key_info.get("expires_at")
    if expires_at:
        try:
            dt = datetime.fromisoformat(expires_at)
            if dt < datetime.now():
                console.print(f"[cyan]–ò—Å—Ç–µ–∫–∞–µ—Ç:[/] [red]–ò—Å—Ç–µ–∫ {dt.strftime('%Y-%m-%d %H:%M')}[/red]")
            else:
                console.print(f"[cyan]–ò—Å—Ç–µ–∫–∞–µ—Ç:[/] {dt.strftime('%Y-%m-%d %H:%M')}")
        except:
            console.print(f"[cyan]–ò—Å—Ç–µ–∫–∞–µ—Ç:[/] {expires_at}")

@api_app.command(name="rate-limit", help="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.")
def api_rate_limit_cmd(
    action: str = typer.Argument(..., help="–î–µ–π—Å—Ç–≤–∏–µ: show, set, reset, stats"),
    endpoint: Optional[str] = typer.Option(None, "--endpoint", "-e", help="Endpoint –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"),
    limit: Optional[int] = typer.Option(None, "--limit", "-l", help="–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É"),
    window: Optional[int] = typer.Option(None, "--window", "-w", help="–û–∫–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        asyncio.run(_api_rate_limit_async(action, endpoint, limit, window))
    except typer.Exit: raise
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ 'api rate-limit': {e}[/]")
        raise typer.Exit(code=1)

async def _api_rate_limit_async(action: str, endpoint: Optional[str], limit: Optional[int], window: Optional[int]):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏"""
    console.print(Panel("[bold blue]–£–ü–†–ê–í–õ–ï–ù–ò–ï –õ–ò–ú–ò–¢–ê–ú–ò –ó–ê–ü–†–û–°–û–í[/]", expand=False, border_style="blue"))
    
    rate_data = _load_rate_limits()
    limits = rate_data.get("limits", {})
    usage = rate_data.get("usage", {})
    
    if action == "show":
        _show_rate_limits(limits, usage)
    elif action == "set":
        if not endpoint or limit is None:
            console.print("[bold red]–î–ª—è –¥–µ–π—Å—Ç–≤–∏—è 'set' –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å endpoint –∏ limit.[/]")
            raise typer.Exit(code=1)
        _set_rate_limit(endpoint, limit, window, rate_data)
    elif action == "reset":
        _reset_rate_limits(rate_data)
    elif action == "stats":
        _show_rate_limit_stats(usage)
    else:
        console.print(f"[bold red]–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}[/]")
        raise typer.Exit(code=1)

def _show_rate_limits(limits: Dict[str, Any], usage: Dict[str, Any]):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    if not limits:
        console.print("[yellow]–õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã[/]")
        return
    
    table = Table(title="–õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤")
    table.add_column("Endpoint", style="cyan")
    table.add_column("–õ–∏–º–∏—Ç", style="blue")
    table.add_column("–û–∫–Ω–æ", style="green")
    table.add_column("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ", style="yellow")
    table.add_column("–û—Å—Ç–∞–ª–æ—Å—å", style="red")
    
    for endpoint, limit_info in limits.items():
        limit_value = limit_info.get("limit", 0)
        window_value = limit_info.get("window", 60)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        current_usage = usage.get(endpoint, {}).get("count", 0)
        remaining = max(0, limit_value - current_usage)
        
        usage_color = "green" if remaining > 0 else "red"
        
        table.add_row(
            endpoint,
            f"{limit_value}/min",
            f"{window_value}s",
            str(current_usage),
            f"[{usage_color}]{remaining}[/{usage_color}]"
        )
    
    console.print(table)

def _set_rate_limit(endpoint: str, limit: int, window: Optional[int], rate_data: Dict[str, Any]):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤"""
    limits = rate_data.get("limits", {})
    
    limits[endpoint] = {
        "limit": limit,
        "window": window or 60,
        "created_at": datetime.now().isoformat()
    }
    
    _save_rate_limits(rate_data)
    
    console.print(f"[green]‚úÖ –õ–∏–º–∏—Ç –¥–ª—è '{endpoint}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {limit}/min[/]")

def _reset_rate_limits(rate_data: Dict[str, Any]):
    """–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    from cli.utils import confirm_action
    if not confirm_action("–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤?"):
        return
    
    rate_data["limits"] = {}
    rate_data["usage"] = {}
    _save_rate_limits(rate_data)
    
    console.print("[green]‚úÖ –í—Å–µ –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–±—Ä–æ—à–µ–Ω—ã[/]")

def _show_rate_limit_stats(usage: Dict[str, Any]):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤"""
    if not usage:
        console.print("[yellow]–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—É—Å—Ç–∞[/]")
        return
    
    table = Table(title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤")
    table.add_column("Endpoint", style="cyan")
    table.add_column("–ó–∞–ø—Ä–æ—Å–æ–≤", style="blue")
    table.add_column("–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å", style="green")
    table.add_column("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è", style="yellow")
    
    for endpoint, usage_info in usage.items():
        count = usage_info.get("count", 0)
        last_request = usage_info.get("last_request")
        avg_time = usage_info.get("avg_response_time", "N/A")
        
        if last_request:
            try:
                dt = datetime.fromisoformat(last_request)
                last_str = dt.strftime("%H:%M:%S")
            except:
                last_str = last_request
        else:
            last_str = "–ù–∏–∫–æ–≥–¥–∞"
        
        table.add_row(endpoint, str(count), last_str, str(avg_time))
    
    console.print(table)

@api_app.command(name="docs", help="–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é API.")
def api_docs_cmd(
    format: str = typer.Option("html", "--format", "-f", help="–§–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: html, json, yaml"),
    output_file: Optional[str] = typer.Option(None, "--output", "-o", help="–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"),
    include_examples: bool = typer.Option(True, "--examples", help="–í–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤")
):
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é API"""
    try:
        asyncio.run(_api_docs_async(format, output_file, include_examples))
    except typer.Exit: raise
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ 'api docs': {e}[/]")
        raise typer.Exit(code=1)

async def _api_docs_async(format: str, output_file: Optional[str], include_examples: bool):
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é API"""
    console.print(Panel("[bold blue]–ì–ï–ù–ï–†–ê–¶–ò–Ø –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò API[/]", expand=False, border_style="blue"))
    
    config = _load_api_config()
    endpoints = config.get("endpoints", {})
    
    if not endpoints:
        console.print("[yellow]API endpoints –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/]")
        return
    
    console.print(f"[cyan]–§–æ—Ä–º–∞—Ç:[/] {format}")
    console.print(f"[cyan]–í–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã:[/] {'–î–∞' if include_examples else '–ù–µ—Ç'}")
    
    if format == "html":
        _generate_html_docs(endpoints, output_file, include_examples)
    elif format == "json":
        _generate_json_docs(endpoints, output_file)
    elif format == "yaml":
        _generate_yaml_docs(endpoints, output_file)
    else:
        console.print(f"[bold red]–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {format}[/]")
        raise typer.Exit(code=1)

def _generate_html_docs(endpoints: Dict[str, Any], output_file: Optional[str], include_examples: bool):
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"""
    html_content = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>SwiftDevBot API Documentation</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .endpoint { border: 1px solid #ddd; margin: 10px 0; padding: 15px; border-radius: 5px; }
            .method { font-weight: bold; color: #fff; padding: 3px 8px; border-radius: 3px; }
            .get { background-color: #61affe; }
            .post { background-color: #49cc90; }
            .put { background-color: #fca130; }
            .delete { background-color: #f93e3e; }
            .path { font-family: monospace; background-color: #f5f5f5; padding: 5px; }
            .description { margin: 10px 0; }
            .example { background-color: #f8f9fa; padding: 10px; border-left: 4px solid #007bff; margin: 10px 0; }
            .rate-limit { color: #6c757d; font-size: 0.9em; }
        </style>
    </head>
    <body>
        <h1>SwiftDevBot API Documentation</h1>
        <p>–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API –¥–ª—è SwiftDevBot —Å–∏—Å—Ç–µ–º—ã.</p>
    """
    
    for endpoint_key, endpoint_info in endpoints.items():
        method = endpoint_info.get("method", "GET")
        path = endpoint_info.get("path", "")
        description = endpoint_info.get("description", "")
        rate_limit = endpoint_info.get("rate_limit", "N/A")
        auth_required = endpoint_info.get("auth_required", True)
        
        html_content += f"""
        <div class="endpoint">
            <div>
                <span class="method {method.lower()}">{method}</span>
                <span class="path">{path}</span>
            </div>
            <div class="description">{description}</div>
            <div class="rate-limit">–õ–∏–º–∏—Ç: {rate_limit}/min | –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {'–¢—Ä–µ–±—É–µ—Ç—Å—è' if auth_required else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}</div>
        """
        
        if include_examples:
            html_content += f"""
            <div class="example">
                <strong>–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:</strong><br>
                <code>curl -X {method} "http://localhost:8000{path}"</code>
            </div>
            """
        
        html_content += "</div>"
    
    html_content += """
    </body>
    </html>
    """
    
    if output_file:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        console.print(f"[green]‚úÖ HTML –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {output_file}[/]")
    else:
        default_file = API_DOCS_DIR / "api_docs.html"
        with open(default_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        console.print(f"[green]‚úÖ HTML –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {default_file}[/]")

def _generate_json_docs(endpoints: Dict[str, Any], output_file: Optional[str]):
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å JSON –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"""
    docs_data = {
        "info": {
            "title": "SwiftDevBot API",
            "version": "1.0.0",
            "description": "API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π SwiftDevBot"
        },
        "endpoints": endpoints
    }
    
    if output_file:
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(docs_data, f, indent=2, ensure_ascii=False)
        console.print(f"[green]‚úÖ JSON –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {output_file}[/]")
    else:
        default_file = API_DOCS_DIR / "api_docs.json"
        with open(default_file, 'w', encoding='utf-8') as f:
            json.dump(docs_data, f, indent=2, ensure_ascii=False)
        console.print(f"[green]‚úÖ JSON –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {default_file}[/]")

def _generate_yaml_docs(endpoints: Dict[str, Any], output_file: Optional[str]):
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å YAML –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"""
    try:
        import yaml
    except ImportError:
        console.print("[yellow]–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ YAML –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PyYAML[/]")
        return
    
    docs_data = {
        "info": {
            "title": "SwiftDevBot API",
            "version": "1.0.0",
            "description": "API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π SwiftDevBot"
        },
        "endpoints": endpoints
    }
    
    if output_file:
        with open(output_file, 'w', encoding='utf-8') as f:
            yaml.dump(docs_data, f, default_flow_style=False, allow_unicode=True)
        console.print(f"[green]‚úÖ YAML –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {output_file}[/]")
    else:
        default_file = API_DOCS_DIR / "api_docs.yaml"
        with open(default_file, 'w', encoding='utf-8') as f:
            yaml.dump(docs_data, f, default_flow_style=False, allow_unicode=True)
        console.print(f"[green]‚úÖ YAML –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {default_file}[/]")

if __name__ == "__main__":
    api_app() 