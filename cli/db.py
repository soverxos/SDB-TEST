# cli_commands/db_cmd.py

import typer
from rich.console import Console
from rich.panel import Panel
import subprocess
import sys
import os
from pathlib import Path
import asyncio

console = Console()

db_app = typer.Typer(
    name="db",
    help="üóÑÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ Alembic.",
    rich_markup_mode="rich"
)

# –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞ (__file__)
# cli_commands/db_cmd.py -> cli_commands/ -> PROJECT_ROOT
PROJECT_ROOT_FROM_DB_CMD = Path(__file__).resolve().parent.parent
ALEMBIC_INI_PATH_STR = str(PROJECT_ROOT_FROM_DB_CMD / "alembic.ini")


def _run_alembic_command(args: list[str], suppress_success_output: bool = False) -> bool:
    try:
        alembic_ini_actual_path = Path(ALEMBIC_INI_PATH_STR)
        if not alembic_ini_actual_path.is_file():
            console.print(f"[bold red]–û—à–∏–±–∫–∞: –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Alembic '{ALEMBIC_INI_PATH_STR}' –Ω–µ –Ω–∞–π–¥–µ–Ω.[/]")
            console.print(f"  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –ø—É—Ç—å –∫ alembic.ini –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
            return False

        command = ["alembic", "-c", ALEMBIC_INI_PATH_STR] + args
        
        env = os.environ.copy()
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH, —á—Ç–æ–±—ã Alembic –º–æ–≥ –Ω–∞–π—Ç–∏ core –∏ modules
        # –≠—Ç–æ –≤–∞–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ env.py –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã SDB
        existing_python_path = env.get("PYTHONPATH", "")
        project_root_str = str(PROJECT_ROOT_FROM_DB_CMD)
        
        if existing_python_path:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ project_root_str –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å
            path_parts = existing_python_path.split(os.pathsep)
            if project_root_str not in path_parts:
                env["PYTHONPATH"] = f"{project_root_str}{os.pathsep}{existing_python_path}"
            else: # –£–∂–µ –µ—Å—Ç—å, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
                env["PYTHONPATH"] = existing_python_path
        else:
            env["PYTHONPATH"] = project_root_str
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ sys.path –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        # (–û–±—ã—á–Ω–æ PYTHONPATH –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)
        # current_sys_path_str = os.pathsep.join(s.strip() for s in sys.path if s.strip())
        # env["PYTHONPATH"] = f"{current_sys_path_str}{os.pathsep}{env.get('PYTHONPATH', '')}"


        process = subprocess.run(
            command,
            capture_output=True,
            text=True,
            encoding='utf-8',
            env=env,
            cwd=str(PROJECT_ROOT_FROM_DB_CMD) # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
        )

        if process.stdout and not (process.returncode == 0 and suppress_success_output):
            console.print(process.stdout.strip())

        if process.stderr:
            is_actual_error_in_stderr = "error" in process.stderr.lower() or \
                                        "fail" in process.stderr.lower() or \
                                        "traceback" in process.stderr.lower() or \
                                        "critical" in process.stderr.lower()

            if process.returncode != 0 or is_actual_error_in_stderr:
                console.print(f"[bold red]Alembic STDERR:[/]\n{process.stderr.strip()}")
            elif not (process.returncode == 0 and suppress_success_output):
                 console.print(f"[dim yellow]Alembic STDERR (info/warnings):[/]\n{process.stderr.strip()}")

        if process.returncode != 0:
            console.print(f"[bold red]–ö–æ–º–∞–Ω–¥–∞ Alembic –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {process.returncode}). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ –≤—ã—à–µ.[/]")
            return False
        return True

    except FileNotFoundError:
        console.print(f"[bold red]–û—à–∏–±–∫–∞: –ö–æ–º–∞–Ω–¥–∞ 'alembic' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.[/]")
        console.print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Alembic —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –≤–∞—à–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º PATH.")
        console.print(f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: [cyan]pip install alembic[/]")
        return False
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã Alembic: {e}[/]")
        return False

@db_app.command(name="upgrade", help="–ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ Alembic (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ 'head', —Ç.–µ. –ø–æ—Å–ª–µ–¥–Ω–µ–π).")
def db_upgrade_cmd(
    revision: str = typer.Argument("head", help="ID —Ä–µ–≤–∏–∑–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'head', 'base', specific_id, '+1', '-2').")
):
    console.print(f"–ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π Alembic –¥–æ —Ä–µ–≤–∏–∑–∏–∏: [cyan]{revision}[/]...")
    if not _run_alembic_command(["upgrade", revision]):
        raise typer.Exit(code=1)
    console.print(f"[bold green]–ö–æ–º–∞–Ω–¥–∞ 'db upgrade {revision}' —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.[/]")

@db_app.command(name="downgrade", help="–û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ Alembic.")
def db_downgrade_cmd(
    revision: str = typer.Argument(
        "1", 
        help="ID —Ä–µ–≤–∏–∑–∏–∏ –¥–ª—è –æ—Ç–∫–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'base', specific_id) –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≤–∏–∑–∏–π –¥–ª—è –æ—Ç–∫–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1' –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π, '2' –¥–ª—è –¥–≤—É—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö). –î–ª—è –æ—Ç–∫–∞—Ç–∞ –Ω–∞ –æ–¥–Ω—É —Ä–µ–≤–∏–∑–∏—é –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ —É–∫–∞–∑–∞—Ç—å '-1'."
    )
):
    target_revision = revision
    if revision.isdigit():
        target_revision = f"-{revision}" 
        description_log = f"–Ω–∞ {revision} —Ä–µ–≤–∏–∑–∏—é(–∏) –Ω–∞–∑–∞–¥ (–¥–æ {target_revision})"
    else:
        description_log = f"–¥–æ —Ä–µ–≤–∏–∑–∏–∏ '{revision}'"

    console.print(f"–ó–∞–ø—É—Å–∫ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–π Alembic {description_log}...")
    if typer.confirm(f"–í—ã [bold red]–£–í–ï–†–ï–ù–´[/], —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ {description_log}? –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö.", abort=True):
        if not _run_alembic_command(["downgrade", revision]):
            raise typer.Exit(code=1)
        console.print(f"[bold green]–ö–æ–º–∞–Ω–¥–∞ 'db downgrade {revision}' —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.[/]")

@db_app.command(name="revision", help="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ Alembic.")
def db_revision_cmd(
    message: str = typer.Option(..., "-m", "--message", help="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ–π —Ä–µ–≤–∏–∑–∏–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)."),
    autogenerate: bool = typer.Option(True, "--autogenerate/--no-autogenerate",
                                     help="–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–æ–¥–µ–ª—è—Ö (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è).")
):
    args = ["revision"]
    if autogenerate:
        args.append("--autogenerate")
    args.extend(["-m", message])

    console.print(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–µ–≤–∏–∑–∏–∏ Alembic —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º: '[cyan]{message}[/]' (autogenerate: {autogenerate})...")
    if not _run_alembic_command(args):
        raise typer.Exit(code=1)
    console.print(f"[bold green]–ö–æ–º–∞–Ω–¥–∞ 'db revision' —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ù–æ–≤—ã–π —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –≤ 'alembic_migrations/versions/'.[/]")

@db_app.command(name="status", help="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π –∏ –∏—Å—Ç–æ—Ä–∏—é.")
def db_status_cmd(
    verbose: bool = typer.Option(False, "--verbose", "-v", help="–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥.")
):
    console.print(Panel("[bold blue]–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π Alembic (–∫–æ–º–∞–Ω–¥–∞ 'current')[/]", expand=False, border_style="blue"))
    current_args = ["current"]
    if verbose:
        current_args.append("--verbose")

    success_current = _run_alembic_command(current_args, suppress_success_output=verbose)
    if not success_current:
        console.print("[yellow]–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å Alembic (Alembic current).[/yellow]")

    console.print(Panel("[bold blue]–ò—Å—Ç–æ—Ä–∏—è –º–∏–≥—Ä–∞—Ü–∏–π Alembic (–∫–æ–º–∞–Ω–¥–∞ 'history')[/]", expand=False, border_style="blue", style="blue"))
    history_args = ["history"]
    if not _run_alembic_command(history_args):
        console.print("[yellow]–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–∏–≥—Ä–∞—Ü–∏–π Alembic (Alembic history).[/yellow]")

@db_app.command(name="init-core", help="[–û–ü–ê–°–ù–û] –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã —è–¥—Ä–∞ –∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ä–æ–ª–∏ –Ω–∞–ø—Ä—è–º—É—é, –º–∏–Ω—É—è Alembic.")
def db_init_core_cmd():
    console.print(Panel("[bold yellow]–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü —è–¥—Ä–∞ SDB –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–æ–ª–µ–π –Ω–∞–ø—Ä—è–º—É—é[/]", expand=False, border_style="yellow"))
    console.print("[bold red]–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï:[/bold red] –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞—Å—Ç —Ç–∞–±–ª–∏—Ü—ã —è–¥—Ä–∞ –∏ —Ä–æ–ª–∏ –Ω–∞–ø—Ä—è–º—É—é, –∏–≥–Ω–æ—Ä–∏—Ä—É—è Alembic.")
    if typer.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã —è–¥—Ä–∞ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–æ–ª–∏ –Ω–∞–ø—Ä—è–º—É—é?", abort=True):
        try:
            from core.app_settings import settings
            from core.database.manager import DBManager
            from core.rbac.service import RBACService

            async def _init_core_data_task_runner():
                nonlocal settings
                console.print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ë–î: {settings.db.type} (URL —Å—Ç—Ä–æ–∏—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫).")
                db_m = DBManager(db_settings=settings.db, app_settings=settings)
                try:
                    await db_m.initialize()

                    console.print("–í—ã–∑–æ–≤ DBManager.create_all_core_tables() –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü —è–¥—Ä–∞...")
                    await db_m.create_all_core_tables()
                    console.print("[bold green]–¢–∞–±–ª–∏—Ü—ã —è–¥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã (–∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∏).[/]")

                    console.print("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–æ–ª–µ–π...")
                    rbac_s = RBACService(db_manager=db_m) # –ü–µ—Ä–µ–¥–∞–µ–º DBManager
                    async with db_m.get_session() as session:
                        roles_created_count = await rbac_s.ensure_default_roles_exist(session)
                        if roles_created_count > 0:
                            console.print(f"[bold green]–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –∑–∞–∫–æ–º–º–∏—á–µ–Ω–æ {roles_created_count} —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–æ–ª–µ–π.[/bold green]")
                        else:
                            console.print("[dim]–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–æ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∏ –∏–ª–∏ –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ RBACService).[/dim]")
                except Exception as e_task:
                    console.print(f"[bold red]–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e_task}[/]")
                    raise
                finally:
                    await db_m.dispose()

            asyncio.run(_init_core_data_task_runner())
            console.print("\n[bold green]–ö–æ–º–∞–Ω–¥–∞ 'db init-core' —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.[/]")
            console.print("[yellow]–í–ê–ñ–ù–û: –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ Alembic —Ä–∞–Ω–µ–µ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º.[/]")
            console.print("  [yellow]–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å 'sdb db stamp head', —á—Ç–æ–±—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å Alembic —Å —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º–æ–π –ë–î.[/]")
            console.print("  [yellow]–î–µ–ª–∞–π—Ç–µ —ç—Ç–æ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ç–µ–∫—É—â–∞—è —Å—Ö–µ–º–∞ –ë–î —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª–µ–≤–æ–π '–≥–æ–ª–æ–≤–æ–π'.[/]")

        except ImportError as e_imp:
             console.print(f"[bold red]–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —è–¥—Ä–∞ –¥–ª—è 'db init-core': {e_imp}[/]")
             raise typer.Exit(code=1)
        except Exception as e:
            console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ 'db init-core': {e}[/]")
            raise typer.Exit(code=1)

@db_app.command(name="stamp", help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ä–µ–≤–∏–∑–∏—é Alembic –≤ –ë–î, –Ω–µ –ø—Ä–∏–º–µ–Ω—è—è –º–∏–≥—Ä–∞—Ü–∏–∏.")
def db_stamp_cmd(
    revision: str = typer.Argument(..., help="ID —Ä–µ–≤–∏–∑–∏–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'head', 'base', specific_id)."),
    purge: bool = typer.Option(False, "--purge", help="–û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤–µ—Ä—Å–∏–π Alembic –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤–æ–π —Ä–µ–≤–∏–∑–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é!).")
):
    console.print(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–≤–∏–∑–∏–∏ Alembic: [cyan]{revision}[/]" + ("[bold yellow] —Å –æ—á–∏—Å—Ç–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤–µ—Ä—Å–∏–π[/]" if purge else ""))
    if purge:
        if not typer.confirm(f"[bold red]–í–ù–ò–ú–ê–ù–ò–ï: –û–ø—Ü–∏—è --purge –£–î–ê–õ–ò–¢ –í–°–ï –ó–ê–ü–ò–°–ò –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≤–µ—Ä—Å–∏–π Alembic –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Ä–µ–≤–∏–∑–∏–∏ '{revision}'. –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π –≤ –ë–î. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", abort=True):
            return
    
    args = ["stamp"]
    if purge:
        args.append("--purge")
    args.append(revision)
    
    if not _run_alembic_command(args):
        raise typer.Exit(code=1)
    console.print(f"[bold green]–ö–æ–º–∞–Ω–¥–∞ 'db stamp {revision}{' --purge' if purge else ''}' —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.[/]")