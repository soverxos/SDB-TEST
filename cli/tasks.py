# cli/tasks.py
import asyncio
import typer
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from typing import Optional, List, Dict, Any
from datetime import datetime, timedelta
import json
import uuid
from pathlib import Path
import subprocess
import psutil

console = Console()
tasks_app = typer.Typer(name="tasks", help="üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∑–∞–¥–∞—á
TASKS_DIR = Path("project_data/tasks")
TASKS_CONFIG_FILE = TASKS_DIR / "tasks_config.json"
TASKS_LOG_FILE = TASKS_DIR / "tasks.log"

def _ensure_tasks_directory():
    """–°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–¥–∞—á –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    TASKS_DIR.mkdir(parents=True, exist_ok=True)
    if not TASKS_CONFIG_FILE.exists():
        with open(TASKS_CONFIG_FILE, 'w') as f:
            json.dump({"tasks": {}, "schedules": {}}, f)

def _load_tasks_config() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∑–∞–¥–∞—á"""
    _ensure_tasks_directory()
    try:
        with open(TASKS_CONFIG_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {"tasks": {}, "schedules": {}}

def _save_tasks_config(config: Dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∑–∞–¥–∞—á"""
    _ensure_tasks_directory()
    with open(TASKS_CONFIG_FILE, 'w') as f:
        json.dump(config, f, indent=2)

def _log_task_event(task_id: str, event: str, details: str = ""):
    """–ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ª–æ–≥"""
    _ensure_tasks_directory()
    timestamp = datetime.now().isoformat()
    log_entry = f"[{timestamp}] {task_id}: {event}"
    if details:
        log_entry += f" - {details}"
    
    with open(TASKS_LOG_FILE, 'a') as f:
        f.write(log_entry + "\n")

@tasks_app.command(name="list", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.")
def tasks_list_cmd(
    status: Optional[str] = typer.Option(None, "--status", "-s", help="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É: running, completed, failed, pending"),
    limit: int = typer.Option(20, "--limit", "-l", help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á", min=1, max=100)
):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
    try:
        asyncio.run(_tasks_list_async(status, limit))
    except typer.Exit: raise
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ 'tasks list': {e}[/]")
        raise typer.Exit(code=1)

async def _tasks_list_async(status: Optional[str], limit: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
    console.print(Panel("[bold blue]–°–ü–ò–°–û–ö –ó–ê–î–ê–ß –°–ò–°–¢–ï–ú–´[/]", expand=False, border_style="blue"))
    
    config = _load_tasks_config()
    tasks = config.get("tasks", {})
    
    if not tasks:
        console.print("[yellow]–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/]")
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
    filtered_tasks = []
    for task_id, task_info in tasks.items():
        if status is None or task_info.get("status") == status:
            filtered_tasks.append((task_id, task_info))
    
    if not filtered_tasks:
        console.print(f"[yellow]–ó–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/]")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    filtered_tasks.sort(key=lambda x: x[1].get("created_at", ""), reverse=True)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    filtered_tasks = filtered_tasks[:limit]
    
    table = Table(title=f"–ó–∞–¥–∞—á–∏ —Å–∏—Å—Ç–µ–º—ã (–ø–æ–∫–∞–∑–∞–Ω–æ: {len(filtered_tasks)})")
    table.add_column("ID", style="cyan")
    table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="white")
    table.add_column("–¢–∏–ø", style="blue")
    table.add_column("–°—Ç–∞—Ç—É—Å", style="green")
    table.add_column("–°–æ–∑–¥–∞–Ω–∞", style="yellow")
    table.add_column("–ü—Ä–æ–≥—Ä–µ—Å—Å", style="red")
    
    for task_id, task_info in filtered_tasks:
        created_at = task_info.get("created_at", "")
        if created_at:
            try:
                dt = datetime.fromisoformat(created_at)
                created_str = dt.strftime("%Y-%m-%d %H:%M")
            except:
                created_str = created_at
        else:
            created_str = "N/A"
        
        status = task_info.get("status", "unknown")
        status_color = {
            "running": "green",
            "completed": "blue",
            "failed": "red",
            "pending": "yellow",
            "cancelled": "red"
        }.get(status, "white")
        
        progress = task_info.get("progress", "0%")
        
        table.add_row(
            task_id,
            task_info.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
            task_info.get("type", "unknown"),
            f"[{status_color}]{status}[/{status_color}]",
            created_str,
            progress
        )
    
    console.print(table)

@tasks_app.command(name="cancel", help="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É.")
def tasks_cancel_cmd(
    task_id: str = typer.Argument(..., help="ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã"),
    force: bool = typer.Option(False, "--force", "-f", help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞")
):
    """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"""
    try:
        asyncio.run(_tasks_cancel_async(task_id, force))
    except typer.Exit: raise
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ 'tasks cancel': {e}[/]")
        raise typer.Exit(code=1)

async def _tasks_cancel_async(task_id: str, force: bool):
    """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"""
    console.print(Panel(f"[bold blue]–û–¢–ú–ï–ù–ê –ó–ê–î–ê–ß–ò: {task_id}[/]", expand=False, border_style="blue"))
    
    config = _load_tasks_config()
    tasks = config.get("tasks", {})
    
    if task_id not in tasks:
        console.print(f"[bold red]–ó–∞–¥–∞—á–∞ '{task_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞[/]")
        raise typer.Exit(code=1)
    
    task_info = tasks[task_id]
    status = task_info.get("status", "unknown")
    
    if status == "completed":
        console.print(f"[yellow]–ó–∞–¥–∞—á–∞ '{task_id}' —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞[/]")
        return
    
    if status == "cancelled":
        console.print(f"[yellow]–ó–∞–¥–∞—á–∞ '{task_id}' —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞[/]")
        return
    
    if status == "failed":
        console.print(f"[yellow]–ó–∞–¥–∞—á–∞ '{task_id}' —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π[/]")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–¥–∞—á–∏
    pid = task_info.get("pid")
    if pid and status == "running":
        try:
            process = psutil.Process(pid)
            if not force:
                console.print(f"[yellow]–ó–∞–¥–∞—á–∞ '{task_id}' –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è (PID: {pid})[/]")
                console.print("[dim]–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–º–µ–Ω—ã[/]")
                return
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            process.terminate()
            try:
                process.wait(timeout=5)
            except psutil.TimeoutExpired:
                process.kill()
            
            console.print(f"[green]–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–¥–∞—á–∏ '{task_id}' (PID: {pid}) –∑–∞–≤–µ—Ä—à–µ–Ω[/]")
        except psutil.NoSuchProcess:
            console.print(f"[yellow]–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–¥–∞—á–∏ '{task_id}' (PID: {pid}) –Ω–µ –Ω–∞–π–¥–µ–Ω[/]")
        except Exception as e:
            console.print(f"[yellow]–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}[/]")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    task_info["status"] = "cancelled"
    task_info["cancelled_at"] = datetime.now().isoformat()
    task_info["progress"] = "0%"
    
    _save_tasks_config(config)
    _log_task_event(task_id, "cancelled", f"force={force}")
    
    console.print(f"[green]–ó–∞–¥–∞—á–∞ '{task_id}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞[/]")

@tasks_app.command(name="schedule", help="–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É.")
def tasks_schedule_cmd(
    task_type: str = typer.Argument(..., help="–¢–∏–ø –∑–∞–¥–∞—á–∏: backup, cleanup, sync, custom"),
    schedule: str = typer.Option(..., "--schedule", "-s", help="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ (cron —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ 'now')"),
    name: Optional[str] = typer.Option(None, "--name", "-n", help="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"),
    params: Optional[str] = typer.Option(None, "--params", "-p", help="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞—á–∏ –≤ JSON")
):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É"""
    try:
        asyncio.run(_tasks_schedule_async(task_type, schedule, name, params))
    except typer.Exit: raise
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ 'tasks schedule': {e}[/]")
        raise typer.Exit(code=1)

async def _tasks_schedule_async(task_type: str, schedule: str, name: Optional[str], params: Optional[str]):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É"""
    console.print(Panel(f"[bold blue]–ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –ó–ê–î–ê–ß–ò: {task_type}[/]", expand=False, border_style="blue"))
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
    valid_types = ["backup", "cleanup", "sync", "custom"]
    if task_type not in valid_types:
        console.print(f"[bold red]–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: {task_type}[/]")
        console.print(f"[dim]–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: {', '.join(valid_types)}[/]")
        raise typer.Exit(code=1)
    
    # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    task_params = {}
    if params:
        try:
            task_params = json.loads(params)
        except json.JSONDecodeError as e:
            console.print(f"[bold red]–û—à–∏–±–∫–∞ –≤ JSON –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö: {e}[/]")
            raise typer.Exit(code=1)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∑–∞–¥–∞—á–∏
    task_id = f"task_{uuid.uuid4().hex[:8]}"
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
    task_info = {
        "id": task_id,
        "name": name or f"{task_type} task",
        "type": task_type,
        "schedule": schedule,
        "params": task_params,
        "status": "pending",
        "progress": "0%",
        "created_at": datetime.now().isoformat(),
        "scheduled_at": datetime.now().isoformat() if schedule == "now" else None
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = _load_tasks_config()
    config["tasks"][task_id] = task_info
    
    # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è —Å–µ–π—á–∞—Å
    if schedule == "now":
        task_info["status"] = "running"
        task_info["started_at"] = datetime.now().isoformat()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        asyncio.create_task(_execute_task(task_id, task_info))
    
    _save_tasks_config(config)
    _log_task_event(task_id, "scheduled", f"type={task_type}, schedule={schedule}")
    
    console.print(f"[green]–ó–∞–¥–∞—á–∞ '{task_id}' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞[/]")
    console.print(f"[dim]–¢–∏–ø: {task_type}[/]")
    console.print(f"[dim]–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {schedule}[/]")
    if name:
        console.print(f"[dim]–ù–∞–∑–≤–∞–Ω–∏–µ: {name}[/]")

async def _execute_task(task_id: str, task_info: Dict[str, Any]):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"""
    task_type = task_info["type"]
    
    try:
        _log_task_event(task_id, "started")
        
        if task_type == "backup":
            await _execute_backup_task(task_id, task_info)
        elif task_type == "cleanup":
            await _execute_cleanup_task(task_id, task_info)
        elif task_type == "sync":
            await _execute_sync_task(task_id, task_info)
        elif task_type == "custom":
            await _execute_custom_task(task_id, task_info)
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: {task_type}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        config = _load_tasks_config()
        if task_id in config["tasks"]:
            config["tasks"][task_id]["status"] = "completed"
            config["tasks"][task_id]["progress"] = "100%"
            config["tasks"][task_id]["completed_at"] = datetime.now().isoformat()
            _save_tasks_config(config)
            _log_task_event(task_id, "completed")
        
    except Exception as e:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—à–∏–±–∫—É
        config = _load_tasks_config()
        if task_id in config["tasks"]:
            config["tasks"][task_id]["status"] = "failed"
            config["tasks"][task_id]["error"] = str(e)
            config["tasks"][task_id]["failed_at"] = datetime.now().isoformat()
            _save_tasks_config(config)
            _log_task_event(task_id, "failed", str(e))

async def _execute_backup_task(task_id: str, task_info: Dict[str, Any]):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    console.print(f"[cyan]–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {task_id}[/]")
    
    # –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    await asyncio.sleep(2)
    
    # –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    console.print(f"[green]–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {task_id}[/]")

async def _execute_cleanup_task(task_id: str, task_info: Dict[str, Any]):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏"""
    console.print(f"[cyan]–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏: {task_id}[/]")
    
    # –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    await asyncio.sleep(1)
    
    # –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏
    console.print(f"[green]–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {task_id}[/]")

async def _execute_sync_task(task_id: str, task_info: Dict[str, Any]):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    console.print(f"[cyan]–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {task_id}[/]")
    
    # –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    await asyncio.sleep(3)
    
    # –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    console.print(f"[green]–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {task_id}[/]")

async def _execute_custom_task(task_id: str, task_info: Dict[str, Any]):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∑–∞–¥–∞—á—É"""
    console.print(f"[cyan]–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏: {task_id}[/]")
    
    params = task_info.get("params", {})
    command = params.get("command")
    
    if command:
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
            process = await asyncio.create_subprocess_exec(
                *command.split(),
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            
            if process.returncode == 0:
                console.print(f"[green]–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {command}[/]")
            else:
                raise Exception(f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {stderr.decode()}")
                
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
    else:
        # –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        await asyncio.sleep(1)
        console.print(f"[green]–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {task_id}[/]")

@tasks_app.command(name="info", help="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ.")
def tasks_info_cmd(
    task_id: str = typer.Argument(..., help="ID –∑–∞–¥–∞—á–∏")
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ"""
    try:
        asyncio.run(_tasks_info_async(task_id))
    except typer.Exit: raise
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ 'tasks info': {e}[/]")
        raise typer.Exit(code=1)

async def _tasks_info_async(task_id: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ"""
    console.print(Panel(f"[bold blue]–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ó–ê–î–ê–ß–ï: {task_id}[/]", expand=False, border_style="blue"))
    
    config = _load_tasks_config()
    tasks = config.get("tasks", {})
    
    if task_id not in tasks:
        console.print(f"[bold red]–ó–∞–¥–∞—á–∞ '{task_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞[/]")
        raise typer.Exit(code=1)
    
    task_info = tasks[task_id]
    
    console.print(f"[cyan]ID:[/] {task_id}")
    console.print(f"[cyan]–ù–∞–∑–≤–∞–Ω–∏–µ:[/] {task_info.get('name', 'N/A')}")
    console.print(f"[cyan]–¢–∏–ø:[/] {task_info.get('type', 'N/A')}")
    console.print(f"[cyan]–°—Ç–∞—Ç—É—Å:[/] {task_info.get('status', 'N/A')}")
    console.print(f"[cyan]–ü—Ä–æ–≥—Ä–µ—Å—Å:[/] {task_info.get('progress', 'N/A')}")
    console.print(f"[cyan]–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:[/] {task_info.get('schedule', 'N/A')}")
    console.print(f"[cyan]–°–æ–∑–¥–∞–Ω–∞:[/] {task_info.get('created_at', 'N/A')}")
    
    if task_info.get("started_at"):
        console.print(f"[cyan]–ù–∞—á–∞—Ç–∞:[/] {task_info['started_at']}")
    
    if task_info.get("completed_at"):
        console.print(f"[cyan]–ó–∞–≤–µ—Ä—à–µ–Ω–∞:[/] {task_info['completed_at']}")
    
    if task_info.get("failed_at"):
        console.print(f"[cyan]–û—à–∏–±–∫–∞:[/] {task_info['failed_at']}")
        console.print(f"[cyan]–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:[/] {task_info.get('error', 'N/A')}")
    
    if task_info.get("cancelled_at"):
        console.print(f"[cyan]–û—Ç–º–µ–Ω–µ–Ω–∞:[/] {task_info['cancelled_at']}")
    
    if task_info.get("params"):
        console.print(f"[cyan]–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:[/] {json.dumps(task_info['params'], indent=2)}")

if __name__ == "__main__":
    tasks_app() 