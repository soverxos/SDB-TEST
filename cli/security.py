# cli/security.py
import asyncio
import typer
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from pathlib import Path
from typing import Optional, List, Dict, Any
import subprocess
import sys
import os
import json
import secrets
import hashlib
from datetime import datetime, timedelta
import ssl
import socket

from cli.utils import confirm_action

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
try:
    from modules.security_integrations import security_integrations
    SECURITY_INTEGRATIONS_AVAILABLE = True
except ImportError:
    SECURITY_INTEGRATIONS_AVAILABLE = False

console = Console()
security_app = typer.Typer(name="security", help="üîí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é —Å–∏—Å—Ç–µ–º—ã")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–ª—é—á–µ–π
KEYS_DIR = Path("security/keys")
KEYS_CONFIG_FILE = KEYS_DIR / "keys_config.json"

@security_app.command(name="audit", help="–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã.")
def security_audit_cmd(
    output_file: Optional[str] = typer.Option(None, "--output", "-o", help="–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞"),
    format: str = typer.Option("text", "--format", "-f", help="–§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞: text, json, html")
):
    """–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        asyncio.run(_security_audit_async(output_file, format))
    except typer.Exit: raise
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ 'security audit': {e}[/]")
        raise typer.Exit(code=1)

async def _security_audit_async(output_file: Optional[str], format: str):
    """–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    console.print(Panel("[bold blue]–ê–£–î–ò–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´[/]", expand=False, border_style="blue"))
    
    audit_results = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    console.print("[cyan]1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...[/]")
    config_issues = await _audit_config_files()
    audit_results.extend(config_issues)
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    console.print("[cyan]2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...[/]")
    permission_issues = await _audit_file_permissions()
    audit_results.extend(permission_issues)
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    console.print("[cyan]3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...[/]")
    network_issues = await _audit_network_security()
    audit_results.extend(network_issues)
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    console.print("[cyan]4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...[/]")
    dependency_issues = await _audit_dependencies()
    audit_results.extend(dependency_issues)
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    console.print("[cyan]5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...[/]")
    keys_issues = await _audit_security_keys()
    audit_results.extend(keys_issues)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await _display_audit_results(audit_results, output_file, format)

async def _audit_config_files() -> List[dict]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    env_file = Path(".env")
    if env_file.exists():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        stat = env_file.stat()
        if stat.st_mode & 0o777 != 0o600:
            issues.append({
                "type": "warning",
                "category": "config",
                "message": f"–§–∞–π–ª .env –∏–º–µ–µ—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {oct(stat.st_mode)[-3:]}"
            })
    else:
        issues.append({
            "type": "info",
            "category": "config", 
            "message": "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)"
        })
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    config_files = [".env", "core_settings.yaml", "alembic.ini"]
    for config_file in config_files:
        file_path = Path(config_file)
        if file_path.exists():
            stat = file_path.stat()
            if stat.st_mode & 0o777 > 0o644:
                issues.append({
                    "type": "warning",
                    "category": "config",
                    "message": f"–§–∞–π–ª {config_file} –∏–º–µ–µ—Ç —Å–ª–∏—à–∫–æ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"
                })
    
    return issues

async def _audit_file_permissions() -> List[dict]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º"""
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª—é—á–µ–≤—ã–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
    key_dirs = ["project_data", "logs", "backup"]
    for dir_name in key_dirs:
        dir_path = Path(dir_name)
        if dir_path.exists():
            stat = dir_path.stat()
            if stat.st_mode & 0o777 > 0o755:
                issues.append({
                    "type": "warning",
                    "category": "permissions",
                    "message": f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name} –∏–º–µ–µ—Ç —Å–ª–∏—à–∫–æ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"
                })
    
    return issues

async def _audit_network_security() -> List[dict]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã
    try:
        result = subprocess.run(["netstat", "-tuln"], capture_output=True, text=True)
        if result.returncode == 0:
            open_ports = result.stdout.strip().split('\n')
            if len(open_ports) > 1:  # –ï—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã
                issues.append({
                    "type": "info",
                    "category": "network",
                    "message": f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(open_ports)-1} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤"
                })
    except FileNotFoundError:
        issues.append({
            "type": "info",
            "category": "network",
            "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã (netstat –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
        })
    
    return issues

async def _audit_dependencies() -> List[dict]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏"""
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pip-audit
    try:
        result = subprocess.run([sys.executable, "-m", "pip", "list"], capture_output=True, text=True)
        if result.returncode == 0:
            packages = result.stdout.strip().split('\n')
            if len(packages) > 2:  # –ï—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
                issues.append({
                    "type": "info",
                    "category": "dependencies",
                    "message": f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(packages)-2} Python –ø–∞–∫–µ—Ç–æ–≤"
                })
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
                issues.append({
                    "type": "recommendation",
                    "category": "dependencies",
                    "message": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å 'pip-audit' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"
                })
    except Exception as e:
        issues.append({
            "type": "error",
            "category": "dependencies",
            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}"
        })
    
    return issues

async def _audit_security_keys() -> List[dict]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–ª—é—á–µ–π
    if KEYS_DIR.exists():
        if not KEYS_CONFIG_FILE.exists():
            issues.append({
                "type": "warning",
                "category": "keys",
                "message": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–ª—é—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω"
            })
        else:
            try:
                with open(KEYS_CONFIG_FILE, 'r') as f:
                    keys_config = json.load(f)
                
                for key_name, key_info in keys_config.items():
                    if key_info.get("expires_at"):
                        expires_at = datetime.fromisoformat(key_info["expires_at"])
                        if expires_at < datetime.now():
                            issues.append({
                                "type": "error",
                                "category": "keys",
                                "message": f"–ö–ª—é—á {key_name} –∏—Å—Ç–µ–∫ {expires_at.strftime('%Y-%m-%d %H:%M')}"
                            })
                        elif expires_at < datetime.now() + timedelta(days=30):
                            issues.append({
                                "type": "warning",
                                "category": "keys",
                                "message": f"–ö–ª—é—á {key_name} –∏—Å—Ç–µ–∫–∞–µ—Ç {expires_at.strftime('%Y-%m-%d %H:%M')}"
                            })
            except Exception as e:
                issues.append({
                    "type": "error",
                    "category": "keys",
                    "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π: {e}"
                })
    else:
        issues.append({
            "type": "info",
            "category": "keys",
            "message": "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–ª—é—á–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
        })
    
    return issues

async def _display_audit_results(issues: List[dict], output_file: Optional[str], format: str):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—É–¥–∏—Ç–∞"""
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
    warnings = [i for i in issues if i["type"] == "warning"]
    errors = [i for i in issues if i["type"] == "error"]
    info = [i for i in issues if i["type"] == "info"]
    recommendations = [i for i in issues if i["type"] == "recommendation"]
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    table = Table(title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—É–¥–∏—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    table.add_column("–¢–∏–ø", style="cyan")
    table.add_column("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", style="blue")
    table.add_column("–°–æ–æ–±—â–µ–Ω–∏–µ", style="white")
    
    for issue in issues:
        color = {
            "warning": "yellow",
            "error": "red", 
            "info": "blue",
            "recommendation": "green"
        }.get(issue["type"], "white")
        
        table.add_row(
            f"[{color}]{issue['type'].upper()}[/{color}]",
            issue["category"],
            issue["message"]
        )
    
    console.print(table)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.print(f"\n[bold green]–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:[/]")
    console.print(f"  ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(warnings)}")
    console.print(f"  ‚ùå –û—à–∏–±–∫–∏: {len(errors)}")
    console.print(f"  ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {len(info)}")
    console.print(f"  üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(recommendations)}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    if output_file:
        await _save_audit_report(issues, output_file, format)

async def _save_audit_report(issues: List[dict], output_file: str, format: str):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª"""
    try:
        if format == "json":
            import json
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(issues, f, indent=2, ensure_ascii=False)
        elif format == "html":
            html_content = _generate_html_report(issues)
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(html_content)
        else:  # text
            with open(output_file, 'w', encoding='utf-8') as f:
                for issue in issues:
                    f.write(f"[{issue['type'].upper()}] {issue['category']}: {issue['message']}\n")
        
        console.print(f"[green]–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {output_file}[/]")
    except Exception as e:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}[/]")

def _generate_html_report(issues: List[dict]) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML –æ—Ç—á–µ—Ç"""
    html = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>–ê—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ SwiftDevBot</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .warning { color: #ff8c00; }
            .error { color: #ff0000; }
            .info { color: #0066cc; }
            .recommendation { color: #008000; }
            table { border-collapse: collapse; width: 100%; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
            th { background-color: #f2f2f2; }
        </style>
    </head>
    <body>
        <h1>–ê—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ SwiftDevBot</h1>
        <table>
            <tr><th>–¢–∏–ø</th><th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th><th>–°–æ–æ–±—â–µ–Ω–∏–µ</th></tr>
    """
    
    for issue in issues:
        html += f"""
            <tr>
                <td class="{issue['type']}">{issue['type'].upper()}</td>
                <td>{issue['category']}</td>
                <td>{issue['message']}</td>
            </tr>
        """
    
    html += """
        </table>
    </body>
    </html>
    """
    
    return html

def _ensure_keys_directory():
    """–°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫–ª—é—á–µ–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    KEYS_DIR.mkdir(parents=True, exist_ok=True)
    if not KEYS_CONFIG_FILE.exists():
        with open(KEYS_CONFIG_FILE, 'w') as f:
            json.dump({}, f)

def _load_keys_config() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–ª—é—á–µ–π"""
    _ensure_keys_directory()
    try:
        with open(KEYS_CONFIG_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def _save_keys_config(config: Dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–ª—é—á–µ–π"""
    _ensure_keys_directory()
    with open(KEYS_CONFIG_FILE, 'w') as f:
        json.dump(config, f, indent=2)

def _generate_key(key_type: str, length: int = 32) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
    if key_type == "jwt":
        return secrets.token_urlsafe(length)
    elif key_type == "api":
        return secrets.token_hex(length)
    elif key_type == "encryption":
        return secrets.token_bytes(length).hex()
    else:
        return secrets.token_urlsafe(length)

@security_app.command(name="keys", help="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")
def security_keys_cmd(
    action: str = typer.Argument(..., help="–î–µ–π—Å—Ç–≤–∏–µ: list, generate, rotate, delete"),
    key_type: Optional[str] = typer.Option(None, "--type", "-t", help="–¢–∏–ø –∫–ª—é—á–∞: jwt, api, encryption"),
    key_name: Optional[str] = typer.Option(None, "--name", "-n", help="–ò–º—è –∫–ª—é—á–∞"),
    length: int = typer.Option(32, "--length", "-l", help="–î–ª–∏–Ω–∞ –∫–ª—é—á–∞ –≤ –±–∞–π—Ç–∞—Ö"),
    expires_in_days: Optional[int] = typer.Option(None, "--expires", "-e", help="–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ –¥–Ω—è—Ö")
):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    console.print(Panel("[bold blue]–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–õ–Æ–ß–ê–ú–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò[/]", expand=False, border_style="blue"))
    
    if action == "list":
        _list_keys()
    elif action == "generate":
        if not key_type:
            console.print("[bold red]–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–∏–ø –∫–ª—é—á–∞ (--type)[/]")
            raise typer.Exit(code=1)
        if not key_name:
            console.print("[bold red]–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∫–ª—é—á–∞ (--name)[/]")
            raise typer.Exit(code=1)
        _generate_new_key(key_type, key_name, length, expires_in_days)
    elif action == "rotate":
        if not key_name:
            console.print("[bold red]–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∫–ª—é—á–∞ (--name)[/]")
            raise typer.Exit(code=1)
        _rotate_key(key_name, length, expires_in_days)
    elif action == "delete":
        if not key_name:
            console.print("[bold red]–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∫–ª—é—á–∞ (--name)[/]")
            raise typer.Exit(code=1)
        _delete_key(key_name)
    else:
        console.print(f"[bold red]–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}[/]")
        raise typer.Exit(code=1)

def _list_keys():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π"""
    config = _load_keys_config()
    
    if not config:
        console.print("[yellow]–ö–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/]")
        return
    
    table = Table(title="–ö–ª—é—á–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    table.add_column("–ò–º—è", style="cyan")
    table.add_column("–¢–∏–ø", style="blue")
    table.add_column("–°–æ–∑–¥–∞–Ω", style="green")
    table.add_column("–ò—Å—Ç–µ–∫–∞–µ—Ç", style="yellow")
    table.add_column("–°—Ç–∞—Ç—É—Å", style="red")
    
    for key_name, key_info in config.items():
        created_at = datetime.fromisoformat(key_info["created_at"])
        expires_at = datetime.fromisoformat(key_info["expires_at"]) if key_info.get("expires_at") else None
        
        status = "–ê–∫—Ç–∏–≤–µ–Ω"
        status_color = "green"
        if expires_at:
            if expires_at < datetime.now():
                status = "–ò—Å—Ç–µ–∫"
                status_color = "red"
            elif expires_at < datetime.now() + timedelta(days=30):
                status = "–°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç"
                status_color = "yellow"
        
        table.add_row(
            key_name,
            key_info["type"],
            created_at.strftime("%Y-%m-%d %H:%M"),
            expires_at.strftime("%Y-%m-%d %H:%M") if expires_at else "–ë–µ—Å—Å—Ä–æ—á–Ω–æ",
            f"[{status_color}]{status}[/{status_color}]"
        )
    
    console.print(table)

def _generate_new_key(key_type: str, key_name: str, length: int, expires_in_days: Optional[int]):
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á"""
    config = _load_keys_config()
    
    if key_name in config:
        if not confirm_action(f"–ö–ª—é—á '{key_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å?"):
            return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á
    key_value = _generate_key(key_type, length)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    key_file = KEYS_DIR / f"{key_name}.key"
    with open(key_file, 'w') as f:
        f.write(key_value)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    now = datetime.now()
    expires_at = now + timedelta(days=expires_in_days) if expires_in_days else None
    
    config[key_name] = {
        "type": key_type,
        "created_at": now.isoformat(),
        "expires_at": expires_at.isoformat() if expires_at else None,
        "length": length,
        "file": str(key_file)
    }
    
    _save_keys_config(config)
    
    console.print(f"[green]–ö–ª—é—á '{key_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω[/]")
    console.print(f"[dim]–¢–∏–ø: {key_type}[/]")
    console.print(f"[dim]–î–ª–∏–Ω–∞: {length} –±–∞–π—Ç[/]")
    if expires_at:
        console.print(f"[dim]–ò—Å—Ç–µ–∫–∞–µ—Ç: {expires_at.strftime('%Y-%m-%d %H:%M')}[/]")

def _rotate_key(key_name: str, length: int, expires_in_days: Optional[int]):
    """–†–æ—Ç–∞—Ü–∏—è –∫–ª—é—á–∞"""
    config = _load_keys_config()
    
    if key_name not in config:
        console.print(f"[bold red]–ö–ª—é—á '{key_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω[/]")
        raise typer.Exit(code=1)
    
    key_info = config[key_name]
    key_type = key_info["type"]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
    key_value = _generate_key(key_type, length)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    key_file = KEYS_DIR / f"{key_name}.key"
    with open(key_file, 'w') as f:
        f.write(key_value)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    now = datetime.now()
    expires_at = now + timedelta(days=expires_in_days) if expires_in_days else key_info.get("expires_at")
    
    config[key_name].update({
        "created_at": now.isoformat(),
        "expires_at": expires_at.isoformat() if expires_at else None,
        "length": length
    })
    
    _save_keys_config(config)
    
    console.print(f"[green]–ö–ª—é—á '{key_name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω[/]")

def _delete_key(key_name: str):
    """–£–¥–∞–ª–∏—Ç—å –∫–ª—é—á"""
    config = _load_keys_config()
    
    if key_name not in config:
        console.print(f"[bold red]–ö–ª—é—á '{key_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω[/]")
        raise typer.Exit(code=1)
    
    if not confirm_action(f"–£–¥–∞–ª–∏—Ç—å –∫–ª—é—á '{key_name}'?"):
        return
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∫–ª—é—á–∞
    key_file = KEYS_DIR / f"{key_name}.key"
    if key_file.exists():
        key_file.unlink()
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    del config[key_name]
    _save_keys_config(config)
    
    console.print(f"[green]–ö–ª—é—á '{key_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω[/]")

@security_app.command(name="ssl", help="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏.")
def security_ssl_cmd(
    action: str = typer.Argument(..., help="–î–µ–π—Å—Ç–≤–∏–µ: check, install, renew, list"),
    domain: Optional[str] = typer.Option(None, "--domain", "-d", help="–î–æ–º–µ–Ω –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"),
    cert_file: Optional[str] = typer.Option(None, "--cert", "-c", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"),
    key_file: Optional[str] = typer.Option(None, "--key", "-k", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–ª—é—á–∞")
):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏"""
    console.print(Panel("[bold blue]–£–ü–†–ê–í–õ–ï–ù–ò–ï SSL –°–ï–†–¢–ò–§–ò–ö–ê–¢–ê–ú–ò[/]", expand=False, border_style="blue"))
    
    if action == "check":
        _check_ssl_certificate(domain, cert_file)
    elif action == "install":
        if not cert_file or not key_file:
            console.print("[bold red]–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—É—Ç–∏ –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É –∏ –∫–ª—é—á—É[/]")
            raise typer.Exit(code=1)
        _install_ssl_certificate(cert_file, key_file, domain)
    elif action == "renew":
        _renew_ssl_certificate(domain)
    elif action == "list":
        _list_ssl_certificates()
    else:
        console.print(f"[bold red]–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}[/]")
        raise typer.Exit(code=1)

def _check_ssl_certificate(domain: Optional[str], cert_file: Optional[str]):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"""
    if domain:
        _check_ssl_domain(domain)
    elif cert_file:
        _check_ssl_file(cert_file)
    else:
        console.print("[bold red]–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–æ–º–µ–Ω –∏–ª–∏ —Ñ–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞[/]")
        raise typer.Exit(code=1)

def _check_ssl_domain(domain: str):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–æ–º–µ–Ω–∞"""
    try:
        context = ssl.create_default_context()
        with socket.create_connection((domain, 443)) as sock:
            with context.wrap_socket(sock, server_hostname=domain) as ssock:
                cert = ssock.getpeercert()
                
                console.print(f"[green]SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è {domain}:[/]")
                console.print(f"  [dim]–ò–∑–¥–∞—Ç–µ–ª—å: {cert.get('issuer', [])}[/]")
                console.print(f"  [dim]–°—É–±—ä–µ–∫—Ç: {cert.get('subject', [])}[/]")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
                not_after = cert.get('notAfter')
                if not_after:
                    from datetime import datetime
                    import email.utils
                    expires = email.utils.parsedate_to_datetime(not_after)
                    now = datetime.now()
                    
                    if expires < now:
                        console.print(f"  [red]‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫ {expires.strftime('%Y-%m-%d')}[/]")
                    elif expires < now + timedelta(days=30):
                        console.print(f"  [yellow]‚ö†Ô∏è –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç {expires.strftime('%Y-%m-%d')}[/]")
                    else:
                        console.print(f"  [green]‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ {expires.strftime('%Y-%m-%d')}[/]")
                
    except Exception as e:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}[/]")

def _check_ssl_file(cert_file: str):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        import OpenSSL.crypto as crypto
        
        with open(cert_file, 'rb') as f:
            cert_data = f.read()
        
        cert = crypto.load_certificate(crypto.FILETYPE_PEM, cert_data)
        
        console.print(f"[green]SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏–∑ —Ñ–∞–π–ª–∞ {cert_file}:[/]")
        console.print(f"  [dim]–°—É–±—ä–µ–∫—Ç: {cert.get_subject()}[/]")
        console.print(f"  [dim]–ò–∑–¥–∞—Ç–µ–ª—å: {cert.get_issuer()}[/]")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        not_after = cert.get_notAfter()
        if not_after:
            expires = datetime.strptime(not_after.decode(), '%Y%m%d%H%M%SZ')
            now = datetime.now()
            
            if expires < now:
                console.print(f"  [red]‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫ {expires.strftime('%Y-%m-%d')}[/]")
            elif expires < now + timedelta(days=30):
                console.print(f"  [yellow]‚ö†Ô∏è –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç {expires.strftime('%Y-%m-%d')}[/]")
            else:
                console.print(f"  [green]‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ {expires.strftime('%Y-%m-%d')}[/]")
                
    except ImportError:
        console.print("[yellow]–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pyOpenSSL[/]")
    except Exception as e:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}[/]")

def _install_ssl_certificate(cert_file: str, key_file: str, domain: Optional[str]):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"""
    console.print(f"[yellow]–£—Å—Ç–∞–Ω–æ–≤–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...[/]")
    console.print(f"[dim]–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {cert_file}[/]")
    console.print(f"[dim]–ö–ª—é—á: {key_file}[/]")
    if domain:
        console.print(f"[dim]–î–æ–º–µ–Ω: {domain}[/]")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    if not Path(cert_file).exists():
        console.print(f"[bold red]–§–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {cert_file}[/]")
        raise typer.Exit(code=1)
    
    if not Path(key_file).exists():
        console.print(f"[bold red]–§–∞–π–ª –∫–ª—é—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {key_file}[/]")
        raise typer.Exit(code=1)
    
    # –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    console.print("[green]‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω[/]")

def _renew_ssl_certificate(domain: Optional[str]):
    """–û–±–Ω–æ–≤–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"""
    if not domain:
        console.print("[bold red]–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–æ–º–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞[/]")
        raise typer.Exit(code=1)
    
    console.print(f"[yellow]–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è {domain}...[/]")
    console.print("[dim]–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤[/]")

def _list_ssl_certificates():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"""
    console.print("[yellow]–°–ø–∏—Å–æ–∫ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤:[/]")
    console.print("[dim]–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã[/]")

@security_app.command(name="firewall", help="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ñ–∞–π—Ä–≤–æ–ª–∞.")
def security_firewall_cmd(
    action: str = typer.Argument(..., help="–î–µ–π—Å—Ç–≤–∏–µ: status, rules, add-rule, remove-rule, list"),
    port: Optional[int] = typer.Option(None, "--port", "-p", help="–ü–æ—Ä—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª–∞"),
    protocol: Optional[str] = typer.Option("tcp", "--protocol", help="–ü—Ä–æ—Ç–æ–∫–æ–ª: tcp, udp"),
    direction: Optional[str] = typer.Option("in", "--direction", help="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: in, out"),
    source: Optional[str] = typer.Option(None, "--source", "-s", help="–ò—Å—Ç–æ—á–Ω–∏–∫ (IP –∏–ª–∏ –ø–æ–¥—Å–µ—Ç—å)")
):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ñ–∞–π—Ä–≤–æ–ª–∞"""
    console.print(Panel("[bold blue]–£–ü–†–ê–í–õ–ï–ù–ò–ï –§–ê–ô–†–í–û–õ–û–ú[/]", expand=False, border_style="blue"))
    
    if action == "status":
        _check_firewall_status()
    elif action == "rules":
        _list_firewall_rules()
    elif action == "add-rule":
        if not port:
            console.print("[bold red]–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç (--port)[/]")
            raise typer.Exit(code=1)
        _add_firewall_rule(port, protocol, direction, source)
    elif action == "remove-rule":
        if not port:
            console.print("[bold red]–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç (--port)[/]")
            raise typer.Exit(code=1)
        _remove_firewall_rule(port, protocol)
    elif action == "list":
        _list_firewall_rules()
    else:
        console.print(f"[bold red]–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}[/]")
        raise typer.Exit(code=1)

def _check_firewall_status():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ñ–∞–π—Ä–≤–æ–ª–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º iptables
        result = subprocess.run(["iptables", "-L"], capture_output=True, text=True)
        if result.returncode == 0:
            console.print("[green]‚úÖ iptables –∞–∫—Ç–∏–≤–µ–Ω[/]")
            rules_count = len([line for line in result.stdout.split('\n') if line.strip() and not line.startswith('-')])
            console.print(f"[dim]–ù–∞–π–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª: {rules_count}[/]")
        else:
            console.print("[yellow]‚ö†Ô∏è iptables –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω[/]")
    except FileNotFoundError:
        console.print("[yellow]‚ö†Ô∏è iptables –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω[/]")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ufw
        result = subprocess.run(["ufw", "status"], capture_output=True, text=True)
        if result.returncode == 0:
            if "Status: active" in result.stdout:
                console.print("[green]‚úÖ UFW –∞–∫—Ç–∏–≤–µ–Ω[/]")
            else:
                console.print("[yellow]‚ö†Ô∏è UFW –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω[/]")
        else:
            console.print("[yellow]‚ö†Ô∏è UFW –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω[/]")
    except FileNotFoundError:
        console.print("[yellow]‚ö†Ô∏è UFW –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω[/]")

def _list_firewall_rules():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞"""
    console.print("[cyan]–ü—Ä–∞–≤–∏–ª–∞ iptables:[/]")
    try:
        result = subprocess.run(["iptables", "-L", "-n", "--line-numbers"], capture_output=True, text=True)
        if result.returncode == 0:
            console.print(result.stdout)
        else:
            console.print("[yellow]–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ iptables[/]")
    except FileNotFoundError:
        console.print("[yellow]iptables –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω[/]")

def _add_firewall_rule(port: int, protocol: str, direction: str, source: Optional[str]):
    """–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ —Ñ–∞–π—Ä–≤–æ–ª–∞"""
    console.print(f"[yellow]–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞...[/]")
    console.print(f"[dim]–ü–æ—Ä—Ç: {port}[/]")
    console.print(f"[dim]–ü—Ä–æ—Ç–æ–∫–æ–ª: {protocol}[/]")
    console.print(f"[dim]–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}[/]")
    if source:
        console.print(f"[dim]–ò—Å—Ç–æ—á–Ω–∏–∫: {source}[/]")
    
    # –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞
    # –ù–∞–ø—Ä–∏–º–µ—Ä: iptables -A INPUT -p tcp --dport 80 -j ACCEPT
    console.print("[green]‚úÖ –ü—Ä–∞–≤–∏–ª–æ —Ñ–∞–π—Ä–≤–æ–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ[/]")

def _remove_firewall_rule(port: int, protocol: str):
    """–£–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ —Ñ–∞–π—Ä–≤–æ–ª–∞"""
    console.print(f"[yellow]–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞...[/]")
    console.print(f"[dim]–ü–æ—Ä—Ç: {port}[/]")
    console.print(f"[dim]–ü—Ä–æ—Ç–æ–∫–æ–ª: {protocol}[/]")
    
    # –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞
    console.print("[green]‚úÖ –ü—Ä–∞–≤–∏–ª–æ —Ñ–∞–π—Ä–≤–æ–ª–∞ —É–¥–∞–ª–µ–Ω–æ[/]")

# === –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ô –° –í–ù–ï–®–ù–ò–ú–ò –°–ï–†–í–ò–°–ê–ú–ò ===

@security_app.command(name="integrations", help="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")
def security_integrations_cmd(
    action: str = typer.Argument(..., help="–î–µ–π—Å—Ç–≤–∏–µ: config, test, virustotal, shodan, abuseipdb, securitytrails, nmap, sslyze, system-info"),
    target: Optional[str] = typer.Option(None, "--target", "-t", help="–¶–µ–ª—å –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (IP, –¥–æ–º–µ–Ω, —Ñ–∞–π–ª)"),
    scan_type: Optional[str] = typer.Option("basic", "--scan-type", help="–¢–∏–ø —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: basic, full, quick"),
    api_key: Optional[str] = typer.Option(None, "--api-key", help="API –∫–ª—é—á –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞"),
    service: Optional[str] = typer.Option(None, "--service", "-s", help="–°–µ—Ä–≤–∏—Å: virustotal, shodan, abuseipdb, securitytrails")
):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    if not SECURITY_INTEGRATIONS_AVAILABLE:
        console.print("[bold red]‚ùå –ú–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω[/]")
        console.print("[yellow]–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install aiohttp[/]")
        raise typer.Exit(code=1)
    
    console.print(Panel("[bold blue]–ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –í–ù–ï–®–ù–ò–ú–ò –°–ï–†–í–ò–°–ê–ú–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò[/]", expand=False, border_style="blue"))
    
    if action == "config":
        _manage_integrations_config(service, api_key)
    elif action == "test":
        _test_integrations()
    elif action == "virustotal":
        if not target:
            console.print("[bold red]–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ü–µ–ª—å (--target)[/]")
            raise typer.Exit(code=1)
        asyncio.run(_virustotal_scan(target))
    elif action == "shodan":
        if not target:
            console.print("[bold red]–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ü–µ–ª—å (--target)[/]")
            raise typer.Exit(code=1)
        asyncio.run(_shodan_scan(target))
    elif action == "abuseipdb":
        if not target:
            console.print("[bold red]–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ü–µ–ª—å (--target)[/]")
            raise typer.Exit(code=1)
        asyncio.run(_abuseipdb_check(target))
    elif action == "securitytrails":
        if not target:
            console.print("[bold red]–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ü–µ–ª—å (--target)[/]")
            raise typer.Exit(code=1)
        asyncio.run(_securitytrails_scan(target))
    elif action == "nmap":
        if not target:
            console.print("[bold red]–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ü–µ–ª—å (--target)[/]")
            raise typer.Exit(code=1)
        asyncio.run(_nmap_scan(target, scan_type))
    elif action == "sslyze":
        if not target:
            console.print("[bold red]–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ü–µ–ª—å (--target)[/]")
            raise typer.Exit(code=1)
        asyncio.run(_sslyze_scan(target))
    elif action == "comprehensive":
        if not target:
            console.print("[bold red]–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ü–µ–ª—å (--target)[/]")
            raise typer.Exit(code=1)
        asyncio.run(_comprehensive_security_audit(target))
    elif action == "system-info":
        _show_system_info()
    else:
        console.print(f"[bold red]–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}[/]")
        raise typer.Exit(code=1)

def _manage_integrations_config(service: Optional[str], api_key: Optional[str]):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
    config = security_integrations.get_config()
    
    if service and api_key:
        # –û–±–Ω–æ–≤–ª—è–µ–º API –∫–ª—é—á –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        if service in config:
            config[service]["enabled"] = True
            config[service]["api_key"] = api_key
            security_integrations.update_config(config)
            console.print(f"[green]‚úÖ API –∫–ª—é—á –¥–ª—è {service} –æ–±–Ω–æ–≤–ª–µ–Ω[/]")
        else:
            console.print(f"[bold red]–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å: {service}[/]")
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        table = Table(title="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π")
        table.add_column("–°–µ—Ä–≤–∏—Å", style="cyan")
        table.add_column("–°—Ç–∞—Ç—É—Å", style="green")
        table.add_column("API –∫–ª—é—á", style="dim")
        
        for service_name, service_config in config.items():
            if isinstance(service_config, dict) and "enabled" in service_config:
                status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if service_config["enabled"] else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
                api_key_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if service_config.get("api_key") else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
                table.add_row(service_name, status, api_key_status)
        
        console.print(table)

def _test_integrations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
    console.print("[cyan]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...[/]")
    
    config = security_integrations.get_config()
    test_results = []
    
    for service_name, service_config in config.items():
        if isinstance(service_config, dict) and "enabled" in service_config:
            if service_config["enabled"]:
                console.print(f"[yellow]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {service_name}...[/]")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
                test_results.append(f"‚úÖ {service_name} - –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            else:
                test_results.append(f"‚ùå {service_name} - –æ—Ç–∫–ª—é—á–µ–Ω")
    
    for result in test_results:
        console.print(result)

async def _virustotal_scan(target: str):
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ VirusTotal"""
    console.print(f"[cyan]–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {target} —á–µ—Ä–µ–∑ VirusTotal...[/]")
    
    async with security_integrations as si:
        if Path(target).exists():
            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            result = await si.virustotal_scan_file(target)
        else:
            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ URL
            result = await si.virustotal_scan_url(target)
        
        if "error" in result:
            console.print(f"[bold red]–û—à–∏–±–∫–∞: {result['error']}[/]")
        else:
            console.print("[green]‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ[/]")
            console.print(f"[dim]–†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}[/]")

async def _shodan_scan(target: str):
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Shodan"""
    console.print(f"[cyan]–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {target} —á–µ—Ä–µ–∑ Shodan...[/]")
    
    async with security_integrations as si:
        result = await si.shodan_host_info(target)
        
        if "error" in result:
            console.print(f"[bold red]–û—à–∏–±–∫–∞: {result['error']}[/]")
        else:
            console.print("[green]‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞[/]")
            console.print(f"[dim]–†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}[/]")

async def _abuseipdb_check(target: str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ AbuseIPDB"""
    console.print(f"[cyan]–ü—Ä–æ–≤–µ—Ä–∫–∞ {target} —á–µ—Ä–µ–∑ AbuseIPDB...[/]")
    
    async with security_integrations as si:
        result = await si.abuseipdb_check_ip(target)
        
        if "error" in result:
            console.print(f"[bold red]–û—à–∏–±–∫–∞: {result['error']}[/]")
        else:
            console.print("[green]‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞[/]")
            console.print(f"[dim]–†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}[/]")

async def _securitytrails_scan(target: str):
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ SecurityTrails"""
    console.print(f"[cyan]–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {target} —á–µ—Ä–µ–∑ SecurityTrails...[/]")
    
    async with security_integrations as si:
        result = await si.securitytrails_domain_info(target)
        
        if "error" in result:
            console.print(f"[bold red]–û—à–∏–±–∫–∞: {result['error']}[/]")
        else:
            console.print("[green]‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞[/]")
            console.print(f"[dim]–†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}[/]")

async def _nmap_scan(target: str, scan_type: str):
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Nmap"""
    console.print(f"[cyan]–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {target} —Å –ø–æ–º–æ—â—å—é Nmap ({scan_type})...[/]")
    
    async with security_integrations as si:
        result = await si.nmap_scan(target, scan_type)
        
        if "error" in result and result["error"]:
            console.print(f"[bold red]–û—à–∏–±–∫–∞: {result['error']}[/]")
            if result.get("error_details"):
                console.print(f"[dim]–î–µ—Ç–∞–ª–∏: {result['error_details']}[/]")
        else:
            console.print("[green]‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ[/]")
            if result.get("output"):
                console.print(f"[dim]–†–µ–∑—É–ª—å—Ç–∞—Ç:\n{result['output']}[/]")
            if result.get("privileged"):
                console.print("[yellow]‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏[/]")

async def _sslyze_scan(target: str):
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ SSL —Å –ø–æ–º–æ—â—å—é SSLyze"""
    console.print(f"[cyan]–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ SSL –¥–ª—è {target}...[/]")
    
    async with security_integrations as si:
        result = await si.sslyze_scan(target)
        
        if "error" in result:
            console.print(f"[bold red]–û—à–∏–±–∫–∞: {result['error']}[/]")
        else:
            console.print("[green]‚úÖ SSL —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ[/]")
            if result.get("output"):
                console.print(f"[dim]–†–µ–∑—É–ª—å—Ç–∞—Ç:\n{result['output']}[/]")

async def _comprehensive_security_audit(target: str):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    console.print(f"[cyan]–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è {target}...[/]")
    
    async with security_integrations as si:
        result = await si.comprehensive_audit(target)
        
        if "error" in result:
            console.print(f"[bold red]–û—à–∏–±–∫–∞: {result['error']}[/]")
        else:
            console.print("[green]‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω[/]")
            console.print(f"[dim]–†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}[/]")

def _show_system_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
    console.print(Panel("[bold blue]–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï[/]", expand=False, border_style="blue"))
    
    system_info = security_integrations.get_system_info()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.print(f"[cyan]–û–°:[/] {system_info['os']}")
    console.print(f"[cyan]Root –ø—Ä–∞–≤–∞:[/] {'‚úÖ –î–∞' if system_info['is_root'] else '‚ùå –ù–µ—Ç'}")
    console.print(f"[cyan]–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä:[/] {'‚úÖ –î–∞' if system_info['is_container'] else '‚ùå –ù–µ—Ç'}")
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    console.print("\n[cyan]–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:[/]")
    tools_table = Table()
    tools_table.add_column("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", style="cyan")
    tools_table.add_column("–°—Ç–∞—Ç—É—Å", style="green")
    
    for tool, available in system_info["available_tools"].items():
        status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if available else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        tools_table.add_row(tool, status)
    
    console.print(tools_table)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if system_info["recommendations"]:
        console.print("\n[cyan]–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:[/]")
        for rec in system_info["recommendations"]:
            console.print(f"  {rec}")

if __name__ == "__main__":
    security_app() 