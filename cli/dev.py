# cli/dev.py
import asyncio
import typer
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from typing import Optional, List, Dict, Any
import subprocess
import sys
import os
from pathlib import Path
import json
from datetime import datetime
import tempfile
import shutil

console = Console()
dev_app = typer.Typer(name="dev", help="üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è dev –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
DEV_DIR = Path("project_data/dev")
DEV_CONFIG_FILE = DEV_DIR / "dev_config.json"
DEV_LOGS_DIR = DEV_DIR / "logs"
DEV_DOCS_DIR = DEV_DIR / "docs"

def _ensure_dev_directory():
    """–°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è dev –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    DEV_DIR.mkdir(parents=True, exist_ok=True)
    DEV_LOGS_DIR.mkdir(parents=True, exist_ok=True)
    DEV_DOCS_DIR.mkdir(parents=True, exist_ok=True)
    
    if not DEV_CONFIG_FILE.exists():
        default_config = {
            "linting": {
                "tools": ["flake8", "black", "isort", "mypy"],
                "config_files": {
                    "flake8": ".flake8",
                    "black": "pyproject.toml",
                    "isort": ".isort.cfg",
                    "mypy": "mypy.ini"
                }
            },
            "testing": {
                "framework": "pytest",
                "coverage_tool": "coverage",
                "test_pattern": "test_*.py",
                "coverage_report_format": "html"
            },
            "documentation": {
                "builder": "sphinx",
                "formats": ["html", "pdf"],
                "source_dir": "docs",
                "output_dir": "docs/build"
            },
            "debugging": {
                "log_levels": ["DEBUG", "INFO", "WARNING", "ERROR"],
                "log_formats": ["text", "json"],
                "profiling": False
            }
        }
        with open(DEV_CONFIG_FILE, 'w') as f:
            json.dump(default_config, f, indent=2)

def _load_dev_config() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é dev –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    _ensure_dev_directory()
    try:
        with open(DEV_CONFIG_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def _save_dev_config(config: Dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é dev –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    _ensure_dev_directory()
    with open(DEV_CONFIG_FILE, 'w') as f:
        json.dump(config, f, indent=2)

def _check_tool_availability(tool_name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    try:
        result = subprocess.run([tool_name, "--version"], capture_output=True, text=True)
        return result.returncode == 0
    except FileNotFoundError:
        return False

def _get_python_files(directory: str = ".") -> List[str]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ Python —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    python_files = []
    for root, dirs, files in os.walk(directory):
        # –ò—Å–∫–ª—é—á–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∫—ç—à
        dirs[:] = [d for d in dirs if not d.startswith('.') and d not in ['venv', 'env', '__pycache__']]
        for file in files:
            if file.endswith('.py'):
                python_files.append(os.path.join(root, file))
    return python_files

@dev_app.command(name="lint", help="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é –ª–∏–Ω—Ç–µ—Ä–∞.")
def dev_lint_cmd(
    files: Optional[List[str]] = typer.Option(None, "--files", "-f", help="–§–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"),
    fix: bool = typer.Option(False, "--fix", help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã"),
    tool: str = typer.Option("flake8", "--tool", "-t", help="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: flake8, black, isort, mypy"),
    output_format: str = typer.Option("text", "--format", help="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: text, json, html")
):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é –ª–∏–Ω—Ç–µ—Ä–∞"""
    try:
        asyncio.run(_dev_lint_async(files, fix, tool, output_format))
    except typer.Exit: raise
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ 'dev lint': {e}[/]")
        raise typer.Exit(code=1)

async def _dev_lint_async(files: Optional[List[str]], fix: bool, tool: str, output_format: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã lint"""
    console.print(Panel("[bold blue]–ü–†–û–í–ï–†–ö–ê –ö–û–î–ê[/]", expand=False, border_style="blue"))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    if not _check_tool_availability(tool):
        console.print(f"[bold red]–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{tool}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: pip install {tool}[/]")
        raise typer.Exit(code=1)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    if not files:
        files = _get_python_files()
        console.print(f"[cyan]–ù–∞–π–¥–µ–Ω–æ Python —Ñ–∞–π–ª–æ–≤:[/] {len(files)}")
    else:
        console.print(f"[cyan]–§–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:[/] {', '.join(files)}")
    
    if not files:
        console.print("[yellow]Python —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/]")
        return
    
    console.print(f"[cyan]–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:[/] {tool}")
    console.print(f"[cyan]–†–µ–∂–∏–º:[/] {'–ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' if fix else '–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞'}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    issues = await _run_linting_tool(tool, files, fix)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await _display_lint_results(issues, tool, output_format)

async def _run_linting_tool(tool: str, files: List[str], fix: bool) -> List[Dict[str, Any]]:
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ª–∏–Ω—Ç–∏–Ω–≥–∞"""
    issues = []
    
    try:
        if tool == "flake8":
            cmd = ["flake8"] + files
            if fix:
                console.print("[yellow]flake8 –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ[/]")
        elif tool == "black":
            cmd = ["black"] + files
            if not fix:
                cmd.append("--check")
        elif tool == "isort":
            cmd = ["isort"] + files
            if not fix:
                cmd.append("--check-only")
        elif tool == "mypy":
            cmd = ["mypy"] + files
        else:
            console.print(f"[yellow]–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool}[/]")
            return issues
        
        console.print(f"[cyan]–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è:[/] {' '.join(cmd)}")
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            console.print("[green]‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ –æ—à–∏–±–æ–∫[/]")
        else:
            # –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
            for line in result.stdout.split('\n') + result.stderr.split('\n'):
                if line.strip():
                    issues.append({
                        "file": "unknown",
                        "line": 0,
                        "column": 0,
                        "message": line.strip(),
                        "severity": "error"
                    })
            
            console.print(f"[yellow]‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(issues)}[/]")
            
    except Exception as e:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {tool}: {e}[/]")
    
    return issues

async def _display_lint_results(issues: List[Dict[str, Any]], tool: str, output_format: str):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª–∏–Ω—Ç–∏–Ω–≥–∞"""
    if output_format == "json":
        console.print(json.dumps(issues, indent=2, ensure_ascii=False))
        return
    
    if not issues:
        console.print("[green]‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ[/]")
        return
    
    # –¢–∞–±–ª–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    table = Table(title=f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ ({tool})")
    table.add_column("–§–∞–π–ª", style="cyan")
    table.add_column("–°—Ç—Ä–æ–∫–∞", style="blue")
    table.add_column("–ö–æ–ª–æ–Ω–∫–∞", style="green")
    table.add_column("–°–æ–æ–±—â–µ–Ω–∏–µ", style="white")
    table.add_column("–¢–∏–ø", style="red")
    
    for issue in issues:
        table.add_row(
            issue.get("file", "N/A"),
            str(issue.get("line", "N/A")),
            str(issue.get("column", "N/A")),
            issue.get("message", "N/A"),
            issue.get("severity", "error")
        )
    
    console.print(table)

@dev_app.command(name="test", help="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤.")
def dev_test_cmd(
    pattern: Optional[str] = typer.Option(None, "--pattern", "-p", help="–®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"),
    coverage: bool = typer.Option(False, "--coverage", "-c", help="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞"),
    verbose: bool = typer.Option(False, "--verbose", "-v", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"),
    parallel: bool = typer.Option(False, "--parallel", help="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ")
):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
    try:
        asyncio.run(_dev_test_async(pattern, coverage, verbose, parallel))
    except typer.Exit: raise
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ 'dev test': {e}[/]")
        raise typer.Exit(code=1)

async def _dev_test_async(pattern: Optional[str], coverage: bool, verbose: bool, parallel: bool):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã test"""
    console.print(Panel("[bold blue]–ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í[/]", expand=False, border_style="blue"))
    
    config = _load_dev_config()
    test_config = config.get("testing", {})
    framework = test_config.get("framework", "pytest")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å pytest
    if not _check_tool_availability("pytest"):
        console.print("[bold red]pytest –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: pip install pytest[/]")
        raise typer.Exit(code=1)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
    cmd = ["pytest"]
    
    if pattern:
        cmd.extend(["-k", pattern])
        console.print(f"[cyan]–®–∞–±–ª–æ–Ω —Ç–µ—Å—Ç–æ–≤:[/] {pattern}")
    
    if coverage:
        if not _check_tool_availability("coverage"):
            console.print("[yellow]coverage –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: pip install coverage[/]")
        else:
            cmd.extend(["--cov=.", "--cov-report=html", "--cov-report=term"])
            console.print("[cyan]–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞:[/] –í–∫–ª—é—á–µ–Ω–æ")
    
    if verbose:
        cmd.append("-v")
        console.print("[cyan]–†–µ–∂–∏–º:[/] –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    
    if parallel:
        if not _check_tool_availability("pytest-xdist"):
            console.print("[yellow]pytest-xdist –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: pip install pytest-xdist[/]")
        else:
            cmd.extend(["-n", "auto"])
            console.print("[cyan]–†–µ–∂–∏–º:[/] –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
    
    console.print(f"[cyan]–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è:[/] {' '.join(cmd)}")
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            console.print("[green]‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ[/]")
        else:
            console.print("[red]‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏[/]")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–≤–æ–¥
        if result.stdout:
            console.print("\n[cyan]–í—ã–≤–æ–¥ —Ç–µ—Å—Ç–æ–≤:[/]")
            console.print(result.stdout)
        
        if result.stderr:
            console.print("\n[yellow]–û—à–∏–±–∫–∏:[/]")
            console.print(result.stderr)
            
    except Exception as e:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: {e}[/]")

@dev_app.command(name="docs", help="–°–±–æ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.")
def dev_docs_cmd(
    format: str = typer.Option("html", "--format", "-f", help="–§–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: html, pdf, epub"),
    output_dir: Optional[str] = typer.Option(None, "--output", "-o", help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"),
    clean: bool = typer.Option(False, "--clean", help="–û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–±–æ—Ä–∫—É"),
    serve: bool = typer.Option(False, "--serve", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
):
    """–°–±–æ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    try:
        asyncio.run(_dev_docs_async(format, output_dir, clean, serve))
    except typer.Exit: raise
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ 'dev docs': {e}[/]")
        raise typer.Exit(code=1)

async def _dev_docs_async(format: str, output_dir: Optional[str], clean: bool, serve: bool):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã docs"""
    console.print(Panel("[bold blue]–°–ë–û–†–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò[/]", expand=False, border_style="blue"))
    
    config = _load_dev_config()
    docs_config = config.get("documentation", {})
    builder = docs_config.get("builder", "sphinx")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å sphinx-build
    if not _check_tool_availability("sphinx-build"):
        console.print("[bold red]sphinx-build –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: pip install sphinx[/]")
        raise typer.Exit(code=1)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    source_dir = Path(docs_config.get("source_dir", "docs"))
    if not output_dir:
        output_dir = docs_config.get("output_dir", "docs/build")
    
    output_path = Path(output_dir)
    
    console.print(f"[cyan]–§–æ—Ä–º–∞—Ç:[/] {format}")
    console.print(f"[cyan]–ò—Å—Ç–æ—á–Ω–∏–∫:[/] {source_dir}")
    console.print(f"[cyan]–í—ã–≤–æ–¥:[/] {output_path}")
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–±–æ—Ä–∫–∏
    if clean and output_path.exists():
        shutil.rmtree(output_path)
        console.print("[cyan]–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å–±–æ—Ä–∫–∞ –æ—á–∏—â–µ–Ω–∞[/]")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–∞
    output_path.mkdir(parents=True, exist_ok=True)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É sphinx
    cmd = ["sphinx-build", "-b", format, str(source_dir), str(output_path)]
    
    console.print(f"[cyan]–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è:[/] {' '.join(cmd)}")
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            console.print(f"[green]‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–∞ –≤ {output_path}[/]")
            
            if serve:
                await _serve_documentation(output_path, format)
        else:
            console.print("[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏[/]")
            if result.stderr:
                console.print(result.stderr)
                
    except Exception as e:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {e}[/]")

async def _serve_documentation(output_path: Path, format: str):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    if format != "html":
        console.print("[yellow]–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è HTML —Ñ–æ—Ä–º–∞—Ç–∞[/]")
        return
    
    try:
        import http.server
        import socketserver
        
        port = 8001
        os.chdir(output_path)
        
        with socketserver.TCPServer(("", port), http.server.SimpleHTTPRequestHandler) as httpd:
            console.print(f"[green]üåê –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:{port}[/]")
            console.print("[yellow]–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞[/]")
            
            try:
                httpd.serve_forever()
            except KeyboardInterrupt:
                console.print("\n[yellow]–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω[/]")
                
    except Exception as e:
        console.print(f"[yellow]–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: {e}[/]")

@dev_app.command(name="debug", help="–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏.")
def dev_debug_cmd(
    level: str = typer.Option("DEBUG", "--level", "-l", help="–£—Ä–æ–≤–µ–Ω—å –æ—Ç–ª–∞–¥–∫–∏: DEBUG, INFO, WARNING, ERROR"),
    log_file: Optional[str] = typer.Option(None, "--log-file", help="–§–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤ –æ—Ç–ª–∞–¥–∫–∏"),
    profiling: bool = typer.Option(False, "--profiling", help="–í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"),
    memory: bool = typer.Option(False, "--memory", help="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏")
):
    """–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        asyncio.run(_dev_debug_async(level, log_file, profiling, memory))
    except typer.Exit: raise
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ 'dev debug': {e}[/]")
        raise typer.Exit(code=1)

async def _dev_debug_async(level: str, log_file: Optional[str], profiling: bool, memory: bool):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã debug"""
    console.print(Panel("[bold blue]–†–ï–ñ–ò–ú –û–¢–õ–ê–î–ö–ò[/]", expand=False, border_style="blue"))
    
    config = _load_dev_config()
    debug_config = config.get("debugging", {})
    
    console.print(f"[cyan]–£—Ä–æ–≤–µ–Ω—å –æ—Ç–ª–∞–¥–∫–∏:[/] {level}")
    
    if log_file:
        console.print(f"[cyan]–§–∞–π–ª –ª–æ–≥–æ–≤:[/] {log_file}")
    else:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        log_file = DEV_LOGS_DIR / f"debug_{timestamp}.log"
        console.print(f"[cyan]–§–∞–π–ª –ª–æ–≥–æ–≤:[/] {log_file}")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    await _setup_debug_logging(level, log_file)
    
    # –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    if profiling:
        await _setup_profiling()
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏
    if memory:
        await _setup_memory_monitoring()
    
    console.print("[green]‚úÖ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω[/]")
    console.print("[dim]–õ–æ–≥–∏ –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª[/]")

async def _setup_debug_logging(level: str, log_file: str):
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    import logging
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger("swiftdevbot_debug")
    logger.setLevel(getattr(logging, level.upper(), logging.DEBUG))
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    file_handler = logging.FileHandler(log_file)
    file_handler.setLevel(getattr(logging, level.upper(), logging.DEBUG))
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    file_handler.setFormatter(formatter)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –ª–æ–≥–≥–µ—Ä—É
    logger.addHandler(file_handler)
    
    # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    logger.info(f"–û—Ç–ª–∞–¥–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Å —É—Ä–æ–≤–Ω–µ–º {level}")
    logger.debug("–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

async def _setup_profiling():
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    try:
        import cProfile
        import pstats
        
        console.print("[cyan]–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ:[/] –í–∫–ª—é—á–µ–Ω–æ")
        console.print("[dim]–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ cProfile –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏[/]")
        
    except ImportError:
        console.print("[yellow]cProfile –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω[/]")

async def _setup_memory_monitoring():
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏"""
    try:
        import psutil
        import gc
        
        console.print("[cyan]–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏:[/] –í–∫–ª—é—á–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏
        process = psutil.Process()
        memory_info = process.memory_info()
        
        console.print(f"[dim]–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:[/] {memory_info.rss / 1024 / 1024:.1f} MB")
        console.print(f"[dim]–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å:[/] {memory_info.vms / 1024 / 1024:.1f} MB")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        gc.collect()
        console.print("[dim]–°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞[/]")
        
    except ImportError:
        console.print("[yellow]psutil –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏[/]")

@dev_app.command(name="analyze", help="–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞.")
def dev_analyze_cmd(
    tool: str = typer.Option("pylint", "--tool", "-t", help="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞: pylint, bandit, safety"),
    output_format: str = typer.Option("text", "--format", help="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: text, json, html")
):
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞"""
    try:
        asyncio.run(_dev_analyze_async(tool, output_format))
    except typer.Exit: raise
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ 'dev analyze': {e}[/]")
        raise typer.Exit(code=1)

async def _dev_analyze_async(tool: str, output_format: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã analyze"""
    console.print(Panel("[bold blue]–ê–ù–ê–õ–ò–ó –ö–û–î–ê[/]", expand=False, border_style="blue"))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    if not _check_tool_availability(tool):
        console.print(f"[bold red]–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{tool}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: pip install {tool}[/]")
        raise typer.Exit(code=1)
    
    console.print(f"[cyan]–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞:[/] {tool}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ Python —Ñ–∞–π–ª–æ–≤
    files = _get_python_files()
    
    if not files:
        console.print("[yellow]Python —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/]")
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
    issues = await _run_code_analysis(tool, files)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await _display_analysis_results(issues, tool, output_format)

async def _run_code_analysis(tool: str, files: List[str]) -> List[Dict[str, Any]]:
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞"""
    issues = []
    
    try:
        if tool == "pylint":
            cmd = ["pylint"] + files
        elif tool == "bandit":
            cmd = ["bandit", "-r", "."]
        elif tool == "safety":
            cmd = ["safety", "check"]
        else:
            console.print(f"[yellow]–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞: {tool}[/]")
            return issues
        
        console.print(f"[cyan]–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è:[/] {' '.join(cmd)}")
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for line in result.stdout.split('\n') + result.stderr.split('\n'):
            if line.strip():
                issues.append({
                    "tool": tool,
                    "message": line.strip(),
                    "severity": "info"
                })
        
        if result.returncode == 0:
            console.print("[green]‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º[/]")
        else:
            console.print(f"[yellow]‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(issues)}[/]")
            
    except Exception as e:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}[/]")
    
    return issues

async def _display_analysis_results(issues: List[Dict[str, Any]], tool: str, output_format: str):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
    if output_format == "json":
        console.print(json.dumps(issues, indent=2, ensure_ascii=False))
        return
    
    if not issues:
        console.print("[green]‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ[/]")
        return
    
    # –¢–∞–±–ª–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    table = Table(title=f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ ({tool})")
    table.add_column("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", style="cyan")
    table.add_column("–°–æ–æ–±—â–µ–Ω–∏–µ", style="white")
    table.add_column("–í–∞–∂–Ω–æ—Å—Ç—å", style="red")
    
    for issue in issues:
        table.add_row(
            issue.get("tool", "N/A"),
            issue.get("message", "N/A"),
            issue.get("severity", "info")
        )
    
    console.print(table)

if __name__ == "__main__":
    dev_app() 