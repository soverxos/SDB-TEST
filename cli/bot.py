# cli_commands/bot_cmd.py
import typer
import asyncio
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from loguru import logger
from aiogram import Bot
from aiogram.types import BotCommand
from pathlib import Path
from core.services_provider import BotServicesProvider
from .utils import get_sdb_services_for_cli
from core.module_loader import ModuleLoader

console = Console()
bot_app = typer.Typer(
    name="bot",
    help="ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Telegram-–±–æ—Ç–∞.",
    rich_markup_mode="rich"
)

@bot_app.command(name="delete-commands", help="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ Telegram.")
def delete_commands():
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ Telegram."""
    async def _delete_commands_async():
        settings_obj, _, _ = await get_sdb_services_for_cli(init_db=False, init_rbac=False)
        if not settings_obj:
            console.print("[bold red]–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.[/]")
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã delete-commands")
            raise typer.Exit(code=1)

        try:
            bot_token = settings_obj.telegram.token
            # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
            if not bot_token:
                console.print("[bold red]–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É.[/bold red]")
                console.print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.")
                raise typer.Exit(code=1)

            bot = Bot(token=bot_token)
            await bot.delete_my_commands()
            await bot.session.close()
            console.print(Panel("[bold green]–í—Å–µ –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –º–µ–Ω—é Telegram![/]", expand=False, border_style="green"))
            logger.success("–í—Å–µ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –º–µ–Ω—é Telegram")
        except AttributeError as e:
            console.print(f"[bold red]–û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ CoreAppSettings: {e}[/]")
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ CoreAppSettings: {e}")
            raise typer.Exit(code=1)
        except Exception as e:
            console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥: {e}[/]")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")
            raise typer.Exit(code=1)

    try:
        asyncio.run(_delete_commands_async())
    except typer.Exit: # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º typer.Exit, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏—à–Ω–∏–π traceback
        pass
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}[/]")
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ delete-commands: {e}")
        raise typer.Exit(code=1)

@bot_app.command(name="set-commands", help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é Telegram –∏–∑ –º–æ–¥—É–ª–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
def set_commands():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é Telegram."""
    async def _set_commands_async():
        settings_obj, _, _ = await get_sdb_services_for_cli(init_db=False, init_rbac=False)
        if not settings_obj:
            console.print("[bold red]–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.[/]")
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã set-commands")
            raise typer.Exit(code=1)

        try:
            bot_token = settings_obj.telegram.token
            # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
            if not bot_token:
                console.print("[bold red]–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É.[/bold red]")
                console.print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.")
                raise typer.Exit(code=1)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ModuleLoader
            temp_bsp = BotServicesProvider(settings=settings_obj)
            loader = ModuleLoader(settings=settings_obj, services_provider=temp_bsp)
            loader.scan_all_available_modules()
            if hasattr(loader, '_load_enabled_plugin_names'):
                loader._load_enabled_plugin_names()

            # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–æ–¥—É–ª–µ–π
            commands = []
            for module_info in loader.available_modules.values():
                if module_info.manifest and module_info.name in loader.enabled_plugin_names:
                    for cmd in module_info.manifest.commands or []:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ cmd - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                        if isinstance(cmd, dict) and cmd.get('command') and cmd.get('description'):
                            commands.append(BotCommand(command=cmd['command'].lstrip('/'), description=cmd['description']))

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ bot_commands.yaml (–µ—Å–ª–∏ –µ—Å—Ç—å)
            core_commands_path = settings_obj.core.project_data_path / 'Config' / 'bot_commands.yaml'
            if core_commands_path.exists():
                import yaml
                with core_commands_path.open('r', encoding='utf-8') as f:
                    core_commands = yaml.safe_load(f) or []
                for cmd in core_commands:
                    if isinstance(cmd, dict) and cmd.get('command') and cmd.get('description'):
                        commands.append(BotCommand(command=cmd['command'].lstrip('/'), description=cmd['description']))

            if not commands:
                console.print("[yellow]–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.[/]")
                logger.warning("–ù–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –º–µ–Ω—é Telegram")
                return

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            bot = Bot(token=bot_token)
            await bot.set_my_commands(commands)
            await bot.session.close()

            # –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            table = Table(title="[bold cyan]–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã[/]", show_header=True, header_style="bold magenta")
            table.add_column("–ö–æ–º–∞–Ω–¥–∞", style="cyan")
            table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="green")
            for cmd in commands:
                table.add_row(f"/{cmd.command}", cmd.description)
            console.print(table)
            console.print(Panel("[bold green]–ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –º–µ–Ω—é Telegram![/]", expand=False, border_style="green"))
            logger.success(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(commands)} –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é Telegram")
        except AttributeError as e:
            console.print(f"[bold red]–û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ CoreAppSettings: {e}[/]")
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ CoreAppSettings: {e}")
            raise typer.Exit(code=1)
        except Exception as e:
            console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥: {e}[/]")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥: {e}")
            raise typer.Exit(code=1)

    try:
        asyncio.run(_set_commands_async())
    except typer.Exit: # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º typer.Exit
        pass
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}[/]")
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ set-commands: {e}")
        raise typer.Exit(code=1)

@bot_app.command(name="status", help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞.")
def status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –±–æ—Ç."""
    async def _status_async():
        settings_obj, _, _ = await get_sdb_services_for_cli(init_db=False, init_rbac=False)
        if not settings_obj:
            console.print("[bold red]–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.[/]")
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã status")
            raise typer.Exit(code=1)

        try:
            bot_token = settings_obj.telegram.token
            # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
            if not bot_token:
                console.print("[bold yellow]–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞: —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.[/bold yellow]")
                console.print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
                raise typer.Exit() # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–º–∞–Ω–¥—É –±–µ–∑ –æ—à–∏–±–∫–∏

            bot = Bot(token=bot_token)
            bot_info = await bot.get_me()
            await bot.session.close()
            console.print(Panel(f"[bold green]–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω! ID: {bot_info.id}, –ò–º—è: @{bot_info.username}[/]", expand=False, border_style="green"))
            logger.success(f"–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: @{bot_info.username}")
        except AttributeError as e:
            console.print(f"[bold red]–û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ CoreAppSettings: {e}[/]")
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ CoreAppSettings: {e}")
            raise typer.Exit(code=1)
        except Exception as e:
            console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}[/]")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            raise typer.Exit(code=1)

    try:
        asyncio.run(_status_async())
    except typer.Exit: # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º typer.Exit
        pass
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}[/]")
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ status: {e}")
        raise typer.Exit(code=1)

if __name__ == "__main__":
    bot_app()