import typer
import shutil
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.text import Text
from rich.syntax import Syntax
import json
from pathlib import Path
import sys
import asyncio
import importlib
from typing import List, Dict, Any, Optional, Type

from .utils import get_sdb_services_for_cli, confirm_action
from core.database.base import Base as SDBBaseAlchemyModel 

console = Console()
module_app = typer.Typer(
    name="module",
    help="üß© –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏ (–ø–ª–∞–≥–∏–Ω–∞–º–∏) SwiftDevBot.",
    rich_markup_mode="rich"
)

async def _get_module_loader_instance_async() -> Optional[Any]: 
    settings_obj, _, _ = await get_sdb_services_for_cli(init_db=False, init_rbac=False)
    if not settings_obj:
        console.print("[bold red]–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SDB –¥–ª—è ModuleLoader (–∏–∑ CLI).[/]")
        return None
    try:
        from core.module_loader import ModuleLoader
        from core.services_provider import BotServicesProvider
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π BotServicesProvider —Ç–æ–ª—å–∫–æ –¥–ª—è ModuleLoader,
        # —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω–∞ –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ª–≥–æ–π.
        # ModuleLoader –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç settings –∏ —Å–∞–º–æ–≥–æ —Å–µ–±—è (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ services.logger).
        # –≠—Ç–æ –Ω–µ –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –Ω–æ –¥–ª—è CLI –∫–æ–º–∞–Ω–¥, –≥–¥–µ –Ω–∞–º –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ ModuleLoader, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–µ–º–ª–µ–º–æ.
        # –õ–∏–±–æ ModuleLoader –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥–µ–ª–∞–Ω, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ–≥–æ BSP –¥–ª—è —Ç–∞–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
        # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫, –Ω–æ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º.
        temp_bsp = BotServicesProvider(settings=settings_obj)
        # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º temp_bsp.setup_services(), —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –¥–ª—è —Ä–∞–Ω—Ç–∞–π–º–∞ –±–æ—Ç–∞.
        # ModuleLoader –¥–æ–ª–∂–µ–Ω —É–º–µ—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å settings –∏ –ª–æ–≥–≥–µ—Ä–æ–º.
        
        loader = ModuleLoader(settings=settings_obj, services_provider=temp_bsp) # –ü–µ—Ä–µ–¥–∞–µ–º temp_bsp
        
        # –ò–ó–ú–ï–ù–ï–ù–û –ó–î–ï–°–¨
        if hasattr(loader, 'scan_all_available_modules'):
            loader.scan_all_available_modules()
        else:
            console.print("[bold red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ú–µ—Ç–æ–¥ 'scan_all_available_modules' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ModuleLoader.[/]")
            return None
            
        if hasattr(loader, '_load_enabled_plugin_names'):
            getattr(loader, '_load_enabled_plugin_names')()
        else:
            console.print("[yellow]–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ú–µ—Ç–æ–¥ '_load_enabled_plugin_names' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ModuleLoader –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∏–∑ CLI.[/yellow]")
        
        return loader
    except ImportError as e_imp:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —è–¥—Ä–∞ SDB –¥–ª—è ModuleLoader (–∏–∑ CLI): {e_imp}[/]")
        return None
    except Exception as e_load:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ModuleLoader (–∏–∑ CLI): {e_load}[/]")
        console.print_exception(show_locals=False) # –î–æ–±–∞–≤–∏–º –≤—ã–≤–æ–¥ —Ç—Ä–µ–π—Å–±–µ–∫–∞
        return None

def _get_module_loader_sync() -> Optional[Any]: 
    try:
        return asyncio.run(_get_module_loader_instance_async())
    except Exception as e:
        # –õ–æ–≥ –æ—à–∏–±–∫–∏ —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ _get_module_loader_instance_async
        # console.print(f"[bold red]–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ModuleLoader —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ: {e}[/]")
        return None

def _save_enabled_modules(module_names: List[str], config_path: Path) -> bool:
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞
        unique_module_names = sorted(list(set(name.strip() for name in module_names if name.strip())))
        data_to_save = {"active_modules": unique_module_names, "disabled_modules": []} # disabled_modules –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ
        
        config_path.parent.mkdir(parents=True, exist_ok=True)
        with open(config_path, 'w', encoding='utf-8') as f:
            json.dump(data_to_save, f, indent=2, ensure_ascii=False)
        return True
    except Exception as e:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –≤ {config_path}: {e}[/]")
        return False

@module_app.command(name="create", help="–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è.")
def create_module_cmd(name: str = typer.Argument(..., help="–ò–º—è –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, '_').")):
    """–°–æ–∑–¥–∞—ë—Ç —à–∞–±–ª–æ–Ω –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è."""
    from loguru import logger  # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å rich

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
    if not name.isidentifier():
        console.print(f"[bold red]–û—à–∏–±–∫–∞: –ò–º—è –º–æ–¥—É–ª—è '{name}' –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ '_', –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.[/]")
        raise typer.Exit(code=1)

    module_dir = Path("modules") / name
    if module_dir.exists():
        console.print(f"[bold red]–û—à–∏–±–∫–∞: –ú–æ–¥—É–ª—å '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ {module_dir}.[/]")
        raise typer.Exit(code=1)

    console.print(Panel(f"[bold cyan]–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥—É–ª—è: {name}[/]", expand=False, border_style="cyan"))
    try:
        module_dir.mkdir(parents=True)
        
        # –°–æ–∑–¥–∞—ë–º manifest.yaml
        manifest_content = f'''\
name: "{name}"
display_name: "{name.replace('_', ' ').title()}"
version: "1.0.0"
description: "–ú–æ–¥—É–ª—å {name.replace('_', ' ').title()} –¥–ª—è SwiftDevBot"
author: "SwiftDevBot Team"

python_requirements: []
sdb_module_dependencies: []

model_definitions: []

commands:
  - command: "{name}"
    description: "{name.replace('_', ' ').title()}"
    icon: "üîß"
    category: "–û–±—â–∏–µ"
    admin_only: false

permissions:
  - name: "{name}.view"
    description: "–ü—Ä–æ—Å–º–æ—Ç—Ä –º–æ–¥—É–ª—è {name.replace('_', ' ').title()}"
  - name: "{name}.use"
    description: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è {name.replace('_', ' ').title()}"
  - name: "{name}.admin"
    description: "[–ê–î–ú–ò–ù] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—é {name.replace('_', ' ').title()}"
'''
        (module_dir / "manifest.yaml").write_text(manifest_content, encoding="utf-8")
        console.print(f"[green]–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {module_dir / 'manifest.yaml'}[/]")

        # –°–æ–∑–¥–∞—ë–º __init__.py
        init_content = f'''\
"""
–ú–æ–¥—É–ª—å {name.replace('_', ' ').title()} –¥–ª—è SwiftDevBot

–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è.
"""

from aiogram import Router, Dispatcher, Bot
from core.services_provider import BotServicesProvider
from .handlers import router as {name}_router

router = Router(name="{name}")
router.include_router({name}_router)


async def setup_module(dp: Dispatcher, bot: Bot, services: BotServicesProvider):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª—è"""
    dp.include_router(router)
    
    services.ui_registry.register_module_entry(
        module_name="{name}",
        display_name="{name.replace('_', ' ').title()}",
        entry_callback_data="module_{name}",
        description="–ú–æ–¥—É–ª—å {name.replace('_', ' ').title()}",
        icon="üîß",
        required_permission_to_view="{name}.view",
    )


__version__ = "1.0.0"
__author__ = "SwiftDevBot Team"
'''
        (module_dir / "__init__.py").write_text(init_content, encoding="utf-8")
        console.print(f"[green]–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {module_dir / '__init__.py'}[/]")

        # –°–æ–∑–¥–∞—ë–º handlers.py
        handlers_content = f'''\
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥—É–ª—è {name.replace('_', ' ').title()}
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from core.services_provider import BotServicesProvider
from core.rbac.service import RBACService

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –º–æ–¥—É–ª—è
router = Router(name="{name}")


async def check_permission(rbac_service: RBACService, user_id: int, permission: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return await rbac_service.user_has_permission(user_id, permission)


@router.message(Command("{name}"))
async def cmd_{name}(message: Message, services: BotServicesProvider):
    """–ö–æ–º–∞–Ω–¥–∞ /{name} - –≥–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –º–æ–¥—É–ª—è"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    if not await check_permission(services.rbac, user_id, "{name}.use"):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥—É–ª—é {name.replace('_', ' ').title()}.")
        return
    
    await message.answer(
        f"üîß <b>{name.replace('_', ' ').title()}</b>\\n\\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–¥—É–ª—å {name.replace('_', ' ').title()}!\\n"
        f"–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è.",
        parse_mode="HTML"
    )


# –≠–∫—Å–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–∞
__all__ = ["router"]
'''
        (module_dir / "handlers.py").write_text(handlers_content, encoding="utf-8")
        console.print(f"[green]–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {module_dir / 'handlers.py'}[/]")

        # –°–æ–∑–¥–∞—ë–º models.py
        models_content = f'''\
"""
–ú–æ–¥–µ–ª–∏ –¥–ª—è –º–æ–¥—É–ª—è {name.replace('_', ' ').title()}
"""
from datetime import datetime
from typing import Optional, List
from sqlalchemy import Column, Integer, String, Text, DateTime, ForeignKey
from sqlalchemy.orm import relationship, Mapped, mapped_column
from core.database.base import Base


# –ü—Ä–∏–º–µ—Ä –º–æ–¥–µ–ª–∏ - —É–¥–∞–ª–∏—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
class {name.title().replace('_', '')}Item(Base):
    """–ü—Ä–∏–º–µ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –º–æ–¥—É–ª—è {name.replace('_', ' ').title()}"""
    __tablename__ = "{name}_items"
    
    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    name: Mapped[str] = mapped_column(String(200), nullable=False)
    description: Mapped[Optional[str]] = mapped_column(Text, nullable=True)
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # –°–≤—è–∑–∏
    user_id: Mapped[int] = mapped_column(Integer, ForeignKey("users.id"), nullable=False)
    
    def __repr__(self):
        return f"<{name.title().replace('_', '')}Item(id={{self.id}}, name='{{self.name}}', user_id={{self.user_id}})>"
'''
        (module_dir / "models.py").write_text(models_content, encoding="utf-8")
        console.print(f"[green]–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {module_dir / 'models.py'}[/]")

        # –°–æ–∑–¥–∞—ë–º keyboards.py
        keyboards_content = f'''\
"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–æ–¥—É–ª—è {name.replace('_', ' ').title()}
"""
from typing import Optional, List
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from .callback_data import {name.title().replace('_', '')}CB


def main_{name}_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–æ–¥—É–ª—è {name.replace('_', ' ').title()}"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text="üîß –§—É–Ω–∫—Ü–∏—è 1",
            callback_data={name.title().replace('_', '')}CB(action="function1").pack()
        ),
        InlineKeyboardButton(
            text="‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è 2", 
            callback_data={name.title().replace('_', '')}CB(action="function2").pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
            callback_data={name.title().replace('_', '')}CB(action="close").pack()
        )
    )
    
    return builder.as_markup()


def confirmation_keyboard(item_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text="‚úÖ –î–∞",
            callback_data={name.title().replace('_', '')}CB(action="confirm", item_id=item_id).pack()
        ),
        InlineKeyboardButton(
            text="‚ùå –ù–µ—Ç",
            callback_data={name.title().replace('_', '')}CB(action="cancel").pack()
        )
    )
    
    return builder.as_markup()
'''
        (module_dir / "keyboards.py").write_text(keyboards_content, encoding="utf-8")
        console.print(f"[green]–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {module_dir / 'keyboards.py'}[/]")

        # –°–æ–∑–¥–∞—ë–º callback_data.py
        callback_data_content = f'''\
"""
Callback Data —Ñ–∞–±—Ä–∏–∫–∏ –¥–ª—è –º–æ–¥—É–ª—è {name.replace('_', ' ').title()}
"""
from typing import Optional
from aiogram.filters.callback_data import CallbackData


class {name.title().replace('_', '')}CB(CallbackData, prefix="{name}_cb"):
    """Callback –¥–ª—è –º–æ–¥—É–ª—è {name.replace('_', ' ').title()}"""
    action: str
    item_id: Optional[int] = None


class {name.title().replace('_', '')}ActionCB(CallbackData, prefix="{name}_action"):
    """Callback –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥—É–ª—è {name.replace('_', ' ').title()}"""
    action: str
    data: Optional[str] = None
'''
        (module_dir / "callback_data.py").write_text(callback_data_content, encoding="utf-8")
        console.print(f"[green]–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {module_dir / 'callback_data.py'}[/]")

        # –°–æ–∑–¥–∞—ë–º states.py
        states_content = f'''\
"""
FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–æ–¥—É–ª—è {name.replace('_', ' ').title()}
"""
from aiogram.fsm.state import State, StatesGroup


class {name.title().replace('_', '')}States(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥—É–ª–µ–º {name.replace('_', ' ').title()}"""
    waiting_for_input = State()
    waiting_for_confirmation = State()
    processing = State()


class {name.title().replace('_', '')}CreationStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
    waiting_for_name = State()
    waiting_for_description = State()
    confirm_creation = State()


class {name.title().replace('_', '')}EditStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
    waiting_for_new_name = State()
    waiting_for_new_description = State()
    confirm_edit = State()
'''
        (module_dir / "states.py").write_text(states_content, encoding="utf-8")
        console.print(f"[green]–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {module_dir / 'states.py'}[/]")

        # –°–æ–∑–¥–∞—ë–º services.py
        services_content = f'''\
"""
–°–µ—Ä–≤–∏—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥—É–ª–µ–º {name.replace('_', ' ').title()}
"""
from typing import List, Optional
from sqlalchemy import select, and_
from sqlalchemy.orm import selectinload

from core.database.manager import DBManager
from core.users.service import UserService
from .models import {name.title().replace('_', '')}Item


class {name.title().replace('_', '')}Service:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥—É–ª–µ–º {name.replace('_', ' ').title()}"""
    
    def __init__(self, db_manager: DBManager, user_service: UserService):
        self.db_manager = db_manager
        self.user_service = user_service
    
    async def create_item(
        self,
        user_id: int,
        name: str,
        description: Optional[str] = None
    ) -> {name.title().replace('_', '')}Item:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç"""
        async with self.db_manager.get_async_session() as session:
            item = {name.title().replace('_', '')}Item(
                name=name,
                description=description,
                user_id=user_id
            )
            
            session.add(item)
            await session.commit()
            await session.refresh(item)
            
            return item
    
    async def get_user_items(self, user_id: int) -> List[{name.title().replace('_', '')}Item]:
        """–ü–æ–ª—É—á–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.db_manager.get_async_session() as session:
            query = select({name.title().replace('_', '')}Item).where(
                {name.title().replace('_', '')}Item.user_id == user_id
            ).order_by({name.title().replace('_', '')}Item.created_at.desc())
            
            result = await session.execute(query)
            return list(result.scalars().all())
    
    async def get_item_by_id(self, item_id: int, user_id: int) -> Optional[{name.title().replace('_', '')}Item]:
        """–ü–æ–ª—É—á–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–æ ID —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        async with self.db_manager.get_async_session() as session:
            query = select({name.title().replace('_', '')}Item).where(
                and_(
                    {name.title().replace('_', '')}Item.id == item_id,
                    {name.title().replace('_', '')}Item.user_id == user_id
                )
            )
            
            result = await session.execute(query)
            return result.scalar_one_or_none()
    
    async def update_item(
        self,
        item_id: int,
        user_id: int,
        name: Optional[str] = None,
        description: Optional[str] = None
    ) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç"""
        async with self.db_manager.get_async_session() as session:
            query = select({name.title().replace('_', '')}Item).where(
                and_(
                    {name.title().replace('_', '')}Item.id == item_id,
                    {name.title().replace('_', '')}Item.user_id == user_id
                )
            )
            result = await session.execute(query)
            item = result.scalar_one_or_none()
            
            if not item:
                return False
            
            if name is not None:
                item.name = name
            if description is not None:
                item.description = description
            
            await session.commit()
            return True
    
    async def delete_item(self, item_id: int, user_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç"""
        async with self.db_manager.get_async_session() as session:
            query = select({name.title().replace('_', '')}Item).where(
                and_(
                    {name.title().replace('_', '')}Item.id == item_id,
                    {name.title().replace('_', '')}Item.user_id == user_id
                )
            )
            result = await session.execute(query)
            item = result.scalar_one_or_none()
            
            if not item:
                return False
            
            await session.delete(item)
            await session.commit()
            return True
'''
        (module_dir / "services.py").write_text(services_content, encoding="utf-8")
        console.print(f"[green]–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {module_dir / 'services.py'}[/]")

        # –°–æ–∑–¥–∞—ë–º utils.py
        utils_content = f'''\
"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è {name.replace('_', ' ').title()}
"""
from datetime import datetime
from typing import Any, Dict, Optional

from .models import {name.title().replace('_', '')}Item


def format_item_info(item: {name.title().replace('_', '')}Item) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ"""
    lines = [
        f"üîß <b>–≠–ª–µ–º–µ–Ω—Ç #{{item.id}}</b>",
        "",
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {{item.name}}",
    ]
    
    if item.description:
        lines.append(f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {{item.description}}")
    
    lines.extend([
        f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {{item.created_at.strftime('%d.%m.%Y %H:%M')}}",
        f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω:</b> {{item.updated_at.strftime('%d.%m.%Y %H:%M')}}"
    ])
    
    return "\\n".join(lines)


def format_items_list(items: list[{name.title().replace('_', '')}Item]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
    if not items:
        return "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤."
    
    lines = [f"üìù <b>–í–∞—à–∏ —ç–ª–µ–º–µ–Ω—Ç—ã ({{len(items)}}):</b>", ""]
    
    for i, item in enumerate(items, 1):
        preview = item.description[:50] + "..." if item.description and len(item.description) > 50 else item.description or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
        lines.append(f"{{i}}. <b>{{item.name}}</b> - {{preview}}")
    
    return "\\n".join(lines)


def validate_item_name(name: str) -> tuple[bool, str]:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞"""
    if not name or not name.strip():
        return False, "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    
    if len(name) > 200:
        return False, "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)"
    
    return True, ""


def validate_item_description(description: str) -> tuple[bool, str]:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞"""
    if description and len(description) > 1000:
        return False, "–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)"
    
    return True, ""


def truncate_text(text: str, max_length: int = 50) -> str:
    """–û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if len(text) <= max_length:
        return text
    return text[:max_length - 3] + "..."


def format_duration(start_time: datetime, end_time: Optional[datetime] = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏"""
    if end_time is None:
        end_time = datetime.utcnow()
    
    duration = end_time - start_time
    
    if duration.days > 0:
        return f"{{duration.days}} –¥–Ω."
    elif duration.seconds >= 3600:
        hours = duration.seconds // 3600
        return f"{{hours}} —á."
    elif duration.seconds >= 60:
        minutes = duration.seconds // 60
        return f"{{minutes}} –º–∏–Ω."
    else:
        return "< 1 –º–∏–Ω."
'''
        (module_dir / "utils.py").write_text(utils_content, encoding="utf-8")
        console.print(f"[green]–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {module_dir / 'utils.py'}[/]")

        console.print(f"[bold green]–ú–æ–¥—É–ª—å '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ {module_dir}![/]")
        console.print(f"[yellow]–î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:[/]")
        console.print(f"1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ manifest.yaml –∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–µ model_definitions")
        console.print(f"2. –í–∫–ª—é—á–∏—Ç–µ –º–æ–¥—É–ª—å: [cyan]./sdb.py module enable {name}[/]")
        console.print(f"3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç: [cyan]./sdb.py restart[/]")
        logger.success(f"–ú–æ–¥—É–ª—å {name} —Å–æ–∑–¥–∞–Ω –≤ {module_dir}")
    except Exception as e:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–¥—É–ª—è '{name}': {e}[/]")
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª—è {name}: {e}")
        shutil.rmtree(module_dir, ignore_errors=True)
        raise typer.Exit(code=1)

@module_app.command(name="list", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å.")
def list_modules_cmd():
    loader = _get_module_loader_sync()
    if not loader: 
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —É–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–≤–µ–¥–µ–Ω–æ –∏–∑ _get_module_loader_sync –∏–ª–∏ _get_module_loader_instance_async
        raise typer.Exit(code=1)
        
    table = Table(title="[bold cyan]–ú–æ–¥—É–ª–∏ SwiftDevBot[/]", show_header=True, header_style="bold magenta")
    table.add_column("–ò–º—è –ú–æ–¥—É–ª—è (name)", style="dim cyan", min_width=20)
    table.add_column("–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –ò–º—è", min_width=25)
    table.add_column("–í–µ—Ä—Å–∏—è", style="yellow")
    table.add_column("–¢–∏–ø", style="blue") # –î–æ–±–∞–≤–∏–º —Ç–∏–ø
    table.add_column("–°—Ç–∞—Ç—É—Å", style="green")
    table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", max_width=50, overflow="fold")

    if not loader.available_modules:
        console.print("[yellow]–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–æ–¥—É–ª—è (–≤ modules/ –∏–ª–∏ core/sys_modules/).[/]")
        return
        
    sorted_modules = sorted(loader.available_modules.values(), key=lambda m_info: (m_info.is_system_module, m_info.name))
    
    for module_info in sorted_modules:
        module_type = "–°–∏—Å—Ç–µ–º–Ω—ã–π" if module_info.is_system_module else "–ü–ª–∞–≥–∏–Ω"
        
        # –°—Ç–∞—Ç—É—Å –¥–ª—è –ø–ª–∞–≥–∏–Ω–æ–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç enabled_plugin_names
        # –°—Ç–∞—Ç—É—Å –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö - –æ–Ω–∏ "–≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏" (–Ω–æ –º–æ–≥—É—Ç –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫)
        if module_info.is_system_module:
            status_text = Text("–ê–∫—Ç–∏–≤–µ–Ω (—Å–∏—Å—Ç–µ–º–Ω—ã–π)", style="green") # –∏–ª–∏ "–ó–∞–≥—Ä—É–∂–µ–Ω", –µ—Å–ª–∏ –µ—Å—Ç—å is_loaded_successfully
            if module_info.is_loaded_successfully:
                status_text = Text("–ó–∞–≥—Ä—É–∂–µ–Ω ‚úÖ (—Å–∏—Å—Ç.)", style="green")
            elif module_info.error:
                 status_text = Text(f"–û—à–∏–±–∫–∞ ‚ö†Ô∏è (—Å–∏—Å—Ç.)", style="red")

        else: # –≠—Ç–æ –ø–ª–∞–≥–∏–Ω
            status_text = Text("–ê–∫—Ç–∏–≤–µ–Ω ‚úÖ", style="green") if module_info.name in loader.enabled_plugin_names else Text("–ù–µ–∞–∫—Ç–∏–≤–µ–Ω ‚ùå", style="red")
            if module_info.name in loader.enabled_plugin_names and module_info.is_loaded_successfully:
                status_text = Text("–ó–∞–≥—Ä—É–∂–µ–Ω ‚úÖ", style="green")
            elif module_info.name in loader.enabled_plugin_names and module_info.error:
                status_text = Text(f"–û—à–∏–±–∫–∞ ‚ö†Ô∏è", style="red")

        version_str = module_info.manifest.version if module_info.manifest else "[N/A]"
        display_name_str = module_info.manifest.display_name if module_info.manifest else module_info.name # fallback –Ω–∞ –∏–º—è –ø–∞–ø–∫–∏
        description_str = module_info.manifest.description if module_info.manifest and module_info.manifest.description else "-"
        
        table.add_row(module_info.name, display_name_str, version_str, module_type, status_text, description_str)
    console.print(table)

@module_app.command(name="info", help="–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ (–∏–∑ manifest).")
def info_module_cmd(module_name: str = typer.Argument(..., help="–ò–º—è –º–æ–¥—É–ª—è (–∏–∑ manifest.name –∏–ª–∏ –∏–º—è –ø–∞–ø–∫–∏).")):
    loader = _get_module_loader_sync()
    if not loader: raise typer.Exit(code=1)
    
    module_info = loader.get_module_info(module_name)
    
    if not module_info:
        console.print(f"[bold red]–û—à–∏–±–∫–∞: –ú–æ–¥—É–ª—å '{module_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.[/]")
        raise typer.Exit(code=1)
        
    if not module_info.manifest:
        console.print(f"[yellow]–ú–æ–¥—É–ª—å '{module_name}' –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ –∏–º–µ–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ (–∏–ª–∏ –æ–Ω –Ω–µ –±—ã–ª —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω).[/yellow]")
        console.print(f"  –ü—É—Ç—å –∫ –º–æ–¥—É–ª—é: {module_info.path}")
        console.print(f"  –¢–∏–ø: {'–°–∏—Å—Ç–µ–º–Ω—ã–π' if module_info.is_system_module else '–ü–ª–∞–≥–∏–Ω'}")
        if module_info.error: console.print(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {module_info.error}")
        raise typer.Exit(code=1)

    display_name_header = module_info.manifest.display_name or module_info.name
    console.print(Panel(f"[bold cyan]–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ: {display_name_header} ({module_name})[/]", expand=False, border_style="cyan"))
    
    try:
        import yaml
        manifest_str = yaml.dump(module_info.manifest.model_dump(mode='json'), indent=2, allow_unicode=True, sort_keys=False)
        syntax = Syntax(manifest_str, "yaml", theme="fruity", line_numbers=True, background_color="default")
    except ImportError:
        manifest_str = json.dumps(module_info.manifest.model_dump(mode='json'), indent=2, ensure_ascii=False)
        syntax = Syntax(manifest_str, "json", theme="fruity", line_numbers=True, background_color="default")
    except Exception as e_dump:
        console.print(f"[yellow]–ù–µ —É–¥–∞–ª–æ—Å—å –∫—Ä–∞—Å–∏–≤–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–∞–Ω–∏—Ñ–µ—Å—Ç: {e_dump}. –í—ã–≤–æ–¥ –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å:[/]")
        console.print(module_info.manifest.model_dump())
        raise typer.Exit(code=1)
    console.print(syntax)

@module_app.command(name="enable", help="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–≥–∏–Ω (–¥–æ–±–∞–≤–∏—Ç—å –≤ enabled_modules.json).")
def enable_module_cmd(module_name: str = typer.Argument(..., help="–ò–º—è –ø–ª–∞–≥–∏–Ω–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")):
    loader = _get_module_loader_sync()
    if not loader: raise typer.Exit(code=1)

    module_info = loader.get_module_info(module_name)
    if not module_info:
        console.print(f"[bold red]–û—à–∏–±–∫–∞: –ú–æ–¥—É–ª—å '{module_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è.[/]")
        console.print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ø–ª–∞–≥–∏–Ω—ã): {[m.name for m in loader.available_modules.values() if not m.is_system_module]}")
        raise typer.Exit(code=1)

    if module_info.is_system_module:
        console.print(f"[bold red]–û—à–∏–±–∫–∞: –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–æ–¥—É–ª–∏ ('{module_name}') –Ω–µ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ enable/disable. –û–Ω–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —è–¥—Ä–æ–º.[/]")
        raise typer.Exit(code=1)

    enabled_modules_file_path = loader._settings.core.enabled_modules_config_path
    
    if module_name in loader.enabled_plugin_names:
        console.print(f"[yellow]–ü–ª–∞–≥–∏–Ω '{module_name}' —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.[/]")
        return

    new_enabled_list = loader.enabled_plugin_names + [module_name]
    if _save_enabled_modules(new_enabled_list, enabled_modules_file_path):
        console.print(f"[bold green]–ü–ª–∞–≥–∏–Ω '{module_name}' —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω![/]")
        console.print(f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (`./sdb.py restart`).")
    else:
        console.print(f"[bold red]–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ '{enabled_modules_file_path}'.[/]")
        raise typer.Exit(code=1)

@module_app.command(name="disable", help="–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–≥–∏–Ω (—É–¥–∞–ª–∏—Ç—å –∏–∑ enabled_modules.json).")
def disable_module_cmd(module_name: str = typer.Argument(..., help="–ò–º—è –ø–ª–∞–≥–∏–Ω–∞ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")):
    loader = _get_module_loader_sync()
    if not loader: raise typer.Exit(code=1)

    module_info = loader.get_module_info(module_name)
    if not module_info:
        console.print(f"[bold red]–û—à–∏–±–∫–∞: –ú–æ–¥—É–ª—å '{module_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.[/]")
        raise typer.Exit(code=1)

    if module_info.is_system_module:
        console.print(f"[bold red]–û—à–∏–±–∫–∞: –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–æ–¥—É–ª–∏ ('{module_name}') –Ω–µ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ enable/disable.[/]")
        raise typer.Exit(code=1)

    enabled_modules_file_path = loader._settings.core.enabled_modules_config_path
    
    if module_name not in loader.enabled_plugin_names:
        console.print(f"[yellow]–ü–ª–∞–≥–∏–Ω '{module_name}' –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω.[/]")
        return
    
    new_enabled_list = [m for m in loader.enabled_plugin_names if m != module_name]
    if _save_enabled_modules(new_enabled_list, enabled_modules_file_path):
        console.print(f"[bold green]–ü–ª–∞–≥–∏–Ω '{module_name}' —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω![/]")
        console.print(f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (`./sdb.py restart`).")
    else:
        console.print(f"[bold red]–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ '{enabled_modules_file_path}'.[/]")
        raise typer.Exit(code=1)

async def _clean_tables_module_async_internal(module_name: str, loader: Any, called_from_uninstall: bool = False) -> bool:
    if not called_from_uninstall:
        console.print(Panel(f"[bold red]–£–î–ê–õ–ï–ù–ò–ï –¢–ê–ë–õ–ò–¶ –ú–û–î–£–õ–Ø: {module_name}[/]", expand=False, border_style="red"))

    module_info = loader.get_module_info(module_name)
    if not module_info: # –ú–∞–Ω–∏—Ñ–µ—Å—Ç –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —É —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–¥—É–ª—è
        console.print(f"[bold red]–û—à–∏–±–∫–∞: –ú–æ–¥—É–ª—å '{module_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.[/]")
        return False
        
    if not module_info.manifest:
         console.print(f"[yellow]–ú–æ–¥—É–ª—å '{module_name}' –Ω–µ –∏–º–µ–µ—Ç –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.[/yellow]")
         return True # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å

    model_definitions_paths = module_info.manifest.model_definitions
    if not model_definitions_paths:
        console.print(f"[yellow]–ú–æ–¥—É–ª—å '{module_name}' –Ω–µ –¥–µ–∫–ª–∞—Ä–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ ('model_definitions'). –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.[/]")
        return True

    if not called_from_uninstall:
        console.print(f"–ú–æ–¥—É–ª—å '{module_name}' –¥–µ–∫–ª–∞—Ä–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø—É—Ç–∏ –∫ –º–æ–¥–µ–ª—è–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü:")
        for path_str in model_definitions_paths: console.print(f"  - {path_str}")
        if not confirm_action(f"–í—ã –ê–ë–°–û–õ–Æ–¢–ù–û —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –£–î–ê–õ–ò–¢–¨ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π –º–æ–¥—É–ª—è '{module_name}'? –≠—Ç–æ [bold red]–ù–ï–û–ë–†–ê–¢–ò–ú–û[/]!", default_choice=False, abort_on_false=True):
            return False

    models_to_drop: List[Type[SDBBaseAlchemyModel]] = []
    failed_imports: List[str] = []
    console.print(f"\n–ò–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–æ–≤ –º–æ–¥–µ–ª–µ–π –¥–ª—è '{module_name}'...")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–æ–¥—É–ª—è
    # –≠—Ç–æ –≤–∞–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ model_definitions –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º–∏ (—Ö–æ—Ç—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–µ)
    # –ù–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ –æ–∂–∏–¥–∞–µ–º –ø–æ–ª–Ω—ã–µ –ø—É—Ç–∏ —Ç–∏–ø–∞ "modules.my_plugin.models.MyTable"
    # –∏–ª–∏ "core.sys_modules.my_sys_mod.models.SysTable"
    
    for import_path_str in model_definitions_paths:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ—á–∫–∞ –≤ –ø—É—Ç–∏, –∏–Ω–∞—á–µ —ç—Ç–æ –Ω–µ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
            if '.' not in import_path_str:
                failed_imports.append(import_path_str)
                console.print(f"  [yellow]–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:[/yellow] '{import_path_str}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –ø—É—Ç–µ–º –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ Python-–º–æ–¥–µ–ª–∏.")
                continue

            module_path_part, class_name = import_path_str.rsplit('.', 1)
            imported_py_module = importlib.import_module(module_path_part)
            model_class_obj = getattr(imported_py_module, class_name) # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫–ª–∞—Å—Å –∏ –æ–Ω –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç SDBBaseAlchemyModel
            if isinstance(model_class_obj, type) and issubclass(model_class_obj, SDBBaseAlchemyModel) and hasattr(model_class_obj, '__table__'):
                models_to_drop.append(model_class_obj) # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å, –∞ –Ω–µ —ç–∫–∑–µ–º–ø–ª—è—Ä
                console.print(f"  [green]–£—Å–ø–µ—Ö:[/green] {import_path_str} (—Ç–∞–±–ª–∏—Ü–∞: {model_class_obj.__tablename__})")
            else:
                failed_imports.append(import_path_str)
                console.print(f"  [yellow]–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:[/yellow] '{import_path_str}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –º–æ–¥–µ–ª—å—é SQLAlchemy, –Ω–∞—Å–ª–µ–¥—É–µ–º–æ–π –æ—Ç SDBBaseModel.")
        except Exception as e_import:
            failed_imports.append(import_path_str)
            console.print(f"  [red]–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è '{import_path_str}':[/red] {type(e_import).__name__} - {e_import}")

    if failed_imports:
        console.print(f"\n[bold yellow]–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {len(failed_imports)} –∏–∑ {len(model_definitions_paths)} –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è '{module_name}'.[/]")
        if not models_to_drop: # –ï—Å–ª–∏ –í–û–û–ë–©–ï –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
            console.print("[bold red]–ù–µ—Ç —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π. –û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü –ø—Ä–µ—Ä–≤–∞–Ω–∞.[/]")
            return False
        # –ï—Å–ª–∏ —á–∞—Å—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∞—Å—å, –∞ —á–∞—Å—Ç—å –Ω–µ—Ç - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ª–∏ —Å —Ç–µ–º, —á—Ç–æ –µ—Å—Ç—å
        if not called_from_uninstall and not confirm_action(f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è {len(models_to_drop)} —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π?", default_choice=False, abort_on_false=True):
            return False
        elif called_from_uninstall: # –ï—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å –¥–µ–∏–Ω—Å—Ç–∞–ª–ª—è—Ü–∏–∏, —Ç–æ –ª—É—á—à–µ –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å —á–∞—Å—Ç–∏—á–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º
            console.print("[bold yellow]–ò–∑-–∑–∞ –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –¥–µ–∏–Ω—Å—Ç–∞–ª–ª—è—Ü–∏–∏ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. "
                          "–£–¥–∞–ª–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—ã –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.[/]")
            return False # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, —á—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –±—ã–ª–æ –ø–æ–ª–Ω—ã–º/—É—Å–ø–µ—à–Ω—ã–º

    if not models_to_drop: # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        console.print(f"[bold yellow]–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–æ–¥—É–ª—è '{module_name}'.[/]")
        return True # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—á–µ–≥–æ –±—ã–ª–æ —É–¥–∞–ª—è—Ç—å

    if not called_from_uninstall: # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —á–∞—Å—Ç—å uninstall
        console.print("\n[bold blue]–°–ª–µ–¥—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã SQLAlchemy –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ë–î:[/]")
        for model_cls_to_drop in models_to_drop: console.print(f"  - [cyan]{model_cls_to_drop.__tablename__}[/cyan]")
        if not confirm_action(f"–ü–û–°–õ–ï–î–ù–ï–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï: –£–¥–∞–ª–∏—Ç—å {len(models_to_drop)} —Ç–∞–±–ª–∏—Ü –¥–ª—è '{module_name}'?", default_choice=False, abort_on_false=True):
            return False

    settings_obj, db_m, _ = await get_sdb_services_for_cli(init_db=True)
    if not (settings_obj and db_m):
        console.print("[bold red]–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å DBManager –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü.[/]")
        return False
    try:
        console.print(f"\n[magenta]–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è '{module_name}'...[/magenta]")
        await db_m.drop_specific_module_tables(models_to_drop) # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ö–õ–ê–°–°–û–í –º–æ–¥–µ–ª–µ–π
        console.print(f"[bold green]–¢–∞–±–ª–∏—Ü—ã –¥–ª—è '{module_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.[/]")
        if not called_from_uninstall:
            console.print("[yellow]–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: Alembic –Ω–µ –∑–Ω–∞–µ—Ç –æ–± —ç—Ç–æ–º —É–¥–∞–ª–µ–Ω–∏–∏. "
                          "–ï—Å–ª–∏ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–∏—Ö —Ç–∞–±–ª–∏—Ü –≤ –±—É–¥—É—â–µ–º, "
                          "–≤–∞–º –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–µ–≤–∏–∑–∏—é –∏–ª–∏ '–∑–∞—à—Ç–∞–º–ø–æ–≤–∞—Ç—å' —Å–æ—Å—Ç–æ—è–Ω–∏–µ Alembic.[/yellow]")
        return True
    except Exception as e_drop:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü –¥–ª—è '{module_name}': {e_drop}[/]")
        return False
    finally:
        if db_m: await db_m.dispose()

@module_app.command(name="clean-tables", help="[–û–ü–ê–°–ù–û] –£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã –º–æ–¥—É–ª—è –∏–∑ –ë–î (—Å–æ–≥–ª–∞—Å–Ω–æ manifest).")
def clean_tables_module_cmd_wrapper(module_name: str = typer.Argument(..., help="–ò–º—è –º–æ–¥—É–ª—è, —á—å–∏ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–∏—Ç—å.")):
    try:
        loader = asyncio.run(_get_module_loader_instance_async())
        if not loader: raise typer.Exit(code=1)
        if not asyncio.run(_clean_tables_module_async_internal(module_name=module_name, loader=loader)):
            raise typer.Exit(code=1)
    except typer.Exit: raise
    except Exception as e:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –≤ 'module clean-tables': {e}[/]")
        raise typer.Exit(code=1)

@module_app.command(name="uninstall", help="[–û–ü–ê–°–ù–û] –£–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å (—Ñ–∞–π–ª—ã –∏, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ–≥–æ –¥–∞–Ω–Ω—ã–µ).")
def uninstall_module_cmd_wrapper(
    module_name: str = typer.Argument(..., help="–ò–º—è –º–æ–¥—É–ª—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è."),
    remove_data: bool = typer.Option(False, "--remove-data/--keep-data",
                                   help="–£–¥–∞–ª–∏—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª—è (—Ç–∞–±–ª–∏—Ü—ã –ë–î). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –î–ê–ù–ù–´–ï –°–û–•–†–ê–ù–Ø–Æ–¢–°–Ø.")
):
    try:
        asyncio.run(_uninstall_module_async(module_name=module_name, remove_data=remove_data))
    except typer.Exit: raise
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ 'module uninstall': {e}[/]")
        raise typer.Exit(code=1)

async def _uninstall_module_async(module_name: str, remove_data: bool):
    console.print(Panel(f"[bold red]–£–î–ê–õ–ï–ù–ò–ï –ú–û–î–£–õ–Ø: {module_name}[/]", expand=False, border_style="red"))

    loader = await _get_module_loader_instance_async()
    if not loader: raise typer.Exit(code=1)

    module_info = loader.get_module_info(module_name)
    if not module_info:
        console.print(f"[bold red]–û—à–∏–±–∫–∞: –ú–æ–¥—É–ª—å '{module_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.[/]")
        raise typer.Exit(code=1)

    if module_info.is_system_module:
        console.print(f"[bold red]–û—à–∏–±–∫–∞: –°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–¥—É–ª—å ('{module_name}') –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.[/]")
        raise typer.Exit(code=1)

    console.print(f"–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–ª–∞–≥–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: [cyan]{module_info.path}[/]")
    if not confirm_action(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –£–î–ê–õ–ò–¢–¨ –§–ê–ô–õ–´ –ø–ª–∞–≥–∏–Ω–∞ '{module_name}'?", default_choice=False, abort_on_false=True):
        return

    data_cleaned_successfully = True # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if remove_data:
        console.print(f"\n–ó–∞–ø—Ä–æ—à–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞ '{module_name}'.")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ —É–¥–∞–ª—è—Ç—å (–¥–µ–∫–ª–∞—Ä–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ –º–æ–¥–µ–ª–∏)
        if module_info.manifest and module_info.manifest.model_definitions:
            if confirm_action(f"–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–∞ '{module_name}' –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ [bold red]–ü–û–¢–ï–†–ï –í–°–ï–• –ï–ì–û –¢–ê–ë–õ–ò–¶ –í –ë–î[/]. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", default_choice=False, abort_on_false=True):
                data_cleaned_successfully = await _clean_tables_module_async_internal(module_name, loader, called_from_uninstall=True)
                if not data_cleaned_successfully:
                    console.print(f"[bold red]–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–∞ '{module_name}'.[/]")
                    if not confirm_action("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–ª–∞–≥–∏–Ω–∞, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö?", default_choice=False, abort_on_false=True):
                        console.print("[bold yellow]–£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω–µ–Ω–æ.[/bold yellow]")
                        raise typer.Exit(code=1)
            else: # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è —É–¥–∞–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ
                data_cleaned_successfully = False # –î–∞–Ω–Ω—ã–µ –Ω–µ —É–¥–∞–ª–µ–Ω—ã –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                console.print("[yellow]–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–æ. –§–∞–π–ª—ã –ø–ª–∞–≥–∏–Ω–∞ –≤—Å–µ –µ—â–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã (–µ—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ).[/yellow]")
        else: # –ù–µ—Ç –º–æ–¥–µ–ª–µ–π –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ
             console.print(f"[dim]–ü–ª–∞–≥–∏–Ω '{module_name}' –Ω–µ –¥–µ–∫–ª–∞—Ä–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ. –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (—Ç–∞–±–ª–∏—Ü) –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.[/dim]")
             # data_cleaned_successfully –æ—Å—Ç–∞–µ—Ç—Å—è True
    else:
        console.print(f"\n[yellow]–î–∞–Ω–Ω—ã–µ –ø–ª–∞–≥–∏–Ω–∞ '{module_name}' (—Ç–∞–±–ª–∏—Ü—ã –ë–î) –Ω–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã (–æ–ø—Ü–∏—è --keep-data).[/yellow]")
        data_cleaned_successfully = False # –î–∞–Ω–Ω—ã–µ –Ω–µ —É–¥–∞–ª—è–ª–∏—Å—å

    console.print(f"\n–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞ '{module_name}' (—É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ enabled_modules.json)...")
    enabled_modules_file_path = loader._settings.core.enabled_modules_config_path
    if module_name in loader.enabled_plugin_names:
        new_enabled_list = [m for m in loader.enabled_plugin_names if m != module_name]
        if _save_enabled_modules(new_enabled_list, enabled_modules_file_path):
            console.print(f"[green]–ü–ª–∞–≥–∏–Ω '{module_name}' —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.[/]")
        else:
            console.print(f"[bold red]–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–∞ '{module_name}' (–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å enabled_modules.json).[/]")
            if not confirm_action("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–ª–∞–≥–∏–Ω–∞, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏?", default_choice=False, abort_on_false=True):
                console.print("[bold yellow]–£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω–µ–Ω–æ.[/bold yellow]")
                raise typer.Exit(code=1)
    else:
        console.print(f"[dim]–ü–ª–∞–≥–∏–Ω '{module_name}' –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω.[/dim]")

    module_dir_path = module_info.path
    console.print(f"\n–£–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–ª–∞–≥–∏–Ω–∞: [cyan]{module_dir_path}[/]")
    if not confirm_action(f"[bold red]–ü–û–°–õ–ï–î–ù–ï–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –£–¥–∞–ª–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é '{module_dir_path}'? –≠—Ç–æ –ù–ï–û–ë–†–ê–¢–ò–ú–û.[/bold red]", default_choice=False, abort_on_false=True):
        return

    try:
        shutil.rmtree(module_dir_path)
        console.print(f"[bold green]–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–ª–∞–≥–∏–Ω–∞ '{module_dir_path}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.[/]")
    except Exception as e_rmtree:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{module_dir_path}': {e_rmtree}[/]")
        raise typer.Exit(code=1)

    console.print(f"\n[bold green]–ü–ª–∞–≥–∏–Ω '{module_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.[/]")
    if remove_data and not data_cleaned_successfully: # –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –æ–Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å
         console.print("[bold yellow]–û–¥–Ω–∞–∫–æ, –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–∞ (—Ç–∞–±–ª–∏—Ü) –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.[/bold yellow]")
    elif not remove_data: # –ï—Å–ª–∏ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        console.print("[dim](–î–∞–Ω–Ω—ã–µ –ø–ª–∞–≥–∏–Ω–∞ –Ω–µ —É–¥–∞–ª—è–ª–∏—Å—å).[/dim]")
    console.print("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É.")



@module_app.command(name="list-available", help="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥—É–ª–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏ –ª–æ–∫–∞–ª—å–Ω–æ.")
def list_available_modules_cmd(
    local_only: bool = typer.Option(False, "--local-only", help="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏"),
    show_details: bool = typer.Option(False, "--details", "-d", help="–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª—è—Ö"),
    format: str = typer.Option("table", "--format", "-f", help="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: table, json, yaml")
):
    try:
        asyncio.run(_list_available_modules_async(local_only, show_details, format))
    except typer.Exit: raise
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ 'module list-available': {e}[/]")
        raise typer.Exit(code=1)

async def _list_available_modules_async(local_only: bool, show_details: bool, format: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏"""
    console.print(Panel("[bold blue]–ü–û–ò–°–ö –î–û–°–¢–£–ü–ù–´–• –ú–û–î–£–õ–ï–ô[/]", expand=False, border_style="blue"))
    
    loader = await _get_module_loader_instance_async()
    if not loader: raise typer.Exit(code=1)
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
    local_modules = loader.get_all_modules_info()
    
    if local_only:
        console.print("[yellow]–ü–æ–∫–∞–∑—ã–≤–∞—é —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏...[/]")
        await _display_modules(local_modules, "–õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏", show_details, format)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
    console.print("[cyan]–õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏:[/]")
    await _display_modules(local_modules, "–õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏", show_details, format)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    console.print("\n[cyan]–ú–æ–¥—É–ª–∏ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:[/]")
    
    # –ü–æ–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    repo_modules = [
        {"name": "example-module", "version": "1.0.0", "description": "–ü—Ä–∏–º–µ—Ä –º–æ–¥—É–ª—è –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"},
        {"name": "test-plugin", "version": "2.1.0", "description": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–≥–∏–Ω"},
    ]
    
    if repo_modules:
        for module in repo_modules:
            console.print(f"  üì¶ {module['name']} v{module['version']} - {module['description']}")
    else:
        console.print("[dim]–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.[/]")
    
    console.print("[dim]–í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º.[/]")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    enabled_count = sum(1 for m in local_modules if m.is_enabled)
    total_count = len(local_modules)
    
    console.print(f"\n[bold green]–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:[/]")
    console.print(f"  üì¶ –í—Å–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π: {total_count}")
    console.print(f"  ‚úÖ –í–∫–ª—é—á–µ–Ω–æ: {enabled_count}")
    console.print(f"  ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ: {total_count - enabled_count}")

async def _display_modules(modules: List[Any], title: str, show_details: bool, format: str):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π"""
    if not modules:
        console.print(f"[dim]–ù–µ—Ç {title.lower()}[/]")
        return
    
    if format == "json":
        await _display_modules_json(modules, show_details)
    elif format == "yaml":
        await _display_modules_yaml(modules, show_details)
    else:
        await _display_modules_table(modules, show_details)

async def _display_modules_table(modules: List[Any], show_details: bool):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–æ–¥—É–ª–∏ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã"""
    from rich.table import Table
    
    table = Table(title="–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏")
    table.add_column("–ò–º—è", style="cyan", no_wrap=True)
    table.add_column("–°—Ç–∞—Ç—É—Å", style="green")
    table.add_column("–í–µ—Ä—Å–∏—è", style="yellow")
    table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="white")
    
    if show_details:
        table.add_column("–ê–≤—Ç–æ—Ä", style="blue")
        table.add_column("–¢–∏–ø", style="magenta")
    
    for module in modules:
        status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if module.is_enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
        if module.error:
            status = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {module.error}"
        
        version = module.manifest.version if module.manifest else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        description = module.manifest.description if module.manifest else "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
        
        row = [module.name, status, version, description]
        
        if show_details:
            author = module.manifest.author if module.manifest else "–ù–µ —É–∫–∞–∑–∞–Ω"
            module_type = "–°–∏—Å—Ç–µ–º–Ω—ã–π" if module.is_system_module else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π"
            row.extend([author, module_type])
        
        table.add_row(*row)
    
    console.print(table)

async def _display_modules_json(modules: List[Any], show_details: bool):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–æ–¥—É–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"""
    import json
    
    modules_data = []
    for module in modules:
        module_data = {
            "name": module.name,
            "enabled": module.is_enabled,
            "error": module.error,
            "is_system_module": module.is_system_module
        }
        
        if module.manifest:
            module_data.update({
                "version": module.manifest.version,
                "description": module.manifest.description,
                "author": module.manifest.author,
                "website": module.manifest.website,
                "email": module.manifest.email,
                "license": module.manifest.license
            })
        
        modules_data.append(module_data)
    
    console.print(json.dumps(modules_data, indent=2, ensure_ascii=False))

async def _display_modules_yaml(modules: List[Any], show_details: bool):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–æ–¥—É–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YAML"""
    import yaml
    
    modules_data = []
    for module in modules:
        module_data = {
            "name": module.name,
            "enabled": module.is_enabled,
            "error": module.error,
            "is_system_module": module.is_system_module
        }
        
        if module.manifest:
            module_data.update({
                "version": module.manifest.version,
                "description": module.manifest.description,
                "author": module.manifest.author,
                "website": module.manifest.website,
                "email": module.manifest.email,
                "license": module.manifest.license
            })
        
        modules_data.append(module_data)
    
    console.print(yaml.dump(modules_data, default_flow_style=False, allow_unicode=True))

@module_app.command(name="install", help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.")
def install_module_cmd(
    module_name: str = typer.Argument(..., help="–ò–º—è –º–æ–¥—É–ª—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏."),
    source: str = typer.Option("local", "--source", "-s", help="–ò—Å—Ç–æ—á–Ω–∏–∫ –º–æ–¥—É–ª—è: local, repo, url"),
    url: Optional[str] = typer.Option(None, "--url", help="URL –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥—É–ª—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞")
):
    try:
        asyncio.run(_install_module_async(module_name, source, url))
    except typer.Exit: raise
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ 'module install': {e}[/]")
        raise typer.Exit(code=1)

async def _install_module_async(module_name: str, source: str, url: Optional[str]):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å"""
    console.print(Panel(f"[bold blue]–£–°–¢–ê–ù–û–í–ö–ê –ú–û–î–£–õ–Ø: {module_name}[/]", expand=False, border_style="blue"))
    
    if source == "local":
        await _install_local_module(module_name)
    elif source == "repo":
        console.print("[cyan]–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...[/]")
        
        # –ü–æ–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏
        repo_modules = [
            {"name": "example-module", "version": "1.0.0", "description": "–ü—Ä–∏–º–µ—Ä –º–æ–¥—É–ª—è"},
            {"name": "test-plugin", "version": "2.1.0", "description": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–≥–∏–Ω"},
        ]
        
        # –ò—â–µ–º –º–æ–¥—É–ª—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        module_found = None
        for repo_module in repo_modules:
            if repo_module["name"] == module_name:
                module_found = repo_module
                break
        
        if module_found:
            console.print(f"[green]–ù–∞–π–¥–µ–Ω –º–æ–¥—É–ª—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: {module_found['name']} v{module_found['version']}[/]")
            console.print(f"[cyan]–û–ø–∏—Å–∞–Ω–∏–µ: {module_found['description']}[/]")
            
            if confirm_action(f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å '{module_name}' –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è?"):
                # –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
                console.print(f"[green]–ú–æ–¥—É–ª—å '{module_name}' –≥–æ—Ç–æ–≤ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è![/]")
                console.print("[dim]–í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.[/]")
            else:
                console.print("[yellow]–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.[/]")
        else:
            console.print(f"[yellow]–ú–æ–¥—É–ª—å '{module_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.[/]")
            console.print("[cyan]–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:[/]")
            for repo_module in repo_modules:
                console.print(f"  üì¶ {repo_module['name']} v{repo_module['version']} - {repo_module['description']}")
    elif source == "url" and url:
        await _install_module_from_url(module_name, url)
    else:
        console.print("[bold red]–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL.[/]")
        raise typer.Exit(code=1)

async def _install_local_module(module_name: str):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å (–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –¥—Ä—É–≥–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)"""
    console.print(f"[cyan]–ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è '{module_name}'...[/]")
    
    # –ü–æ–∏—Å–∫ –º–æ–¥—É–ª—è –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
    search_dirs = [
        Path.home() / "modules",
        Path.home() / ".local" / "modules",
        Path.cwd() / "external_modules",
        Path.cwd() / "modules_backup",
    ]
    
    module_found = False
    for search_dir in search_dirs:
        if search_dir.exists():
            module_path = search_dir / module_name
            if module_path.exists() and module_path.is_dir():
                console.print(f"[green]–ù–∞–π–¥–µ–Ω –º–æ–¥—É–ª—å –≤: {module_path}[/]")
                
                # –ö–æ–ø–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
                target_path = PROJECT_ROOT / "modules" / module_name
                if target_path.exists():
                    if not confirm_action(f"–ú–æ–¥—É–ª—å '{module_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å?"):
                        console.print("[yellow]–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.[/]")
                        return
                    import shutil
                    shutil.rmtree(target_path)
                
                try:
                    import shutil
                    shutil.copytree(module_path, target_path)
                    console.print(f"[bold green]–ú–æ–¥—É–ª—å '{module_name}' —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω![/]")
                    module_found = True
                    break
                except Exception as e:
                    console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥—É–ª—è: {e}[/]")
                    return
    
    if not module_found:
        console.print(f"[yellow]–ú–æ–¥—É–ª—å '{module_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö.[/]")
        console.print("[dim]–î–æ–±–∞–≤—å—Ç–µ –º–æ–¥—É–ª—å –≤ –æ–¥–Ω—É –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:[/]")
        for search_dir in search_dirs:
            console.print(f"  - {search_dir}")

async def _install_module_from_url(module_name: str, url: str):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å –∏–∑ URL"""
    console.print(f"[cyan]–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è '{module_name}' –∏–∑ URL: {url}[/]")
    
    try:
        import requests
        import tempfile
        import zipfile
        import shutil
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_path = Path(temp_dir)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            console.print("[cyan]–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è...[/]")
            response = requests.get(url, timeout=30)
            response.raise_for_status()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            zip_path = temp_path / f"{module_name}.zip"
            with open(zip_path, 'wb') as f:
                f.write(response.content)
            
            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
            console.print("[cyan]–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –º–æ–¥—É–ª—è...[/]")
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(temp_path)
            
            # –ò—â–µ–º –ø–∞–ø–∫—É —Å –º–æ–¥—É–ª–µ–º
            module_dir = None
            for item in temp_path.iterdir():
                if item.is_dir() and (item.name == module_name or item.name.endswith(f"-{module_name}")):
                    module_dir = item
                    break
            
            if not module_dir:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–∞–ø–∫—É —Å –∏–º–µ–Ω–µ–º –º–æ–¥—É–ª—è, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–∞–ø–∫—É
                for item in temp_path.iterdir():
                    if item.is_dir():
                        module_dir = item
                        break
            
            if not module_dir:
                console.print("[bold red]–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞–ø–∫—É —Å –º–æ–¥—É–ª–µ–º –≤ –∞—Ä—Ö–∏–≤–µ.[/]")
                return
            
            # –ö–æ–ø–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
            target_path = PROJECT_ROOT / "modules" / module_name
            if target_path.exists():
                if not confirm_action(f"–ú–æ–¥—É–ª—å '{module_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å?"):
                    console.print("[yellow]–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.[/]")
                    return
                shutil.rmtree(target_path)
            
            shutil.copytree(module_dir, target_path)
            console.print(f"[bold green]–ú–æ–¥—É–ª—å '{module_name}' —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ URL![/]")
            
    except requests.RequestException as e:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è: {e}[/]")
    except zipfile.BadZipFile:
        console.print("[bold red]–û—à–∏–±–∫–∞: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ZIP –∞—Ä—Ö–∏–≤–æ–º.[/]")
    except Exception as e:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–¥—É–ª—è: {e}[/]")

@module_app.command(name="update", help="–û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.")
def update_module_cmd(
    module_name: str = typer.Argument(..., help="–ò–º—è –º–æ–¥—É–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∏–ª–∏ '--all'."),
    force: bool = typer.Option(False, "--force", help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")
):
    try:
        asyncio.run(_update_module_async(module_name, force))
    except typer.Exit: raise
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ 'module update': {e}[/]")
        raise typer.Exit(code=1)

async def _update_module_async(module_name: str, force: bool):
    """–û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å"""
    console.print(Panel(f"[bold blue]–û–ë–ù–û–í–õ–ï–ù–ò–ï –ú–û–î–£–õ–Ø: {module_name}[/]", expand=False, border_style="blue"))
    
    loader = await _get_module_loader_instance_async()
    if not loader: raise typer.Exit(code=1)
    
    if module_name == "--all":
        console.print("[cyan]–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π...[/]")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
        active_modules = [m for m in loader.get_all_modules_info() if m.is_enabled]
        
        if not active_modules:
            console.print("[yellow]–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.[/]")
            return
        
        updated_count = 0
        for module in active_modules:
            try:
                if await _update_single_module(module.name, force):
                    updated_count += 1
            except Exception as e:
                console.print(f"[red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª—è '{module.name}': {e}[/]")
        
        console.print(f"[bold green]–û–±–Ω–æ–≤–ª–µ–Ω–æ –º–æ–¥—É–ª–µ–π: {updated_count}/{len(active_modules)}[/]")
        return
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –º–æ–¥—É–ª—è
    await _update_single_module(module_name, force)

async def _update_single_module(module_name: str, force: bool):
    """–û–±–Ω–æ–≤–∏—Ç—å –æ–¥–∏–Ω –º–æ–¥—É–ª—å"""
    console.print(f"[cyan]–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è '{module_name}'...[/]")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–æ–¥—É–ª—å
    module_path = PROJECT_ROOT / "modules" / module_name
    if not module_path.exists():
        console.print(f"[bold red]–ú–æ–¥—É–ª—å '{module_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.[/]")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if not force:
        console.print("[cyan]–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –º–æ–¥—É–ª—è...[/]")
        
        # –ü–æ–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤ –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π
        console.print("[yellow]–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.[/]")
        console.print("[dim]–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.[/]")
        console.print("[cyan]–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:[/]")
        console.print("  - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        console.print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é –Ω–∞ —Å–∞–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
        return False
    
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –º–æ–¥—É–ª—å
    console.print(f"[cyan]–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è '{module_name}'...[/]")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ
    console.print(f"[green]–ú–æ–¥—É–ª—å '{module_name}' –≥–æ—Ç–æ–≤ –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é.[/]")
    console.print("[dim]–í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.[/]")
    
    return True

@module_app.command(name="sync-deps", help="–°–æ–±—Ä–∞—Ç—å Python-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–æ–¥—É–ª–µ–π.")
def sync_deps_cmd(
    output_file: Optional[str] = typer.Option(None, "--output", "-o", help="–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"),
    format: str = typer.Option("requirements", "--format", "-f", help="–§–æ—Ä–º–∞—Ç: requirements, pip-tools")
):
    try:
        asyncio.run(_sync_deps_async(output_file, format))
    except typer.Exit: raise
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ 'module sync-deps': {e}[/]")
        raise typer.Exit(code=1)

async def _sync_deps_async(output_file: Optional[str], format: str):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–æ–¥—É–ª–µ–π"""
    console.print(Panel("[bold blue]–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –ú–û–î–£–õ–ï–ô[/]", expand=False, border_style="blue"))
    
    loader = await _get_module_loader_instance_async()
    if not loader: raise typer.Exit(code=1)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
    active_modules = [m for m in loader.get_all_modules_info() if m.is_enabled]
    
    if not active_modules:
        console.print("[yellow]–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.[/]")
        return
    
    console.print(f"[cyan]–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è {len(active_modules)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π...[/]")
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    all_dependencies = set()
    module_deps = {}
    
    for module in active_modules:
        python_deps = []
        sdb_deps = []
        
        if module.manifest:
            # –ü–æ–ª—É—á–∞–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            if hasattr(module.manifest, 'python_requirements') and module.manifest.python_requirements:
                python_deps = module.manifest.python_requirements
            elif hasattr(module.manifest, 'dependencies') and module.manifest.dependencies:
                python_deps = module.manifest.dependencies
            
            # –ü–æ–ª—É—á–∞–µ–º SDB –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            if hasattr(module.manifest, 'sdb_module_dependencies') and module.manifest.sdb_module_dependencies:
                sdb_deps = module.manifest.sdb_module_dependencies
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            all_module_deps = python_deps + sdb_deps
            
            if all_module_deps:
                all_dependencies.update(all_module_deps)
                module_deps[module.name] = all_module_deps
                console.print(f"  üì¶ {module.name}: {', '.join(all_module_deps)}")
            else:
                console.print(f"  üì¶ {module.name}: –Ω–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        else:
            console.print(f"  üì¶ {module.name}: –º–∞–Ω–∏—Ñ–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if not all_dependencies:
        console.print("[yellow]–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª—è—Ö.[/]")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if format == "requirements":
        result = "\n".join(sorted(all_dependencies))
    elif format == "pip-tools":
        result = "# requirements.txt –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π\n"
        result += "\n".join(sorted(all_dependencies))
    else:
        console.print(f"[bold red]–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {format}[/]")
        raise typer.Exit(code=1)
    
    # –í—ã–≤–æ–¥–∏–º –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if output_file:
        try:
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(result)
            console.print(f"[green]–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {output_file}[/]")
        except Exception as e:
            console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ —Ñ–∞–π–ª: {e}[/]")
            raise typer.Exit(code=1)
    else:
        console.print(f"\n[bold green]–°–æ–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:[/]")
        console.print(result)
    
    console.print(f"\n[cyan]–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:[/]")
    console.print(f"  üì¶ –ú–æ–¥—É–ª–µ–π —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏: {len(module_deps)}")
    console.print(f"  üìã –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {len(all_dependencies)}")

if __name__ == "__main__":
    module_app()