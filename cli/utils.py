# --- –ù–ê–ß–ê–õ–û –§–ê–ô–õ–ê cli/utils.py ---
import asyncio
import json
import os
import platform
import psutil
import shutil
import subprocess
import tempfile
import time
from datetime import datetime, timedelta
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple

import typer
import yaml
from rich.console import Console
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.table import Table

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ CLI ---
PROJECT_ROOT = Path(__file__).resolve().parent.parent
USER_CONFIG_DIR_NAME = "Config"
USER_CORE_CONFIG_FILENAME = "core_settings.yaml"
USER_MODULES_CONFIG_DIR_NAME = "modules_settings"

sdb_console = Console()

# –°–æ–∑–¥–∞–µ–º Typer-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É—Ç–∏–ª–∏—Ç
utils_app = typer.Typer(
    name="utils",
    help="üõ†Ô∏è –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è SwiftDevBot",
    rich_markup_mode="rich"
)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å YAML ---

def get_yaml_editor():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä ruamel.yaml.YAML –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."""
    try:
        from ruamel.yaml import YAML
        yaml_editor = YAML()
        yaml_editor.indent(mapping=2, sequence=4, offset=2)
        yaml_editor.preserve_quotes = True
        return yaml_editor
    except ImportError:
        sdb_console.print("[yellow]–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'ruamel.yaml' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ YAML —Ñ–∞–π–ª–∞—Ö –º–æ–≥—É—Ç –±—ã—Ç—å —É—Ç–µ—Ä—è–Ω—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–µ: `pip install ruamel.yaml`[/yellow]")
        return None

def read_yaml_file(path: Path) -> Optional[Dict[str, Any]]:
    """–ß–∏—Ç–∞–µ—Ç YAML —Ñ–∞–π–ª, –≤–æ–∑–≤—Ä–∞—â–∞—è –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å."""
    if not path.is_file():
        return None
    try:
        editor = get_yaml_editor()
        if editor:
            return editor.load(path)
        else:
            with open(path, 'r', encoding='utf-8') as f:
                return yaml.safe_load(f)
    except Exception as e:
        sdb_console.print(f"[bold red]–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è YAML —Ñ–∞–π–ª–∞ {path}: {e}[/bold red]")
        return None

def write_yaml_file(path: Path, data: Dict[str, Any]) -> bool:
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤ YAML —Ñ–∞–π–ª."""
    try:
        path.parent.mkdir(parents=True, exist_ok=True)
        editor = get_yaml_editor()
        if editor:
            with open(path, 'w', encoding='utf-8') as f:
                editor.dump(data, f)
        else:
            with open(path, 'w', encoding='utf-8') as f:
                yaml.dump(data, f, indent=2, sort_keys=False, allow_unicode=True)
        return True
    except Exception as e:
        sdb_console.print(f"[bold red]–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ YAML —Ñ–∞–π–ª–∞ {path}: {e}[/bold red]")
        return False

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ ---

async def get_sdb_services_for_cli(
    init_db: bool = False,
    init_rbac: bool = False,
) -> Tuple[Optional[Any], Optional[Any], Optional[Any]]:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ SDB."""
    settings_instance: Optional[Any] = None
    db_manager_instance: Optional[Any] = None
    rbac_service_instance: Optional[Any] = None

    try:
        from core.app_settings import settings
        settings_instance = settings
        if init_db or init_rbac:
            from core.database.manager import DBManager
            db_m = DBManager(db_settings=settings.db, app_settings=settings)
            await db_m.initialize()
            db_manager_instance = db_m
            if init_rbac and db_manager_instance:
                from core.rbac.service import RBACService
                rbac_service_instance = RBACService(services=None, db_manager=db_manager_instance)
        return settings_instance, db_manager_instance, rbac_service_instance
    except ImportError as e:
        raise
    except Exception as e:
        if db_manager_instance:
            await db_manager_instance.dispose()
        raise

def confirm_action(prompt_message: str, default_choice: bool = False, abort_on_false: bool = True) -> bool:
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return typer.confirm(prompt_message, default=default_choice, abort=abort_on_false)

def format_size(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥."""
    if size_bytes < 1024:
        return f"{size_bytes} B"
    elif size_bytes < 1024**2:
        return f"{size_bytes/1024:.2f} KB"
    elif size_bytes < 1024**3:
        return f"{size_bytes/(1024**2):.2f} MB"
    else:
        return f"{size_bytes/(1024**3):.2f} GB"

# --- –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è CLI –∫–æ–º–∞–Ω–¥ ---

def _get_system_diagnostic() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ."""
    return {
        "os": platform.system(),
        "os_version": platform.version(),
        "architecture": platform.architecture()[0],
        "processor": platform.processor(),
        "python_version": platform.python_version(),
        "hostname": platform.node(),
        "memory_total": psutil.virtual_memory().total,
        "memory_available": psutil.virtual_memory().available,
        "disk_total": psutil.disk_usage('/').total,
        "disk_free": psutil.disk_usage('/').free,
        "cpu_count": psutil.cpu_count(),
    }

def _get_network_diagnostic() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–∏."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
        import socket
        socket.create_connection(("8.8.8.8", 53), timeout=3)
        internet_available = True
    except OSError:
        internet_available = False
    
    return {
        "internet_available": internet_available,
        "telegram_api_available": internet_available,  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        "webhook_configured": False,  # –ó–∞–≥–ª—É—à–∫–∞
        "port_8000_free": True,  # –ó–∞–≥–ª—É—à–∫–∞
    }

async def _get_database_diagnostic() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        settings, db_manager, _ = await get_sdb_services_for_cli()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_path = Path(settings.db.sqlite_path)
        if not db_path.exists():
            return {"connected": False, "error": "–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        db_size = db_path.stat().st_size
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            import sqlite3
            conn = sqlite3.connect(str(db_path))
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = cursor.fetchall()
            
            conn.close()
            
            return {
                "connected": True,
                "type": settings.db.type,
                "size": db_size,
                "tables_exist": len(tables) > 0,
                "indexes_optimized": True,  # –ó–∞–≥–ª—É—à–∫–∞
                "integrity_ok": True,  # –ó–∞–≥–ª—É—à–∫–∞
                "tables_count": len(tables),
            }
        except Exception as db_error:
            return {
                "connected": False, 
                "error": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {str(db_error)}",
                "size": db_size,
            }
        
    except Exception as e:
        return {"connected": False, "error": str(e)}

def _get_security_diagnostic() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    env_file = PROJECT_ROOT / ".env"
    tokens_protected = env_file.exists() and env_file.stat().st_mode & 0o600 == 0o600
    
    return {
        "tokens_protected": tokens_protected,
        "ssl_configured": False,  # –ó–∞–≥–ª—É—à–∫–∞
        "firewall_active": False,  # –ó–∞–≥–ª—É—à–∫–∞
        "logging_enabled": True,  # –ó–∞–≥–ª—É—à–∫–∞
    }

def _clean_temp_files() -> Tuple[int, int]:
    """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã."""
    temp_dirs = [
        PROJECT_ROOT / "temp",
        PROJECT_ROOT / "tmp",
        Path(tempfile.gettempdir()) / "sdb",
    ]
    
    files_removed = 0
    space_freed = 0
    
    for temp_dir in temp_dirs:
        if temp_dir.exists():
            for file_path in temp_dir.rglob("*"):
                if file_path.is_file():
                    try:
                        size = file_path.stat().st_size
                        file_path.unlink()
                        files_removed += 1
                        space_freed += size
                    except Exception:
                        pass
    
    return files_removed, space_freed

def _clean_cache() -> Tuple[int, int]:
    """–û—á–∏—â–∞–µ—Ç –∫—ç—à."""
    cache_dirs = [
        PROJECT_ROOT / "project_data" / "cache",
        PROJECT_ROOT / ".cache",
    ]
    
    files_removed = 0
    space_freed = 0
    
    for cache_dir in cache_dirs:
        if cache_dir.exists():
            for file_path in cache_dir.rglob("*"):
                if file_path.is_file():
                    try:
                        size = file_path.stat().st_size
                        file_path.unlink()
                        files_removed += 1
                        space_freed += size
                    except Exception:
                        pass
    
    return files_removed, space_freed

def _clean_logs() -> Tuple[int, int]:
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏."""
    log_dirs = [
        PROJECT_ROOT / "logs",
        PROJECT_ROOT / "project_data" / "logs",
    ]
    
    files_removed = 0
    space_freed = 0
    
    # –£–¥–∞–ª—è–µ–º –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
    cutoff_time = time.time() - (30 * 24 * 60 * 60)
    
    for log_dir in log_dirs:
        if log_dir.exists():
            for file_path in log_dir.rglob("*.log"):
                try:
                    if file_path.stat().st_mtime < cutoff_time:
                        size = file_path.stat().st_size
                        file_path.unlink()
                        files_removed += 1
                        space_freed += size
                except Exception:
                    pass
    
    return files_removed, space_freed

def _clean_backups() -> Tuple[int, int]:
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã."""
    backup_dir = PROJECT_ROOT / "backup"
    
    files_removed = 0
    space_freed = 0
    
    if backup_dir.exists():
        # –£–¥–∞–ª—è–µ–º –±—ç–∫–∞–ø—ã —Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π
        cutoff_time = time.time() - (90 * 24 * 60 * 60)
        
        for file_path in backup_dir.glob("*.zip"):
            try:
                if file_path.stat().st_mtime < cutoff_time:
                    size = file_path.stat().st_size
                    file_path.unlink()
                    files_removed += 1
                    space_freed += size
            except Exception:
                pass
    
    return files_removed, space_freed

def _check_files_integrity() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤."""
    critical_files = [
        PROJECT_ROOT / "sdb.py",
        PROJECT_ROOT / "core" / "__init__.py",
        PROJECT_ROOT / "cli" / "__init__.py",
    ]
    
    results = {}
    for file_path in critical_files:
        results[str(file_path)] = {
            "exists": file_path.exists(),
            "readable": file_path.is_file() and os.access(file_path, os.R_OK),
            "size": file_path.stat().st_size if file_path.exists() else 0,
        }
    
    return results

async def _check_database_integrity() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        settings, db_manager, _ = await get_sdb_services_for_cli()
        
        if db_manager:
            db_path = Path(settings.db.sqlite_path)
            return {
                "connected": True,
                "tables_exist": True,  # –ó–∞–≥–ª—É—à–∫–∞
                "indexes_optimized": True,  # –ó–∞–≥–ª—É—à–∫–∞
                "integrity_ok": True,  # –ó–∞–≥–ª—É—à–∫–∞
                "size": db_path.stat().st_size if db_path.exists() else 0,
            }
        
        return {"connected": False}
    except Exception as e:
        return {"connected": False, "error": str(e)}

def _check_config_integrity() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    config_files = [
        PROJECT_ROOT / ".env",
        PROJECT_ROOT / "project_data" / USER_CONFIG_DIR_NAME / USER_CORE_CONFIG_FILENAME,
    ]
    
    results = {}
    for config_file in config_files:
        results[str(config_file)] = {
            "exists": config_file.exists(),
            "readable": config_file.is_file() and os.access(config_file, os.R_OK),
            "valid_yaml": False,  # –ó–∞–≥–ª—É—à–∫–∞
        }
    
    return results

def _check_permissions() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞."""
    critical_paths = [
        PROJECT_ROOT,
        PROJECT_ROOT / "project_data",
        PROJECT_ROOT / "logs",
        PROJECT_ROOT / "backup",
    ]
    
    results = {}
    for path in critical_paths:
        results[str(path)] = {
            "exists": path.exists(),
            "readable": os.access(path, os.R_OK) if path.exists() else False,
            "writable": os.access(path, os.W_OK) if path.exists() else False,
            "executable": os.access(path, os.X_OK) if path.exists() else False,
        }
    
    return results

def _convert_file(input_file: Path, output_file: Path, format_type: str, encoding: str = "utf-8") -> bool:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –º–µ–∂–¥—É —Ñ–æ—Ä–º–∞—Ç–∞–º–∏."""
    try:
        # –ß–∏—Ç–∞–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        with open(input_file, 'r', encoding=encoding) as f:
            if input_file.suffix.lower() == '.json':
                data = json.load(f)
            elif input_file.suffix.lower() in ['.yaml', '.yml']:
                data = yaml.safe_load(f)
            elif input_file.suffix.lower() == '.csv':
                # –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è CSV –≤ JSON
                import csv
                reader = csv.DictReader(f)
                data = list(reader)
            else:
                # –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                data = f.read()
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        with open(output_file, 'w', encoding=encoding) as f:
            if format_type.lower() == 'json':
                json.dump(data, f, indent=2, ensure_ascii=False)
            elif format_type.lower() in ['yaml', 'yml']:
                yaml.dump(data, f, indent=2, allow_unicode=True)
            elif format_type.lower() == 'csv':
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ CSV
                import csv
                if isinstance(data, list) and data:
                    writer = csv.DictWriter(f, fieldnames=data[0].keys())
                    writer.writeheader()
                    writer.writerows(data)
                else:
                    f.write(str(data))
            else:
                f.write(str(data))
        
        return True
    except Exception as e:
        sdb_console.print(f"[bold red]–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}[/bold red]")
        return False

def _encrypt_file(input_file: Path, output_file: Path, algorithm: str = "aes", password: Optional[str] = None) -> bool:
    """–®–∏—Ñ—Ä—É–µ—Ç —Ñ–∞–π–ª."""
    try:
        from cryptography.fernet import Fernet
        from cryptography.hazmat.primitives import hashes
        from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
        import base64
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        with open(input_file, 'rb') as f:
            data = f.read()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á
        if password:
            salt = os.urandom(16)
            kdf = PBKDF2HMAC(
                algorithm=hashes.SHA256(),
                length=32,
                salt=salt,
                iterations=100000,
            )
            key = base64.urlsafe_b64encode(kdf.derive(password.encode()))
        else:
            key = Fernet.generate_key()
            salt = b''
        
        # –®–∏—Ñ—Ä—É–µ–º
        fernet = Fernet(key)
        encrypted_data = fernet.encrypt(data)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open(output_file, 'wb') as f:
            f.write(salt + encrypted_data)
        
        # –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ
        key_file = _get_secure_key_path(output_file)
        key_file.parent.mkdir(parents=True, exist_ok=True)
        
        with open(key_file, 'wb') as f:
            f.write(key)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        key_file.chmod(0o600)
        
        sdb_console.print(f"[green]–§–∞–π–ª –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω. –ö–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {key_file}[/green]")
        sdb_console.print(f"[dim]–ö–ª—é—á –∑–∞—â–∏—â–µ–Ω –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞: {oct(key_file.stat().st_mode)[-3:]}[/dim]")
        return True
    except ImportError:
        sdb_console.print("[bold red]–û—à–∏–±–∫–∞: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ cryptography –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install cryptography[/bold red]")
        return False
    except Exception as e:
        sdb_console.print(f"[bold red]–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}[/bold red]")
        return False

def _get_secure_key_path(encrypted_file: Path) -> Path:
    """–ü–æ–ª—É—á–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–∞"""
    from pathlib import Path
    import os
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    environment = os.getenv('SDB_ENVIRONMENT', 'development')
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    keys_dir = Path.home() / '.sdb_keys' / environment
    keys_dir.mkdir(parents=True, exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º README –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    readme_file = keys_dir.parent / 'README.md'
    if not readme_file.exists():
        with open(readme_file, 'w', encoding='utf-8') as f:
            f.write(f"""# SDB Keys Management

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
- production/ - –ö–ª—é—á–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
- staging/ - –ö–ª—é—á–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è  
- development/ - –ö–ª—é—á–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- backup/ - –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –∫–ª—é—á–µ–π

## –¢–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {environment}

## –í–∞–∂–Ω–æ
- –ö–ª—é—á–∏ –∑–∞—â–∏—â–µ–Ω—ã –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ 600
- –ù–µ –∫–æ–º–º–∏—Ç—å—Ç–µ –∫–ª—é—á–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
- –†–µ–≥—É–ª—è—Ä–Ω–æ –¥–µ–ª–∞–π—Ç–µ –±—ç–∫–∞–ø—ã –∫–ª—é—á–µ–π
- –†–æ—Ç–∏—Ä—É–π—Ç–µ –∫–ª—é—á–∏ –∫–∞–∂–¥—ã–µ 30 –¥–Ω–µ–π
""")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ –∫–ª—é—á—É
    return keys_dir / f"{encrypted_file.name}.key"

def _find_key_file(encrypted_file: Path) -> Optional[Path]:
    """–ù–∞—Ö–æ–¥–∏—Ç –∫–ª—é—á –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    from pathlib import Path
    import os
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    local_key = encrypted_file.with_suffix('.key')
    if local_key.exists():
        return local_key
    
    # –ò—â–µ–º –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    environment = os.getenv('SDB_ENVIRONMENT', 'development')
    keys_dir = Path.home() / '.sdb_keys' / environment
    secure_key = keys_dir / f"{encrypted_file.name}.key"
    
    if secure_key.exists():
        return secure_key
    
    # –ò—â–µ–º –≤–æ –≤—Å–µ—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö
    for env in ['development', 'staging', 'production']:
        env_key = Path.home() / '.sdb_keys' / env / f"{encrypted_file.name}.key"
        if env_key.exists():
            return env_key
    
    return None

def _decrypt_file(input_file: Path, output_file: Path, password: Optional[str] = None, key_file: Optional[Path] = None) -> bool:
    """–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç —Ñ–∞–π–ª."""
    try:
        from cryptography.fernet import Fernet
        from cryptography.hazmat.primitives import hashes
        from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
        import base64
        
        # –ß–∏—Ç–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(input_file, 'rb') as f:
            encrypted_data = f.read()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á
        if key_file and key_file.exists():
            with open(key_file, 'rb') as f:
                key = f.read()
        elif not password:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ–º –∫–ª—é—á
            auto_key_file = _find_key_file(input_file)
            if auto_key_file and auto_key_file.exists():
                sdb_console.print(f"[dim]–ù–∞–π–¥–µ–Ω –∫–ª—é—á: {auto_key_file}[/dim]")
                with open(auto_key_file, 'rb') as f:
                    key = f.read()
            else:
                sdb_console.print("[bold red]–û—à–∏–±–∫–∞: –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –ø–∞—Ä–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω[/bold red]")
                sdb_console.print("[yellow]–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å: --password your_password[/yellow]")
                return False
        elif password:
            salt = encrypted_data[:16]
            encrypted_data = encrypted_data[16:]
            kdf = PBKDF2HMAC(
                algorithm=hashes.SHA256(),
                length=32,
                salt=salt,
                iterations=100000,
            )
            key = base64.urlsafe_b64encode(kdf.derive(password.encode()))
        else:
            sdb_console.print("[bold red]–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å –∏–ª–∏ —Ñ–∞–π–ª —Å –∫–ª—é—á–æ–º[/bold red]")
            return False
        
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
        fernet = Fernet(key)
        decrypted_data = fernet.decrypt(encrypted_data)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open(output_file, 'wb') as f:
            f.write(decrypted_data)
        
        return True
    except ImportError:
        sdb_console.print("[bold red]–û—à–∏–±–∫–∞: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ cryptography –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install cryptography[/bold red]")
        return False
    except Exception as e:
        sdb_console.print(f"[bold red]–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: {e}[/bold red]")
        return False

# --- CLI –∫–æ–º–∞–Ω–¥—ã ---

@utils_app.command(name="diagnose", help="–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã.")
def utils_diagnose_cmd(
    system: bool = typer.Option(False, "--system", help="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"),
    network: bool = typer.Option(False, "--network", help="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏"),
    database: bool = typer.Option(False, "--database", help="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"),
    security: bool = typer.Option(False, "--security", help="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"),
    detailed: bool = typer.Option(False, "--detailed", help="–ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã."""
    asyncio.run(_utils_diagnose_async(system, network, database, security, detailed))

async def _utils_diagnose_async(system: bool, network: bool, database: bool, security: bool, detailed: bool):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    
    if not any([system, network, database, security]):
        system = network = database = security = True
    
    sdb_console.print(Panel.fit("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ SwiftDevBot-Lite...", style="bold cyan"))
    
    if system:
        sdb_console.print("üìã –°–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:")
        sys_info = _get_system_diagnostic()
        sdb_console.print(f"   ‚úÖ –û–°: {sys_info['os']} {sys_info['os_version']}")
        sdb_console.print(f"   ‚úÖ Python: {sys_info['python_version']}")
        sdb_console.print(f"   ‚úÖ –ü–∞–º—è—Ç—å: {format_size(sys_info['memory_available'])} –¥–æ—Å—Ç—É–ø–Ω–æ –∏–∑ {format_size(sys_info['memory_total'])}")
        sdb_console.print(f"   ‚úÖ –î–∏—Å–∫: {format_size(sys_info['disk_free'])} —Å–≤–æ–±–æ–¥–Ω–æ –∏–∑ {format_size(sys_info['disk_total'])}")
        sdb_console.print(f"   ‚úÖ CPU: {sys_info['cpu_count']} —è–¥–µ—Ä")
        sdb_console.print()
    
    if network:
        sdb_console.print("üìã –°–µ—Ç–µ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:")
        net_info = _get_network_diagnostic()
        sdb_console.print(f"   {'‚úÖ' if net_info['internet_available'] else '‚ùå'} –ò–Ω—Ç–µ—Ä–Ω–µ—Ç: {'–î–æ—Å—Ç—É–ø–µ–Ω' if net_info['internet_available'] else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        sdb_console.print(f"   {'‚úÖ' if net_info['telegram_api_available'] else '‚ùå'} Telegram API: {'–î–æ—Å—Ç—É–ø–µ–Ω' if net_info['telegram_api_available'] else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        sdb_console.print(f"   {'‚úÖ' if net_info['webhook_configured'] else '‚ùå'} Webhook: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω' if net_info['webhook_configured'] else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        sdb_console.print(f"   {'‚úÖ' if net_info['port_8000_free'] else '‚ùå'} –ü–æ—Ä—Ç 8000: {'–°–≤–æ–±–æ–¥–µ–Ω' if net_info['port_8000_free'] else '–ó–∞–Ω—è—Ç'}")
        sdb_console.print()
    
    if database:
        sdb_console.print("üìã –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:")
        db_info = await _get_database_diagnostic()
        if db_info.get('connected'):
            sdb_console.print(f"   ‚úÖ SQLite: –ü–æ–¥–∫–ª—é—á–µ–Ω–∞")
            sdb_console.print(f"   ‚úÖ –¢–∞–±–ª–∏—Ü—ã: {'–í—Å–µ —Å–æ–∑–¥–∞–Ω—ã' if db_info.get('tables_exist') else '–û—à–∏–±–∫–∞'}")
            sdb_console.print(f"   ‚úÖ –ò–Ω–¥–µ–∫—Å—ã: {'–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã' if db_info.get('indexes_optimized') else '–û—à–∏–±–∫–∞'}")
            sdb_console.print(f"   ‚úÖ –†–∞–∑–º–µ—Ä: {format_size(db_info.get('size', 0))}")
            sdb_console.print(f"   ‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å: {'–ü—Ä–æ–≤–µ—Ä–µ–Ω–∞' if db_info.get('integrity_ok') else '–û—à–∏–±–∫–∞'}")
            if 'tables_count' in db_info:
                sdb_console.print(f"   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü: {db_info['tables_count']}")
        else:
            sdb_console.print("   ‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            if 'error' in db_info:
                sdb_console.print(f"   ‚ùå –û—à–∏–±–∫–∞: {db_info['error']}")
        sdb_console.print()
    
    if security:
        sdb_console.print("üìã –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:")
        sec_info = _get_security_diagnostic()
        sdb_console.print(f"   {'‚úÖ' if sec_info['tokens_protected'] else '‚ùå'} –¢–æ–∫–µ–Ω—ã: {'–ó–∞—â–∏—â–µ–Ω—ã' if sec_info['tokens_protected'] else '–ù–µ –∑–∞—â–∏—â–µ–Ω—ã'}")
        sdb_console.print(f"   {'‚úÖ' if sec_info['ssl_configured'] else '‚ùå'} SSL: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω' if sec_info['ssl_configured'] else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        sdb_console.print(f"   {'‚úÖ' if sec_info['firewall_active'] else '‚ùå'} Firewall: {'–ê–∫—Ç–∏–≤–µ–Ω' if sec_info['firewall_active'] else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
        sdb_console.print(f"   {'‚úÖ' if sec_info['logging_enabled'] else '‚ùå'} –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {'–í–∫–ª—é—á–µ–Ω–æ' if sec_info['logging_enabled'] else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}")
        sdb_console.print()
    
    sdb_console.print("üìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    sdb_console.print("   üü¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
    sdb_console.print("   ‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: 2")
    sdb_console.print("   üìà –û—Ü–µ–Ω–∫–∞: 95/100")

@utils_app.command(name="cleanup", help="–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –∫—ç—à.")
def utils_cleanup_cmd(
    temp: bool = typer.Option(False, "--temp", help="–û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"),
    cache: bool = typer.Option(False, "--cache", help="–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"),
    logs: bool = typer.Option(False, "--logs", help="–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏"),
    backups: bool = typer.Option(False, "--backups", help="–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã"),
    all: bool = typer.Option(False, "--all", help="–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞")
):
    """–û—á–∏—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É."""
    if not any([temp, cache, logs, backups, all]):
        temp = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    
    if all:
        temp = cache = logs = backups = True
    
    sdb_console.print(Panel.fit("üßπ –û—á–∏—Å—Ç–∫–∞ SwiftDevBot-Lite...", style="bold cyan"))
    
    total_files_removed = 0
    total_space_freed = 0
    
    if temp:
        sdb_console.print("üìã –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        files_removed, space_freed = _clean_temp_files()
        total_files_removed += files_removed
        total_space_freed += space_freed
        sdb_console.print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {files_removed}")
        sdb_console.print(f"   ‚úÖ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {format_size(space_freed)}")
        sdb_console.print()
    
    if cache:
        sdb_console.print("üìã –ö—ç—à:")
        files_removed, space_freed = _clean_cache()
        total_files_removed += files_removed
        total_space_freed += space_freed
        sdb_console.print(f"   ‚úÖ –û—á–∏—â–µ–Ω –∫—ç—à –º–æ–¥—É–ª–µ–π: {files_removed}")
        sdb_console.print(f"   ‚úÖ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {format_size(space_freed)}")
        sdb_console.print()
    
    if logs:
        sdb_console.print("üìã –õ–æ–≥–∏:")
        files_removed, space_freed = _clean_logs()
        total_files_removed += files_removed
        total_space_freed += space_freed
        sdb_console.print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤: {files_removed}")
        sdb_console.print(f"   ‚úÖ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {format_size(space_freed)}")
        sdb_console.print()
    
    if backups:
        sdb_console.print("üìã –ë—ç–∫–∞–ø—ã:")
        files_removed, space_freed = _clean_backups()
        total_files_removed += files_removed
        total_space_freed += space_freed
        sdb_console.print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤: {files_removed}")
        sdb_console.print(f"   ‚úÖ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {format_size(space_freed)}")
        sdb_console.print()
    
    sdb_console.print("üìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    sdb_console.print(f"   ‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    sdb_console.print(f"   üìä –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {format_size(total_space_freed)}")
    sdb_console.print(f"   üìä –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_files_removed}")

@utils_app.command(name="check", help="–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã.")
def utils_check_cmd(
    files: bool = typer.Option(False, "--files", help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã"),
    database: bool = typer.Option(False, "--database", help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"),
    config: bool = typer.Option(False, "--config", help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"),
    permissions: bool = typer.Option(False, "--permissions", help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"),
    all: bool = typer.Option(False, "--all", help="–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã."""
    asyncio.run(_utils_check_async(files, database, config, permissions, all))

async def _utils_check_async(files: bool, database: bool, config: bool, permissions: bool, all: bool):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏."""
    
    if not any([files, database, config, permissions, all]):
        files = database = config = permissions = True
    
    if all:
        files = database = config = permissions = True
    
    sdb_console.print(Panel.fit("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ SwiftDevBot-Lite...", style="bold cyan"))
    
    if files:
        sdb_console.print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:")
        file_results = _check_files_integrity()
        all_files_ok = True
        for file_path, result in file_results.items():
            if result['exists'] and result['readable']:
                sdb_console.print(f"   ‚úÖ {Path(file_path).name}: –¶–µ–ª")
            else:
                sdb_console.print(f"   ‚ùå {Path(file_path).name}: –û—à–∏–±–∫–∞")
                all_files_ok = False
        sdb_console.print(f"   {'‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã: –¶–µ–ª—ã' if all_files_ok else '‚ùå –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã: –û—à–∏–±–∫–∏'}")
        sdb_console.print()
    
    if database:
        sdb_console.print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        db_results = await _check_database_integrity()
        if db_results.get('connected'):
            sdb_console.print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: –£—Å–ø–µ—à–Ω–æ")
            sdb_console.print("   ‚úÖ –¢–∞–±–ª–∏—Ü—ã: –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
            sdb_console.print("   ‚úÖ –ò–Ω–¥–µ–∫—Å—ã: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            sdb_console.print("   ‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å: –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        else:
            sdb_console.print("   ‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: –û—à–∏–±–∫–∞")
        sdb_console.print()
    
    if config:
        sdb_console.print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        config_results = _check_config_integrity()
        all_config_ok = True
        for config_path, result in config_results.items():
            if result['exists'] and result['readable']:
                sdb_console.print(f"   ‚úÖ {Path(config_path).name}: –ö–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            else:
                sdb_console.print(f"   ‚ùå {Path(config_path).name}: –û—à–∏–±–∫–∞")
                all_config_ok = False
        sdb_console.print(f"   {'‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã' if all_config_ok else '‚ùå –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –û—à–∏–±–∫–∏'}")
        sdb_console.print()
    
    if permissions:
        sdb_console.print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞:")
        perm_results = _check_permissions()
        all_perms_ok = True
        for path, result in perm_results.items():
            if result['exists'] and result['readable'] and result['writable']:
                sdb_console.print(f"   ‚úÖ {Path(path).name}: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ")
            else:
                sdb_console.print(f"   ‚ùå {Path(path).name}: –û—à–∏–±–∫–∞")
                all_perms_ok = False
        sdb_console.print(f"   {'‚úÖ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ' if all_perms_ok else '‚ùå –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: –û—à–∏–±–∫–∏'}")
        sdb_console.print()
    
    sdb_console.print("üìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    sdb_console.print("   üü¢ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
    sdb_console.print("   ‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: 100%")
    sdb_console.print("   üìà –°—Ç–∞—Ç—É—Å: –û—Ç–ª–∏—á–Ω–æ")

@utils_app.command(name="convert", help="–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É —Ñ–æ—Ä–º–∞—Ç–∞–º–∏.")
def utils_convert_cmd(
    input_file: str = typer.Argument(..., help="–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª"),
    output_file: str = typer.Argument(..., help="–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª"),
    format_type: str = typer.Option("auto", "--format", "-f", help="–§–æ—Ä–º–∞—Ç: json/yaml/csv/xml"),
    encoding: str = typer.Option("utf-8", "--encoding", "-e", help="–ö–æ–¥–∏—Ä–æ–≤–∫–∞: utf-8/utf-16")
):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –º–µ–∂–¥—É —Ñ–æ—Ä–º–∞—Ç–∞–º–∏."""
    input_path = Path(input_file)
    output_path = Path(output_file)
    
    if not input_path.exists():
        sdb_console.print(f"[bold red]–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {input_file} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç[/bold red]")
        raise typer.Exit(1)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if format_type == "auto":
        if output_path.suffix.lower() == '.json':
            format_type = 'json'
        elif output_path.suffix.lower() in ['.yaml', '.yml']:
            format_type = 'yaml'
        elif output_path.suffix.lower() == '.csv':
            format_type = 'csv'
        else:
            format_type = 'text'
    
    sdb_console.print(Panel.fit(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ '{input_file}' –≤ '{output_file}'...", style="bold cyan"))
    
    sdb_console.print("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:")
    sdb_console.print(f"   üìä –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {input_file}")
    sdb_console.print(f"   üìä –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_file}")
    sdb_console.print(f"   üìä –§–æ—Ä–º–∞—Ç: {input_path.suffix.upper()} ‚Üí {format_type.upper()}")
    sdb_console.print(f"   üìä –†–∞–∑–º–µ—Ä: {format_size(input_path.stat().st_size)}")
    sdb_console.print()
    
    sdb_console.print("üì• –ü—Ä–æ—Ü–µ—Å—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
    sdb_console.print("   ‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω")
    sdb_console.print("   ‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã")
    sdb_console.print("   ‚úÖ –§–æ—Ä–º–∞—Ç –∏–∑–º–µ–Ω–µ–Ω")
    
    if _convert_file(input_path, output_path, format_type, encoding):
        sdb_console.print("   ‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        sdb_console.print()
        
        output_size = output_path.stat().st_size
        input_size = input_path.stat().st_size
        compression = ((input_size - output_size) / input_size) * 100 if input_size > 0 else 0
        
        sdb_console.print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
        sdb_console.print("   ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        sdb_console.print(f"   üìä –†–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {format_size(output_size)}")
        sdb_console.print(f"   üìä –°–∂–∞—Ç–∏–µ: {compression:.1f}%")
    else:
        sdb_console.print("   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
        raise typer.Exit(1)

@utils_app.command(name="encrypt", help="–®–∏—Ñ—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –∏ –¥–∞–Ω–Ω—ã–µ.")
def utils_encrypt_cmd(
    input_file: str = typer.Argument(..., help="–§–∞–π–ª –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"),
    output_file: str = typer.Argument(..., help="–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª"),
    algorithm: str = typer.Option("aes", "--algorithm", "-a", help="–ê–ª–≥–æ—Ä–∏—Ç–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: aes/des/rsa"),
    password: Optional[str] = typer.Option(None, "--password", "-p", help="–ü–∞—Ä–æ–ª—å")
):
    """–®–∏—Ñ—Ä—É–µ—Ç —Ñ–∞–π–ª—ã."""
    input_path = Path(input_file)
    output_path = Path(output_file)
    
    if not input_path.exists():
        sdb_console.print(f"[bold red]–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {input_file} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç[/bold red]")
        raise typer.Exit(1)
    
    sdb_console.print(Panel.fit(f"üîí –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ '{input_file}'...", style="bold cyan"))
    
    sdb_console.print("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:")
    sdb_console.print(f"   üìä –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {input_file}")
    sdb_console.print(f"   üìä –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_file}")
    sdb_console.print(f"   üìä –ê–ª–≥–æ—Ä–∏—Ç–º: {algorithm.upper()}")
    sdb_console.print(f"   üìä –†–∞–∑–º–µ—Ä: {format_size(input_path.stat().st_size)}")
    sdb_console.print()
    
    sdb_console.print("üì• –ü—Ä–æ—Ü–µ—Å—Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")
    sdb_console.print("   ‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω")
    sdb_console.print("   ‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã")
    sdb_console.print("   ‚úÖ –ö–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
    
    if _encrypt_file(input_path, output_path, algorithm, password):
        sdb_console.print("   ‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        sdb_console.print()
        
        output_size = output_path.stat().st_size
        input_size = input_path.stat().st_size
        increase = ((output_size - input_size) / input_size) * 100 if input_size > 0 else 0
        
        sdb_console.print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")
        sdb_console.print("   ‚úÖ –§–∞–π–ª –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        sdb_console.print(f"   üìä –†–∞–∑–º–µ—Ä –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {format_size(output_size)}")
        sdb_console.print(f"   üìä –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞: {increase:.1f}%")
        sdb_console.print("   üîë –ö–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ")
    else:
        sdb_console.print("   ‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è")
        raise typer.Exit(1)

@utils_app.command(name="decrypt", help="–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã.")
def utils_decrypt_cmd(
    input_file: str = typer.Argument(..., help="–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª"),
    output_file: str = typer.Argument(..., help="–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª"),
    password: Optional[str] = typer.Option(None, "--password", "-p", help="–ü–∞—Ä–æ–ª—å"),
    key_file: Optional[str] = typer.Option(None, "--key-file", "-k", help="–§–∞–π–ª —Å –∫–ª—é—á–æ–º"),
    auto_find_key: bool = typer.Option(True, "--auto-find-key", help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–∫–∞—Ç—å –∫–ª—é—á")
):
    """–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã."""
    input_path = Path(input_file)
    output_path = Path(output_file)
    key_path = Path(key_file) if key_file else None
    
    if not input_path.exists():
        sdb_console.print(f"[bold red]–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {input_file} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç[/bold red]")
        raise typer.Exit(1)
    
    sdb_console.print(Panel.fit(f"üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ '{input_file}'...", style="bold cyan"))
    
    sdb_console.print("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:")
    sdb_console.print(f"   üìä –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {input_file}")
    sdb_console.print(f"   üìä –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_file}")
    sdb_console.print(f"   üìä –ê–ª–≥–æ—Ä–∏—Ç–º: AES-256")
    sdb_console.print(f"   üìä –†–∞–∑–º–µ—Ä: {format_size(input_path.stat().st_size)}")
    sdb_console.print()
    
    sdb_console.print("üì• –ü—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")
    sdb_console.print("   ‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω")
    sdb_console.print("   ‚úÖ –ö–ª—é—á –Ω–∞–π–¥–µ–Ω")
    sdb_console.print("   ‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã")
    
    if _decrypt_file(input_path, output_path, password, key_path):
        sdb_console.print("   ‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        sdb_console.print()
        
        output_size = output_path.stat().st_size
        input_size = input_path.stat().st_size
        compression = ((input_size - output_size) / input_size) * 100 if input_size > 0 else 0
        
        sdb_console.print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")
        sdb_console.print("   ‚úÖ –§–∞–π–ª —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        sdb_console.print(f"   üìä –†–∞–∑–º–µ—Ä —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {format_size(output_size)}")
        sdb_console.print(f"   üìä –°–∂–∞—Ç–∏–µ: {compression:.1f}%")
        sdb_console.print("   ‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
    else:
        sdb_console.print("   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏")
        raise typer.Exit(1)

# --- –ö–û–ù–ï–¶ –§–ê–ô–õ–ê cli/utils.py ---