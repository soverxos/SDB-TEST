# --- –ù–ê–ß–ê–õ–û –§–ê–ô–õ–ê cli/run.py ---
import asyncio
import os
import subprocess
import sys
import time
from pathlib import Path

import typer
from loguru import logger as global_logger
from rich.panel import Panel

from .process import PID_FILENAME, _is_process_running # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ —Å–æ—Å–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞

sdb_console = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ sdb.py

def run_command(
    debug: bool = typer.Option(
        False, "--debug", "-d",
        help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ (—É–≤–µ–ª–∏—á–∏—Ç —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ DEBUG)."
    ),
    background: bool = typer.Option(
        False, "--background", "-b",
        help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (–¥–µ–º–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å)."
    )
):
    """
    üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å Telegram –±–æ—Ç–∞ SDB.
    """
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ —É—Å–∫–æ—Ä–∏—Ç—å –∑–∞–ø—É—Å–∫ CLI
    from core.app_settings import settings
    from core.bot_entrypoint import run_sdb_bot
    
    global sdb_console
    if sdb_console is None:
        from rich.console import Console
        sdb_console = Console()

    project_root = Path(__file__).resolve().parent.parent
    pid_file_path = settings.core.project_data_path / PID_FILENAME

    if pid_file_path.exists():
        try:
            with open(pid_file_path, "r") as f:
                pid = int(f.read().strip())
            if _is_process_running(pid):
                sdb_console.print(f"[yellow]SDB –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: {pid}). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'sdb stop' –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.[/yellow]")
                raise typer.Exit(code=1)
        except (OSError, ValueError):
            sdb_console.print(f"[yellow]–û–±–Ω–∞—Ä—É–∂–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π PID-—Ñ–∞–π–ª ({pid_file_path}). –£–¥–∞–ª–µ–Ω–∏–µ...[/yellow]")
            pid_file_path.unlink(missing_ok=True)
        except Exception as e_pid_check:
             sdb_console.print(f"[red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ PID-—Ñ–∞–π–ª–∞: {e_pid_check}[/red]")

    if debug:
        sdb_console.print(Panel(f"[bold yellow]–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ DEBUG.[/]",
                                title="SDB Run (Debug Mode Requested)", expand=False, border_style="yellow"))
        os.environ["SDB_LAUNCH_DEBUG_MODE"] = "true"
    else:
        os.environ["SDB_LAUNCH_DEBUG_MODE"] = "false"

    if background:
        if sys.platform == "win32":
            sdb_console.print("[bold red]–§–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º (-b/--background) –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ Windows —á–µ—Ä–µ–∑ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.[/bold red]")
            sdb_console.print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –±–µ–∑ —Ñ–ª–∞–≥–∞ -b –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –¥–µ–º–æ–Ω–∏–∑–∞—Ü–∏–∏.")
            raise typer.Exit(code=1)

        sdb_console.print(Panel("[bold blue]–ó–∞–ø—É—Å–∫ SDB –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...[/]",
                                title="SDB Run (Background)", expand=False, border_style="blue"))
        
        run_bot_script_path = project_root / "run_bot.py"
        
        env_for_subprocess = os.environ.copy()
        env_for_subprocess["SDB_SHOULD_WRITE_PID"] = "true"
        
        try:
            process = subprocess.Popen(
                [sys.executable, str(run_bot_script_path)],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL,
                start_new_session=True,
                env=env_for_subprocess
            )
            sdb_console.print(f"–ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ (—Å–∏—Å—Ç–µ–º–Ω—ã–π PID: {process.pid}).")
            sdb_console.print(f"–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è PID-—Ñ–∞–π–ª–∞ '{PID_FILENAME}' (–¥–æ 10 —Å–µ–∫—É–Ω–¥)...")
            
            pid_file_created_successfully = False
            for i in range(10):
                time.sleep(1)
                if pid_file_path.exists():
                    try:
                        actual_pid_from_file_str = pid_file_path.read_text().strip()
                        if actual_pid_from_file_str.isdigit():
                            actual_pid_from_file = int(actual_pid_from_file_str)
                            sdb_console.print(f"[green]PID-—Ñ–∞–π–ª {pid_file_path} —Å–æ–∑–¥–∞–Ω. PID –±–æ—Ç–∞: {actual_pid_from_file}.[/green]")
                            sdb_console.print("–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: [cyan]sdb status[/cyan]")
                            sdb_console.print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: [cyan]sdb stop[/cyan]")
                            pid_file_created_successfully = True
                            break
                    except (ValueError, IOError) as e_read_pid:
                         sdb_console.print(f"[yellow]–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è PID –∏–∑ —Ñ–∞–π–ª–∞ ({e_read_pid}). –ü–æ–ø—ã—Ç–∫–∞ {i+1}/10.[/yellow]")

            if not pid_file_created_successfully:
                sdb_console.print(f"[yellow]–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: PID-—Ñ–∞–π–ª –Ω–µ –±—ã–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–∑–¥–∞–Ω/–ø—Ä–æ—á–∏—Ç–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥.[/yellow]")
                sdb_console.print(f"  –í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
                sdb_console.print(f"  –°–∏—Å—Ç–µ–º–Ω—ã–π PID: {process.pid}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ —Å—Ç–∞—Ç—É—Å –≤—Ä—É—á–Ω—É—é.")

        except Exception as e_popen:
            sdb_console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ: {e_popen}[/bold red]")
            raise typer.Exit(code=1)
    else:
        if not debug:
             sdb_console.print(Panel("[bold green]–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ SDB...[/]",
                                title="SDB Run", expand=False, border_style="green"))
        try:
            os.environ["SDB_SHOULD_WRITE_PID"] = "false"
            
            bot_coroutine = run_sdb_bot()
            exit_code = asyncio.run(bot_coroutine)
            
            if exit_code != 0:
                sdb_console.print(f"[bold red]–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏: {exit_code}[/]")
                sys.exit(exit_code)
            else:
                 sdb_console.print("[bold green]–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.[/]")
                
        except KeyboardInterrupt:
            sdb_console.print("\n[bold orange_red1]ü§ñ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C).[/]")
            sys.exit(0)
        except Exception as e:
            sdb_console.print(Panel(f"[bold red]–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:[/]\n{e}",
                                    title="SDB Runtime Error", border_style="red", expand=True))
            global_logger.opt(exception=e).critical("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ cli/run.py")
            sys.exit(1)
# --- –ö–û–ù–ï–¶ –§–ê–ô–õ–ê cli/run.py ---