# cli/notifications.py
import asyncio
import typer
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from typing import Optional, List, Dict, Any
import json
from pathlib import Path
from datetime import datetime, timedelta
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import requests
import subprocess
import logging

console = Console()
notifications_app = typer.Typer(name="notifications", help="üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
NOTIFICATIONS_DIR = Path("project_data/notifications")
NOTIFICATIONS_CONFIG_FILE = NOTIFICATIONS_DIR / "notifications_config.json"
NOTIFICATIONS_LOG_FILE = NOTIFICATIONS_DIR / "notifications.log"

def _ensure_notifications_directory():
    """–°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    NOTIFICATIONS_DIR.mkdir(parents=True, exist_ok=True)
    if not NOTIFICATIONS_CONFIG_FILE.exists():
        default_config = {
            "channels": {
                "telegram_admin": {
                    "type": "telegram",
                    "status": "active",
                    "description": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º",
                    "config": {
                        "chat_id": None,
                        "bot_token": None
                    }
                },
                "email_support": {
                    "type": "email",
                    "status": "inactive",
                    "description": "Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                    "config": {
                        "smtp_server": "smtp.gmail.com",
                        "smtp_port": 587,
                        "username": None,
                        "password": None,
                        "from_email": None,
                        "to_email": None
                    }
                },
                "webhook_monitoring": {
                    "type": "webhook",
                    "status": "active",
                    "description": "Webhook –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
                    "config": {
                        "url": None,
                        "method": "POST",
                        "headers": {}
                    }
                },
                "slack_alerts": {
                    "type": "slack",
                    "status": "configured",
                    "description": "Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                    "config": {
                        "webhook_url": None,
                        "channel": "#alerts"
                    }
                }
            },
            "templates": {
                "system_alert": {
                    "subject": "üö® –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                    "body": "–°–æ–æ–±—â–µ–Ω–∏–µ: {message}\n–í—Ä–µ–º—è: {timestamp}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}"
                },
                "backup_complete": {
                    "subject": "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                    "body": "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –≤ {timestamp}"
                },
                "error_report": {
                    "subject": "‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
                    "body": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}\n–í—Ä–µ–º—è: {timestamp}\n–ö–æ–º–ø–æ–Ω–µ–Ω—Ç: {component}"
                }
            }
        }
        with open(NOTIFICATIONS_CONFIG_FILE, 'w') as f:
            json.dump(default_config, f, indent=2)

def _load_notifications_config() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    _ensure_notifications_directory()
    try:
        with open(NOTIFICATIONS_CONFIG_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {"channels": {}, "templates": {}}

def _save_notifications_config(config: Dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    _ensure_notifications_directory()
    with open(NOTIFICATIONS_CONFIG_FILE, 'w') as f:
        json.dump(config, f, indent=2)

def _log_notification_event(channel: str, event: str, details: str = ""):
    """–ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ª–æ–≥"""
    _ensure_notifications_directory()
    timestamp = datetime.now().isoformat()
    log_entry = f"[{timestamp}] {channel}: {event}"
    if details:
        log_entry += f" - {details}"
    
    with open(NOTIFICATIONS_LOG_FILE, 'a') as f:
        f.write(log_entry + "\n")

@notifications_app.command(name="list", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
def notifications_list_cmd(
    status: Optional[str] = typer.Option(None, "--status", "-s", help="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É: active, inactive, configured"),
    format: str = typer.Option("table", "--format", "-f", help="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: table, json")
):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        asyncio.run(_notifications_list_async(status, format))
    except typer.Exit: raise
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ 'notifications list': {e}[/]")
        raise typer.Exit(code=1)

async def _notifications_list_async(status: Optional[str], format: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    console.print(Panel("[bold blue]–ö–ê–ù–ê–õ–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô[/]", expand=False, border_style="blue"))
    
    config = _load_notifications_config()
    channels = config.get("channels", {})
    
    if not channels:
        console.print("[yellow]–ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/]")
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
    filtered_channels = []
    for channel_name, channel_info in channels.items():
        if status is None or channel_info.get("status") == status:
            filtered_channels.append((channel_name, channel_info))
    
    if not filtered_channels:
        console.print(f"[yellow]–ö–∞–Ω–∞–ª—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/]")
        return
    
    if format == "json":
        console.print(json.dumps(channels, indent=2, ensure_ascii=False))
        return
    
    # –¢–∞–±–ª–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    table = Table(title=f"–ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø–æ–∫–∞–∑–∞–Ω–æ: {len(filtered_channels)})")
    table.add_column("–ö–∞–Ω–∞–ª", style="cyan")
    table.add_column("–¢–∏–ø", style="blue")
    table.add_column("–°—Ç–∞—Ç—É—Å", style="green")
    table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="white")
    table.add_column("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", style="yellow")
    
    for channel_name, channel_info in filtered_channels:
        status = channel_info.get("status", "unknown")
        status_color = {
            "active": "green",
            "inactive": "red",
            "configured": "yellow",
            "error": "red"
        }.get(status, "white")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if _is_channel_configured(channel_info) else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        table.add_row(
            channel_name,
            channel_info.get("type", "unknown"),
            f"[{status_color}]{status}[/{status_color}]",
            channel_info.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"),
            config_status
        )
    
    console.print(table)

def _is_channel_configured(channel_info: Dict[str, Any]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ –∫–∞–Ω–∞–ª"""
    config = channel_info.get("config", {})
    channel_type = channel_info.get("type", "")
    
    if channel_type == "telegram":
        return bool(config.get("chat_id") and config.get("bot_token"))
    elif channel_type == "email":
        return bool(config.get("username") and config.get("password") and config.get("to_email"))
    elif channel_type == "webhook":
        return bool(config.get("url"))
    elif channel_type == "slack":
        return bool(config.get("webhook_url"))
    else:
        return False

@notifications_app.command(name="send", help="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
def notifications_send_cmd(
    channel: str = typer.Argument(..., help="–ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"),
    message: str = typer.Argument(..., help="–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"),
    priority: str = typer.Option("normal", "--priority", "-p", help="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: low, normal, high, urgent"),
    template: Optional[str] = typer.Option(None, "--template", "-t", help="–®–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
    subject: Optional[str] = typer.Option(None, "--subject", "-s", help="–¢–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    try:
        asyncio.run(_notifications_send_async(channel, message, priority, template, subject))
    except typer.Exit: raise
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ 'notifications send': {e}[/]")
        raise typer.Exit(code=1)

async def _notifications_send_async(channel: str, message: str, priority: str, template: Optional[str], subject: Optional[str]):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    console.print(Panel("[bold blue]–û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø[/]", expand=False, border_style="blue"))
    
    config = _load_notifications_config()
    channels = config.get("channels", {})
    
    if channel not in channels:
        console.print(f"[bold red]–ö–∞–Ω–∞–ª '{channel}' –Ω–µ –Ω–∞–π–¥–µ–Ω[/]")
        raise typer.Exit(code=1)
    
    channel_info = channels[channel]
    channel_type = channel_info.get("type", "")
    channel_status = channel_info.get("status", "inactive")
    
    if channel_status != "active":
        console.print(f"[yellow]–ö–∞–Ω–∞–ª '{channel}' –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω (—Å—Ç–∞—Ç—É—Å: {channel_status})[/]")
        return
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    final_message = message
    final_subject = subject or "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"
    
    if template:
        templates = config.get("templates", {})
        if template in templates:
            template_info = templates[template]
            template_body = template_info.get("body", message)
            template_subject = template_info.get("subject", final_subject)
            
            # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            template_body = template_body.format(
                message=message,
                timestamp=timestamp,
                priority=priority,
                error=message,
                component="CLI"
            )
            template_subject = template_subject.format(
                message=message,
                timestamp=timestamp,
                priority=priority
            )
            
            final_message = template_body
            final_subject = template_subject
        else:
            console.print(f"[yellow]–®–∞–±–ª–æ–Ω '{template}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ[/]")
    
    console.print(f"[cyan]–ö–∞–Ω–∞–ª:[/] {channel}")
    console.print(f"[cyan]–¢–∏–ø:[/] {channel_type}")
    console.print(f"[cyan]–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:[/] {priority}")
    console.print(f"[cyan]–¢–µ–º–∞:[/] {final_subject}")
    console.print(f"[cyan]–°–æ–æ–±—â–µ–Ω–∏–µ:[/] {final_message}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    success = False
    try:
        if channel_type == "telegram":
            success = await _send_telegram_notification(channel_info, final_message, priority)
        elif channel_type == "email":
            success = await _send_email_notification(channel_info, final_subject, final_message, priority)
        elif channel_type == "webhook":
            success = await _send_webhook_notification(channel_info, final_message, priority)
        elif channel_type == "slack":
            success = await _send_slack_notification(channel_info, final_message, priority)
        else:
            console.print(f"[yellow]–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–∞–Ω–∞–ª–∞: {channel_type}[/]")
            return
    except Exception as e:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}[/]")
        _log_notification_event(channel, "send_failed", str(e))
        return
    
    if success:
        console.print(f"[green]‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª '{channel}'[/]")
        _log_notification_event(channel, "send_success", f"priority={priority}")
    else:
        console.print(f"[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª '{channel}'[/]")
        _log_notification_event(channel, "send_failed", f"priority={priority}")

async def _send_telegram_notification(channel_info: Dict[str, Any], message: str, priority: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram —Å —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
    config = channel_info.get("config", {})
    chat_id = config.get("chat_id")
    bot_token = config.get("bot_token")
    
    if not chat_id or not bot_token:
        console.print("[yellow]Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chat_id –∏–ª–∏ bot_token)[/]")
        logger.warning(f"Telegram notification failed: missing config - chat_id: {bool(chat_id)}, bot_token: {bool(bot_token)}")
        return False
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        priority_emoji = {"low": "üîµ", "normal": "‚ö™", "high": "üü°", "urgent": "üî¥"}
        emoji = priority_emoji.get(priority, "‚ö™")
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        formatted_message = f"""
{emoji} **{priority.upper()} –£–í–ï–î–û–ú–õ–ï–ù–ò–ï**
‚è∞ {timestamp}

{message}

---
ü§ñ SwiftDevBot-Lite
        """.strip()
        
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": formatted_message,
            "parse_mode": "HTML",
            "disable_web_page_preview": True
        }
        
        console.print(f"[cyan]–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram (chat_id: {chat_id})...[/]")
        
        response = requests.post(url, json=data, timeout=15)
        
        if response.status_code == 200:
            result = response.json()
            if result.get("ok"):
                console.print("[green]‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram[/]")
                logger.info(f"Telegram notification sent successfully to chat_id: {chat_id}")
                return True
            else:
                error_msg = result.get("description", "Unknown error")
                console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ Telegram API: {error_msg}[/]")
                logger.error(f"Telegram API error: {error_msg}")
                return False
        else:
            console.print(f"[red]‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}[/]")
            logger.error(f"Telegram HTTP error: {response.status_code}")
            return False
            
    except requests.exceptions.Timeout:
        console.print("[red]‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram[/]")
        logger.error("Telegram notification timeout")
        return False
    except requests.exceptions.RequestException as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}[/]")
        logger.error(f"Telegram network error: {e}")
        return False
    except Exception as e:
        console.print(f"[red]‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}[/]")
        logger.error(f"Telegram unexpected error: {e}")
        return False

async def _send_email_notification(channel_info: Dict[str, Any], subject: str, message: str, priority: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ email —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    config = channel_info.get("config", {})
    
    smtp_server = config.get("smtp_server")
    smtp_port = config.get("smtp_port", 587)
    username = config.get("username")
    password = config.get("password")
    from_email = config.get("from_email")
    to_email = config.get("to_email")
    
    if not all([smtp_server, username, password, from_email, to_email]):
        console.print("[yellow]Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)[/]")
        logger.warning("Email notification failed: missing configuration")
        return False
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        priority_emoji = {"low": "üîµ", "normal": "‚ö™", "high": "üü°", "urgent": "üî¥"}
        emoji = priority_emoji.get(priority, "‚ö™")
        
        msg = MIMEMultipart()
        msg['From'] = from_email
        msg['To'] = to_email
        msg['Subject'] = f"{emoji} [{priority.upper()}] {subject}"
        
        body = f"""
ü§ñ SwiftDevBot-Lite - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority.upper()}
–í—Ä–µ–º—è: {timestamp}

{message}

---
–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã SwiftDevBot-Lite.
        """
        
        msg.attach(MIMEText(body, 'plain', 'utf-8'))
        
        console.print(f"[cyan]–û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ {to_email}...[/]")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.starttls()
        server.login(username, password)
        server.send_message(msg)
        server.quit()
        
        console.print("[green]‚úÖ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ[/]")
        logger.info(f"Email notification sent successfully to {to_email}")
        return True
        
    except smtplib.SMTPAuthenticationError:
        console.print("[red]‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SMTP[/]")
        logger.error("Email SMTP authentication error")
        return False
    except smtplib.SMTPRecipientsRefused:
        console.print("[red]‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è[/]")
        logger.error(f"Email recipient refused: {to_email}")
        return False
    except smtplib.SMTPServerDisconnected:
        console.print("[red]‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SMTP —Å–µ—Ä–≤–µ—Ä–æ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ[/]")
        logger.error("Email SMTP server disconnected")
        return False
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}[/]")
        logger.error(f"Email sending error: {e}")
        return False

async def _send_webhook_notification(channel_info: Dict[str, Any], message: str, priority: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ webhook —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    config = channel_info.get("config", {})
    url = config.get("url")
    method = config.get("method", "POST")
    headers = config.get("headers", {})
    
    if not url:
        console.print("[yellow]Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL)[/]")
        logger.warning("Webhook notification failed: missing URL")
        return False
    
    try:
        timestamp = datetime.now().isoformat()
        data = {
            "message": message,
            "priority": priority,
            "timestamp": timestamp,
            "source": "swiftdevbot",
            "version": "1.0"
        }
        
        console.print(f"[cyan]–û—Ç–ø—Ä–∞–≤–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ {url}...[/]")
        
        response = requests.request(method, url, json=data, headers=headers, timeout=15)
        
        if response.status_code in [200, 201, 202]:
            console.print("[green]‚úÖ Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ[/]")
            logger.info(f"Webhook notification sent successfully to {url}")
            return True
        else:
            console.print(f"[red]‚ùå Webhook –æ—à–∏–±–∫–∞: HTTP {response.status_code}[/]")
            logger.error(f"Webhook HTTP error: {response.status_code}")
            return False
            
    except requests.exceptions.Timeout:
        console.print("[red]‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ webhook[/]")
        logger.error("Webhook notification timeout")
        return False
    except requests.exceptions.RequestException as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ webhook: {e}[/]")
        logger.error(f"Webhook network error: {e}")
        return False
    except Exception as e:
        console.print(f"[red]‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ webhook: {e}[/]")
        logger.error(f"Webhook unexpected error: {e}")
        return False

async def _send_slack_notification(channel_info: Dict[str, Any], message: str, priority: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
    config = channel_info.get("config", {})
    webhook_url = config.get("webhook_url")
    channel = config.get("channel", "#alerts")
    
    if not webhook_url:
        console.print("[yellow]Slack –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç webhook_url)[/]")
        logger.warning("Slack notification failed: missing webhook_url")
        return False
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º Slack —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        priority_emoji = {"low": "üîµ", "normal": "‚ö™", "high": "üü°", "urgent": "üî¥"}
        emoji = priority_emoji.get(priority, "‚ö™")
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        slack_data = {
            "channel": channel,
            "text": f"{emoji} *{priority.upper()} –£–í–ï–î–û–ú–õ–ï–ù–ò–ï*",
            "attachments": [
                {
                    "color": {
                        "low": "#3498db",
                        "normal": "#95a5a6", 
                        "high": "#f39c12",
                        "urgent": "#e74c3c"
                    }.get(priority, "#95a5a6"),
                    "text": message,
                    "fields": [
                        {
                            "title": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
                            "value": priority.upper(),
                            "short": True
                        },
                        {
                            "title": "–í—Ä–µ–º—è",
                            "value": timestamp,
                            "short": True
                        },
                        {
                            "title": "–ò—Å—Ç–æ—á–Ω–∏–∫",
                            "value": "SwiftDevBot-Lite",
                            "short": True
                        }
                    ],
                    "footer": "SwiftDevBot-Lite",
                    "ts": int(datetime.now().timestamp())
                }
            ]
        }
        
        console.print(f"[cyan]–û—Ç–ø—Ä–∞–≤–∫–∞ Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª {channel}...[/]")
        
        response = requests.post(webhook_url, json=slack_data, timeout=15)
        
        if response.status_code == 200:
            console.print("[green]‚úÖ Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ[/]")
            logger.info(f"Slack notification sent successfully to channel {channel}")
            return True
        else:
            console.print(f"[red]‚ùå Slack –æ—à–∏–±–∫–∞: HTTP {response.status_code}[/]")
            logger.error(f"Slack HTTP error: {response.status_code}")
            return False
            
    except requests.exceptions.Timeout:
        console.print("[red]‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Slack[/]")
        logger.error("Slack notification timeout")
        return False
    except requests.exceptions.RequestException as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ Slack: {e}[/]")
        logger.error(f"Slack network error: {e}")
        return False
    except Exception as e:
        console.print(f"[red]‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Slack: {e}[/]")
        logger.error(f"Slack unexpected error: {e}")
        return False

@notifications_app.command(name="configure", help="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
def notifications_configure_cmd(
    channel: str = typer.Argument(..., help="–ö–∞–Ω–∞–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"),
    config_file: Optional[str] = typer.Option(None, "--config", "-c", help="–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"),
    interactive: bool = typer.Option(False, "--interactive", "-i", help="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
):
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        asyncio.run(_notifications_configure_async(channel, config_file, interactive))
    except typer.Exit: raise
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ 'notifications configure': {e}[/]")
        raise typer.Exit(code=1)

async def _notifications_configure_async(channel: str, config_file: Optional[str], interactive: bool):
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    from cli.utils import confirm_action
    
    console.print(Panel(f"[bold blue]–ù–ê–°–¢–†–û–ô–ö–ê –ö–ê–ù–ê–õ–ê: {channel}[/]", expand=False, border_style="blue"))
    
    config = _load_notifications_config()
    channels = config.get("channels", {})
    
    if channel not in channels:
        console.print(f"[bold red]–ö–∞–Ω–∞–ª '{channel}' –Ω–µ –Ω–∞–π–¥–µ–Ω[/]")
        raise typer.Exit(code=1)
    
    channel_info = channels[channel]
    channel_type = channel_info.get("type", "")
    
    console.print(f"[cyan]–ö–∞–Ω–∞–ª:[/] {channel}")
    console.print(f"[cyan]–¢–∏–ø:[/] {channel_type}")
    console.print(f"[cyan]–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:[/] {channel_info.get('status', 'unknown')}")
    
    if config_file:
        console.print(f"[cyan]–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:[/] {config_file}")
        # –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
        console.print("[yellow]–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞[/]")
    elif interactive:
        await _configure_channel_interactive(channel, channel_info, config)
    else:
        console.print("[yellow]–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --interactive –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏[/]")
        console.print("[dim]–ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å --config[/]")

@notifications_app.command(name="test", help="–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
def notifications_test_cmd(
    channel: str = typer.Argument(..., help="–ö–∞–Ω–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"),
    message: Optional[str] = typer.Option(None, "--message", "-m", help="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
    priority: str = typer.Option("normal", "--priority", "-p", help="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: low, normal, high, urgent")
):
    """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª"""
    try:
        asyncio.run(_notifications_test_async(channel, message, priority))
    except typer.Exit: raise
    except Exception as e:
        console.print(f"[bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ 'notifications test': {e}[/]")
        raise typer.Exit(code=1)

async def _notifications_test_async(channel: str, message: Optional[str], priority: str):
    """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    console.print(Panel(f"[bold blue]–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô: {channel}[/]", expand=False, border_style="blue"))
    
    config = _load_notifications_config()
    channels = config.get("channels", {})
    
    if channel not in channels:
        console.print(f"[bold red]‚ùå –ö–∞–Ω–∞–ª '{channel}' –Ω–µ –Ω–∞–π–¥–µ–Ω[/]")
        console.print(f"[cyan]–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: {', '.join(channels.keys())}[/]")
        raise typer.Exit(code=1)
    
    channel_info = channels[channel]
    if channel_info.get("status") != "active":
        console.print(f"[yellow]‚ö†Ô∏è –ö–∞–Ω–∞–ª '{channel}' –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω (—Å—Ç–∞—Ç—É—Å: {channel_info.get('status')})[/]")
        if not typer.confirm("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ?"):
            raise typer.Exit(code=1)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message:
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        message = f"–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç SwiftDevBot-Lite\n–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {timestamp}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority.upper()}"
    
    console.print(f"[cyan]–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª '{channel}'...[/]")
    console.print(f"[dim]–°–æ–æ–±—â–µ–Ω–∏–µ: {message[:100]}{'...' if len(message) > 100 else ''}[/]")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    success = await _send_notification_by_type(channel_info, message, priority)
    
    if success:
        console.print("[bold green]‚úÖ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ![/]")
        logger.info(f"Notification test successful for channel: {channel}")
    else:
        console.print("[bold red]‚ùå –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª—Å—è[/]")
        logger.error(f"Notification test failed for channel: {channel}")
        raise typer.Exit(code=1)

async def _send_notification_by_type(channel_info: Dict[str, Any], message: str, priority: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É –∫–∞–Ω–∞–ª–∞"""
    channel_type = channel_info.get("type")
    
    if channel_type == "telegram":
        return await _send_telegram_notification(channel_info, message, priority)
    elif channel_type == "email":
        subject = "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
        return await _send_email_notification(channel_info, subject, message, priority)
    elif channel_type == "webhook":
        return await _send_webhook_notification(channel_info, message, priority)
    elif channel_type == "slack":
        return await _send_slack_notification(channel_info, message, priority)
    else:
        console.print(f"[yellow]–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–∞–Ω–∞–ª–∞: {channel_type}[/]")
        return False

async def _configure_channel_interactive(channel: str, channel_info: Dict[str, Any], config: Dict[str, Any]):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    channel_type = channel_info.get("type")
    
    console.print(f"[cyan]–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ '{channel}' (—Ç–∏–ø: {channel_type})[/]")
    
    if channel_type == "telegram":
        await _configure_telegram_interactive(channel, channel_info, config)
    elif channel_type == "email":
        await _configure_email_interactive(channel, channel_info, config)
    elif channel_type == "webhook":
        await _configure_webhook_interactive(channel, channel_info, config)
    elif channel_type == "slack":
        await _configure_slack_interactive(channel, channel_info, config)
    else:
        console.print(f"[yellow]–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ç–∏–ø–∞ '{channel_type}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è[/]")

async def _configure_telegram_interactive(channel: str, channel_info: Dict[str, Any], config: Dict[str, Any]):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –∫–∞–Ω–∞–ª–∞"""
    console.print("[cyan]–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –∫–∞–Ω–∞–ª–∞:[/]")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    current_config = channel_info.get("config", {})
    current_chat_id = current_config.get("chat_id")
    current_bot_token = current_config.get("bot_token")
    
    # Chat ID
    if current_chat_id:
        console.print(f"[dim]–¢–µ–∫—É—â–∏–π chat_id: {current_chat_id}[/]")
    chat_id = input("Chat ID (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
    if not chat_id and current_chat_id:
        chat_id = current_chat_id
    
    # Bot Token
    if current_bot_token:
        console.print(f"[dim]–¢–µ–∫—É—â–∏–π bot_token: {'*' * len(current_bot_token)}[/]")
    bot_token = input("Bot Token (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
    if not bot_token and current_bot_token:
        bot_token = current_bot_token
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if chat_id and bot_token:
        config["channels"][channel]["config"]["chat_id"] = chat_id
        config["channels"][channel]["config"]["bot_token"] = bot_token
        config["channels"][channel]["status"] = "active"
        
        _save_notifications_config(config)
        console.print("[green]‚úÖ Telegram –∫–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω[/]")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if typer.confirm("–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ?"):
            test_message = "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç SwiftDevBot-Lite"
            success = await _send_telegram_notification(config["channels"][channel], test_message, "normal")
            if success:
                console.print("[green]‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ![/]")
            else:
                console.print("[red]‚ùå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª—Å—è[/]")
    else:
        console.print("[yellow]–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram[/]")

async def _configure_email_interactive(channel: str, channel_info: Dict[str, Any], config: Dict[str, Any]):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Email –∫–∞–Ω–∞–ª–∞"""
    console.print("[cyan]–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Email –∫–∞–Ω–∞–ª–∞:[/]")
    
    current_config = channel_info.get("config", {})
    
    # SMTP —Å–µ—Ä–≤–µ—Ä
    smtp_server = input(f"SMTP —Å–µ—Ä–≤–µ—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {current_config.get('smtp_server', 'smtp.gmail.com')}): ").strip()
    if not smtp_server:
        smtp_server = current_config.get('smtp_server', 'smtp.gmail.com')
    
    # SMTP –ø–æ—Ä—Ç
    smtp_port_input = input(f"SMTP –ø–æ—Ä—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {current_config.get('smtp_port', 587)}): ").strip()
    smtp_port = int(smtp_port_input) if smtp_port_input else current_config.get('smtp_port', 587)
    
    # –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    username = input("Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ").strip()
    password = input("Email –ø–∞—Ä–æ–ª—å: ").strip()
    from_email = input("Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ").strip()
    to_email = input("Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ").strip()
    
    if all([username, password, from_email, to_email]):
        config["channels"][channel]["config"].update({
            "smtp_server": smtp_server,
            "smtp_port": smtp_port,
            "username": username,
            "password": password,
            "from_email": from_email,
            "to_email": to_email
        })
        config["channels"][channel]["status"] = "active"
        
        _save_notifications_config(config)
        console.print("[green]‚úÖ Email –∫–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω[/]")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if typer.confirm("–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ?"):
            test_message = "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç SwiftDevBot-Lite"
            success = await _send_email_notification(config["channels"][channel], "–¢–µ—Å—Ç", test_message, "normal")
            if success:
                console.print("[green]‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ![/]")
            else:
                console.print("[red]‚ùå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª—Å—è[/]")
    else:
        console.print("[yellow]–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Email[/]")

async def _configure_webhook_interactive(channel: str, channel_info: Dict[str, Any], config: Dict[str, Any]):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Webhook –∫–∞–Ω–∞–ª–∞"""
    console.print("[cyan]–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Webhook –∫–∞–Ω–∞–ª–∞:[/]")
    
    current_config = channel_info.get("config", {})
    current_url = current_config.get("url")
    
    if current_url:
        console.print(f"[dim]–¢–µ–∫—É—â–∏–π URL: {current_url}[/]")
    
    url = input("Webhook URL: ").strip()
    if not url and current_url:
        url = current_url
    
    if url:
        config["channels"][channel]["config"]["url"] = url
        config["channels"][channel]["status"] = "active"
        
        _save_notifications_config(config)
        console.print("[green]‚úÖ Webhook –∫–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω[/]")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if typer.confirm("–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ?"):
            test_message = "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç SwiftDevBot-Lite"
            success = await _send_webhook_notification(config["channels"][channel], test_message, "normal")
            if success:
                console.print("[green]‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ![/]")
            else:
                console.print("[red]‚ùå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª—Å—è[/]")
    else:
        console.print("[yellow]URL –Ω–µ —É–∫–∞–∑–∞–Ω[/]")

async def _configure_slack_interactive(channel: str, channel_info: Dict[str, Any], config: Dict[str, Any]):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Slack –∫–∞–Ω–∞–ª–∞"""
    console.print("[cyan]–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Slack –∫–∞–Ω–∞–ª–∞:[/]")
    
    current_config = channel_info.get("config", {})
    current_webhook_url = current_config.get("webhook_url")
    current_channel = current_config.get("channel", "#alerts")
    
    if current_webhook_url:
        console.print(f"[dim]–¢–µ–∫—É—â–∏–π webhook_url: {'*' * len(current_webhook_url)}[/]")
    
    webhook_url = input("Slack Webhook URL: ").strip()
    if not webhook_url and current_webhook_url:
        webhook_url = current_webhook_url
    
    channel_name = input(f"Slack –∫–∞–Ω–∞–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {current_channel}): ").strip()
    if not channel_name:
        channel_name = current_channel
    
    if webhook_url:
        config["channels"][channel]["config"].update({
            "webhook_url": webhook_url,
            "channel": channel_name
        })
        config["channels"][channel]["status"] = "active"
        
        _save_notifications_config(config)
        console.print("[green]‚úÖ Slack –∫–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω[/]")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if typer.confirm("–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ?"):
            test_message = "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç SwiftDevBot-Lite"
            success = await _send_slack_notification(config["channels"][channel], test_message, "normal")
            if success:
                console.print("[green]‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ![/]")
            else:
                console.print("[red]‚ùå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª—Å—è[/]")
    else:
        console.print("[yellow]Webhook URL –Ω–µ —É–∫–∞–∑–∞–Ω[/]")

if __name__ == "__main__":
    notifications_app() 