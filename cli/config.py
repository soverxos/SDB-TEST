# --- –ù–ê–ß–ê–õ–û –§–ê–ô–õ–ê cli/config.py ---
import sys
from pathlib import Path
from typing import Any, Dict, Optional

import typer
import yaml
from rich.console import Console
from rich.panel import Panel
from rich.syntax import Syntax
from dotenv import set_key, find_dotenv

from .utils import confirm_action

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å, –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ sdb.py
sdb_console = Console()

# --- Typer App –¥–ª—è –≥—Ä—É–ø–ø—ã –∫–æ–º–∞–Ω–¥ 'config' ---
config_app = typer.Typer(
    name="config",
    help="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π SwiftDevBot (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –ø—Ä–æ—Å–º–æ—Ç—Ä, –∏–∑–º–µ–Ω–µ–Ω–∏–µ).",
    rich_markup_mode="rich",
    no_args_is_help=True
)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
PROJECT_ROOT = Path(__file__).resolve().parent.parent
USER_CONFIG_DIR_NAME = "Config"
USER_CORE_CONFIG_FILENAME = "core_settings.yaml"
USER_MODULES_CONFIG_DIR_NAME = "modules_settings"
ENV_FILENAME = ".env"

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def _update_env_file(key: str, value: str) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç .env —Ñ–∞–π–ª."""
    env_path = find_dotenv(filename=ENV_FILENAME, usecwd=True, raise_error_if_not_found=False)
    if not env_path:
        env_path = PROJECT_ROOT / ENV_FILENAME
        sdb_console.print(f"[dim]–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π: {env_path}[/dim]")
        env_path.touch()

    try:
        set_key(dotenv_path=env_path, key_to_set=key, value_to_set=value)
        sdb_console.print(f"[green]‚úì[/] –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è [cyan]{key}[/] —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ [yellow]{env_path}[/yellow]")
        return True
    except Exception as e:
        sdb_console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ .env —Ñ–∞–π–ª ({env_path}): {e}[/bold red]")
        return False

def _get_project_data_path() -> Path:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ project_data, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã."""
    from core.app_settings import CoreAppSettings
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –º–æ–¥–µ–ª–∏ Pydantic, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    default_path = CoreAppSettings.model_fields['project_data_path'].default
    return (PROJECT_ROOT / default_path).resolve()


# --- –ö–æ–º–∞–Ω–¥—ã CLI ---

@config_app.command(name="init", help="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
def init_command(
    force: bool = typer.Option(False, "--force", "-f", help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏ (—Å –±—ç–∫–∞–ø–æ–º).")
):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–∏–∑–∞—Ä–¥ –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞."""
    sdb_console.print(Panel("ü§ñ [bold cyan]–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π—â–∏–∫ SwiftDevBot[/]",
                        subtitle="–î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ —à–∞–≥ –∑–∞ —à–∞–≥–æ–º!", expand=False))
    
    # 1. –¢–æ–∫–µ–Ω –ë–æ—Ç–∞
    sdb_console.print("\n--- [bold]–®–∞–≥ 1: –¢–æ–∫–µ–Ω Telegram –ë–æ—Ç–∞[/bold] ---")
    sdb_console.print("–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram.")
    bot_token = typer.prompt("üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à BOT_TOKEN", hide_input=False) # hide_input=True –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª–∞—Ö
    if not bot_token or len(bot_token.split(':')) != 2:
        sdb_console.print("[bold red]–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.[/bold red]")
        raise typer.Exit(1)
    _update_env_file("BOT_TOKEN", bot_token)

    # 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö
    sdb_console.print("\n--- [bold]–®–∞–≥ 2: –ë–∞–∑–∞ –î–∞–Ω–Ω—ã—Ö[/bold] ---")
    db_type_choice = typer.prompt(
        "üóÑÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n[1] sqlite (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞)\n[2] postgresql\n[3] mysql\n> –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä",
        default="1", show_choices=False
    )
    
    db_config: Dict[str, Any] = {}
    env_vars_to_set: Dict[str, str] = {}

    if db_type_choice == "1":
        db_config['type'] = "sqlite"
        default_path = "project_data/Database_files/swiftdevbot.db"
        sqlite_path = typer.prompt(f"üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É SQLite (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞)", default=default_path)
        env_vars_to_set['SDB_DB_TYPE'] = 'sqlite'
        env_vars_to_set['SDB_DB_SQLITE_PATH'] = sqlite_path
    
    elif db_type_choice in ["2", "3"]:
        db_type = "postgresql" if db_type_choice == "2" else "mysql"
        default_port = "5432" if db_type == "postgresql" else "3306"
        sdb_console.print(f"--- [bold]–ù–∞—Å—Ç—Ä–æ–π–∫–∞ {db_type.capitalize()}[/bold] ---")
        
        host = typer.prompt("üåê –•–æ—Å—Ç (IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω)", default="localhost")
        port = typer.prompt("üö™ –ü–æ—Ä—Ç", default=default_port)
        user = typer.prompt("üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–æ–≥–∏–Ω)")
        password = typer.prompt("üîí –ü–∞—Ä–æ–ª—å", hide_input=True)
        dbname = typer.prompt("üíæ –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        driver = "psycopg" if db_type == "postgresql" else "aiomysql"
        dsn = f"{db_type}+{driver}://{user}:{password}@{host}:{port}/{dbname}"
        if db_type == "mysql":
            dsn += "?charset=utf8mb4"

        env_vars_to_set['SDB_DB_TYPE'] = db_type
        if db_type == "postgresql":
            env_vars_to_set['SDB_DB_PG_DSN'] = dsn
        else:
            env_vars_to_set['SDB_DB_MYSQL_DSN'] = dsn
    else:
        sdb_console.print("[bold red]–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.[/bold red]")
        raise typer.Exit(1)
        
    for key, value in env_vars_to_set.items():
        _update_env_file(key, value)

    # 3. –°—É–ø–µ—Ä-–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    sdb_console.print("\n--- [bold]–®–∞–≥ 3: –°—É–ø–µ—Ä-–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä[/bold] ---")
    sdb_console.print("–≠—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ–ª–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ.")
    super_admin_id = typer.prompt("üëë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID (—á–∏—Å–ª–æ–≤–æ–π)")
    if not super_admin_id.isdigit():
        sdb_console.print("[bold red]–û—à–∏–±–∫–∞: Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.[/bold red]")
        raise typer.Exit(1)
    _update_env_file("SDB_CORE_SUPER_ADMINS", super_admin_id)

    # 4. –°–æ–∑–¥–∞–Ω–∏–µ core_settings.yaml
    project_data_path = _get_project_data_path()
    user_config_dir = project_data_path / USER_CONFIG_DIR_NAME
    user_config_file_path = user_config_dir / USER_CORE_CONFIG_FILENAME
    
    user_config_dir.mkdir(parents=True, exist_ok=True)

    if user_config_file_path.exists() and not force:
        sdb_console.print(f"[yellow]–§–∞–π–ª {user_config_file_path} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏.[/yellow]")
    else:
        # –í —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ init –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—á—Ç–∏ –≤—Å—ë –≤ .env, 
        # –ø–æ—ç—Ç–æ–º—É core_settings.yaml –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ—á—Ç–∏ –ø—É—Å—Ç—ã–º,
        # –æ–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞ –Ω–µ-—Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
        core_settings_data = {
            'core': {
                'log_level': 'INFO',
                'log_to_file': True
            }
        }
        try:
            with open(user_config_file_path, 'w', encoding='utf-8') as f:
                yaml.dump(core_settings_data, f, indent=2, sort_keys=False)
            sdb_console.print(f"[green]‚úì[/] –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ [yellow]{user_config_file_path}[/yellow] —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.")
        except Exception as e:
            sdb_console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ {user_config_file_path}: {e}[/bold red]")
    
    sdb_console.print(Panel("‚úÖ [bold green]–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞![/]", expand=False, border_style="green"))
    sdb_console.print("üí° [bold]–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:[/bold]")
    sdb_console.print("   1. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: [cyan]sdb db upgrade head[/cyan]")
    sdb_console.print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: [cyan]sdb run[/cyan]")


@config_app.command(name="get", help="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞.")
def get_command(
    key: Optional[str] = typer.Argument(None, help="–ö–ª—é—á –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'db.type' –∏–ª–∏ 'core.super_admins')."),
    show_defaults: bool = typer.Option(False, "--show-defaults", help="–ü–æ–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é SDB."""
    try:
        from core.app_settings import settings
    except Exception as e:
        sdb_console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}[/bold red]")
        raise typer.Exit(1)
        
    if key is None:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        sdb_console.print(Panel("[bold cyan]–¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SwiftDevBot[/]", expand=False))
        config_dict = settings.model_dump(mode='json', exclude_defaults=not show_defaults)
        yaml_output = yaml.dump(config_dict, indent=2, allow_unicode=True, sort_keys=False)
        sdb_console.print(Syntax(yaml_output, "yaml", theme="native", line_numbers=True))
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        try:
            value = settings
            for part in key.split('.'):
                if isinstance(value, dict):
                    value = value.get(part)
                else:
                    value = getattr(value, part)
            
            if isinstance(value, (dict, list, tuple)) or hasattr(value, 'model_dump'):
                if hasattr(value, 'model_dump'):
                    value = value.model_dump(mode='json')
                yaml_output = yaml.dump(value, indent=2, allow_unicode=True)
                sdb_console.print(f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–ª—é—á–∞ [cyan]{key}[/]:")
                sdb_console.print(Syntax(yaml_output, "yaml", theme="native"))
            else:
                sdb_console.print(f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–ª—é—á–∞ [cyan]{key}[/]: [bold green]{value}[/bold green]")

        except (AttributeError, KeyError):
            sdb_console.print(f"[bold red]–û—à–∏–±–∫–∞: –ö–ª—é—á '{key}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.[/bold red]")
            raise typer.Exit(1)

# –ö–æ–º–∞–Ω–¥—ã 'set' –∏ 'set-module' —Ç—Ä–µ–±—É—é—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è YAML.
# –ü–æ–∫–∞ —á—Ç–æ –∏—Ö –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å, —á—Ç–æ–±—ã –Ω–µ —É—Å–ª–æ–∂–Ω—è—Ç—å, –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏.
# –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Ö —Å–µ–π—á–∞—Å, —è –º–æ–≥—É –Ω–∞–ø–∏—Å–∞—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é.

if __name__ == "__main__":
    config_app()
# --- –ö–û–ù–ï–¶ –§–ê–ô–õ–ê cli/config.py ---