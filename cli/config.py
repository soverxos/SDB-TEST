# --- –ù–ê–ß–ê–õ–û –§–ê–ô–õ–ê cli/config.py ---
import sys
from pathlib import Path
from typing import Any, Dict, Optional, List

import typer
import yaml
from rich.console import Console
from rich.panel import Panel
from rich.syntax import Syntax
from dotenv import set_key, find_dotenv

from .utils import (
    confirm_action,
    read_yaml_file,
    write_yaml_file,
    sdb_console,
    PROJECT_ROOT,
    USER_CONFIG_DIR_NAME,
    USER_CORE_CONFIG_FILENAME,
    USER_MODULES_CONFIG_DIR_NAME,
)

# --- Typer App –¥–ª—è –≥—Ä—É–ø–ø—ã –∫–æ–º–∞–Ω–¥ 'config' ---
config_app = typer.Typer(
    name="config",
    help="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π SwiftDevBot (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –ø—Ä–æ—Å–º–æ—Ç—Ä, –∏–∑–º–µ–Ω–µ–Ω–∏–µ).",
    rich_markup_mode="rich",
    no_args_is_help=True
)

ENV_FILENAME = ".env"

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def _update_env_file(key: str, value: str) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç .env —Ñ–∞–π–ª."""
    env_path = find_dotenv(filename=ENV_FILENAME, usecwd=True, raise_error_if_not_found=False)
    if not env_path:
        env_path = PROJECT_ROOT / ENV_FILENAME
        sdb_console.print(f"[dim]–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π: {env_path}[/dim]")
        env_path.touch()
    try:
        set_key(dotenv_path=env_path, key_to_set=key, value_to_set=value, quote_mode="always")
        sdb_console.print(f"[green]‚úì[/] –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è [cyan]{key}[/] —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ [yellow]{env_path}[/yellow]")
        return True
    except Exception as e:
        sdb_console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ .env —Ñ–∞–π–ª ({env_path}): {e}[/bold red]")
        return False

def _get_project_data_path() -> Path:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ project_data, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã."""
    from core.app_settings import CoreAppSettings
    default_path = CoreAppSettings.model_fields['project_data_path'].default
    return (PROJECT_ROOT / default_path).resolve()

# --- –ö–æ–º–∞–Ω–¥—ã CLI ---

@config_app.command(name="init", help="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
def init_command(force: bool = typer.Option(False, "--force", "-f", help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏.")):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–∏–∑–∞—Ä–¥ –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞."""
    sdb_console.print(Panel("ü§ñ [bold cyan]–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π—â–∏–∫ SwiftDevBot[/]", expand=False))
    
    # –®–∞–≥ 1: –¢–æ–∫–µ–Ω –ë–æ—Ç–∞
    sdb_console.print("\n--- [bold]–®–∞–≥ 1: –¢–æ–∫–µ–Ω Telegram –ë–æ—Ç–∞[/bold] ---")
    bot_token = typer.prompt("üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à BOT_TOKEN (–ø–æ–ª—É—á–∏—Ç—å —É @BotFather)", hide_input=True)
    if not bot_token or len(bot_token.split(':')) != 2:
        sdb_console.print("[bold red]–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.[/bold red]"); raise typer.Exit(1)
    _update_env_file("BOT_TOKEN", bot_token)

    # –®–∞–≥ 2: –ë–∞–∑–∞ –î–∞–Ω–Ω—ã—Ö
    sdb_console.print("\n--- [bold]–®–∞–≥ 2: –ë–∞–∑–∞ –î–∞–Ω–Ω—ã—Ö[/bold] ---")
    db_type_choice = typer.prompt("üóÑÔ∏è –¢–∏–ø –ë–î: [1] sqlite, [2] postgresql, [3] mysql", default="1")
    
    env_vars_to_set: Dict[str, str] = {}
    if db_type_choice == "1":
        env_vars_to_set['SDB_DB_TYPE'] = 'sqlite'
        env_vars_to_set['SDB_DB_SQLITE_PATH'] = "Database_files/swiftdevbot.db"
    elif db_type_choice in ["2", "3"]:
        db_type = "postgresql" if db_type_choice == "2" else "mysql"
        sdb_console.print(f"--- [bold]–ù–∞—Å—Ç—Ä–æ–π–∫–∞ {db_type.capitalize()}[/bold] ---")
        host = typer.prompt("  üåê –•–æ—Å—Ç", default="localhost")
        port = typer.prompt("  üö™ –ü–æ—Ä—Ç", default="5432" if db_type == "postgresql" else "3306")
        user = typer.prompt("  üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        password = typer.prompt("  üîí –ü–∞—Ä–æ–ª—å", hide_input=True)
        dbname = typer.prompt("  üíæ –ò–º—è –ë–î")
        driver = "psycopg" if db_type == "postgresql" else "aiomysql"
        dsn = f"{db_type}+{driver}://{user}:{password}@{host}:{port}/{dbname}"
        if db_type == "mysql": dsn += "?charset=utf8mb4"
        env_vars_to_set['SDB_DB_TYPE'] = db_type
        env_key = 'SDB_DB_PG_DSN' if db_type == "postgresql" else 'SDB_DB_MYSQL_DSN'
        env_vars_to_set[env_key] = dsn
    else:
        sdb_console.print("[bold red]–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.[/bold red]"); raise typer.Exit(1)
        
    for key, value in env_vars_to_set.items():
        _update_env_file(key, value)

    # –®–∞–≥ 3: –°—É–ø–µ—Ä-–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    sdb_console.print("\n--- [bold]–®–∞–≥ 3: –°—É–ø–µ—Ä-–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä[/bold] ---")
    super_admin_id = typer.prompt("üëë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID (—á–∏—Å–ª–æ–≤–æ–π)")
    if not super_admin_id.isdigit():
        sdb_console.print("[bold red]–û—à–∏–±–∫–∞: Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.[/bold red]"); raise typer.Exit(1)
    _update_env_file("SDB_CORE_SUPER_ADMINS", super_admin_id)

    # –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ core_settings.yaml
    sdb_console.print("\n--- [bold]–®–∞–≥ 4: –§–∞–π–ª –±–∞–∑–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫[/bold] ---")
    project_data_path = _get_project_data_path()
    user_config_file = project_data_path / USER_CONFIG_DIR_NAME / USER_CORE_CONFIG_FILENAME
    
    if user_config_file.exists() and not force and not confirm_action(f"–§–∞–π–ª {user_config_file} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ?", default_choice=False, abort_on_false=False):
        sdb_console.print("[yellow]–°–æ–∑–¥–∞–Ω–∏–µ core_settings.yaml –ø—Ä–æ–ø—É—â–µ–Ω–æ.[/yellow]")
    else:
        from core.app_settings import AppSettings
        default_settings = AppSettings(telegram={'token': 'dummy'}).model_dump(exclude_defaults=False)
        # –£–¥–∞–ª—è–µ–º –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ .env
        del default_settings['telegram']
        del default_settings['db']
        del default_settings['core']['super_admins']

        if write_yaml_file(user_config_file, default_settings):
            sdb_console.print(f"[green]‚úì[/] –§–∞–π–ª [yellow]{user_config_file}[/yellow] —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.")
    
    sdb_console.print(Panel("‚úÖ [bold green]–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞![/]", expand=False))
    sdb_console.print("üí° [bold]–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:[/bold] [cyan]sdb db upgrade head[/cyan]")

@config_app.command("get", help="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞.")
def get_command(key: Optional[str] = typer.Argument(None, help="–ö–ª—é—á (–Ω–∞–ø—Ä. 'db.type')"), show_defaults: bool = typer.Option(False, "--show-defaults")):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é SDB."""
    try:
        from core.app_settings import settings
    except Exception as e:
        sdb_console.print(f"[bold red]–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}[/bold red]"); raise typer.Exit(1)
        
    if key is None:
        config_dict = settings.model_dump(mode='json', exclude_defaults=not show_defaults)
        yaml_output = yaml.dump(config_dict, indent=2, sort_keys=False)
        sdb_console.print(Panel("[bold cyan]–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SwiftDevBot[/]", expand=False))
        sdb_console.print(Syntax(yaml_output, "yaml", theme="native", line_numbers=True))
    else:
        try:
            value = settings
            for part in key.split('.'):
                value = getattr(value, part) if hasattr(value, part) else value[part] # type: ignore
            
            if hasattr(value, 'model_dump'): value = value.model_dump(mode='json')
            
            # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            sdb_console.print(Panel(f"[bold cyan]–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {key}[/]", expand=False))
            
            if isinstance(value, dict):
                yaml_output = yaml.dump(value, indent=2, sort_keys=False)
                sdb_console.print(Syntax(yaml_output, "yaml", theme="native"))
            else:
                sdb_console.print(f"   [green]–ó–Ω–∞—á–µ–Ω–∏–µ:[/green] {value}")
                sdb_console.print(f"   [blue]–¢–∏–ø:[/blue] {type(value).__name__}")
                
        except (AttributeError, KeyError):
            sdb_console.print(f"[bold red]–û—à–∏–±–∫–∞: –ö–ª—é—á '{key}' –Ω–µ –Ω–∞–π–¥–µ–Ω.[/bold red]"); raise typer.Exit(1)

@config_app.command("set", help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ core_settings.yaml –∏–ª–∏ .env.")
def set_command(key: str = typer.Argument(..., help="–ö–ª—é—á –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–Ω–∞–ø—Ä. 'core.log_level')"),
                value: str = typer.Argument(..., help="–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")):
    """–ò–∑–º–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —è–¥—Ä–∞ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    sdb_console.print(f"–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å [cyan]{key}[/] = [green]'{value}'[/green]...")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_map = {
        'telegram.token': 'BOT_TOKEN', 'db.pg_dsn': 'SDB_DB_PG_DSN',
        'db.mysql_dsn': 'SDB_DB_MYSQL_DSN', 'core.super_admins': 'SDB_CORE_SUPER_ADMINS'
    }
    if key.lower() in env_map:
        _update_env_file(env_map[key.lower()], value)
        return

    # –ï—Å–ª–∏ –Ω–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ–º —Å core_settings.yaml
    project_data_path = _get_project_data_path()
    config_file = project_data_path / USER_CONFIG_DIR_NAME / USER_CORE_CONFIG_FILENAME
    config_data = read_yaml_file(config_file)
    if config_data is None:
        sdb_console.print(f"[bold red]–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {config_file}.[/bold red]\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ 'sdb config init', —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.")
        raise typer.Exit(1)
    
    keys = key.split('.')
    current_level = config_data
    for i, k in enumerate(keys[:-1]):
        if k not in current_level or not isinstance(current_level[k], dict):
            current_level[k] = {}
        current_level = current_level[k]
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    final_value: Any = value
    if value.lower() in ['true', 'false']: final_value = value.lower() == 'true'
    elif value.isdigit(): final_value = int(value)
    else:
        try: final_value = float(value)
        except ValueError: pass

    current_level[keys[-1]] = final_value
    
    if write_yaml_file(config_file, config_data):
        sdb_console.print(f"[green]‚úì[/] –ö–ª—é—á [cyan]{key}[/] –æ–±–Ω–æ–≤–ª–µ–Ω –≤ [yellow]{config_file}[/yellow].")
        sdb_console.print("[yellow]–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.[/yellow]")

@config_app.command("set-module", help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è.")
def set_module_command(
    module_name: str = typer.Argument(..., help="–ò–º—è –º–æ–¥—É–ª—è (–∏–∑ manifest.name)."),
    key: str = typer.Argument(..., help="–ö–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –º–æ–¥—É–ª–µ."),
    value: str = typer.Argument(..., help="–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
):
    """–ò–∑–º–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è."""
    sdb_console.print(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–¥—É–ª—è [magenta]{module_name}[/]: [cyan]{key}[/] = [green]'{value}'[/green]")
    
    project_data_path = _get_project_data_path()
    module_config_file = project_data_path / USER_CONFIG_DIR_NAME / USER_MODULES_CONFIG_DIR_NAME / f"{module_name}.yaml"
    
    config_data = read_yaml_file(module_config_file) or {}
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    final_value: Any = value
    if value.lower() in ['true', 'false']: final_value = value.lower() == 'true'
    elif value.isdigit(): final_value = int(value)
    else:
        try: final_value = float(value)
        except ValueError: pass
        
    config_data[key] = final_value
    
    if write_yaml_file(module_config_file, config_data):
        sdb_console.print(f"[green]‚úì[/] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª—è [magenta]{module_name}[/] –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ [yellow]{module_config_file}[/yellow].")
        sdb_console.print("[yellow]–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.[/yellow]")

if __name__ == "__main__":
    config_app()# --- –ö–û–ù–ï–¶ –§–ê–ô–õ–ê cli/config.py ---
